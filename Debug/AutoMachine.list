
AutoMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd0  08010970  08010970  00020970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011640  08011640  0003024c  2**0
                  CONTENTS
  4 .ARM          00000008  08011640  08011640  00021640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011648  08011648  0003024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011648  08011648  00021648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801164c  0801164c  0002164c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08011650  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be4  2000024c  0801189c  0003024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000700  20002e30  0801189c  00032e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c894  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057f4  00000000  00000000  0005cb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f8  00000000  00000000  00062308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e90  00000000  00000000  00064400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d92e  00000000  00000000  00066290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002875e  00000000  00000000  00093bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107031  00000000  00000000  000bc31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c334d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c64  00000000  00000000  001c33a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010958 	.word	0x08010958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	08010958 	.word	0x08010958

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b2f      	cmp	r3, #47	; 0x2f
 8000eae:	d906      	bls.n	8000ebe <Hex2Num+0x1e>
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b39      	cmp	r3, #57	; 0x39
 8000eb4:	d803      	bhi.n	8000ebe <Hex2Num+0x1e>
        return a - '0';
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	3b30      	subs	r3, #48	; 0x30
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	e014      	b.n	8000ee8 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b60      	cmp	r3, #96	; 0x60
 8000ec2:	d906      	bls.n	8000ed2 <Hex2Num+0x32>
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b66      	cmp	r3, #102	; 0x66
 8000ec8:	d803      	bhi.n	8000ed2 <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	3b57      	subs	r3, #87	; 0x57
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	e00a      	b.n	8000ee8 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b40      	cmp	r3, #64	; 0x40
 8000ed6:	d906      	bls.n	8000ee6 <Hex2Num+0x46>
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b46      	cmp	r3, #70	; 0x46
 8000edc:	d803      	bhi.n	8000ee6 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	3b37      	subs	r3, #55	; 0x37
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	e000      	b.n	8000ee8 <Hex2Num+0x48>
    }

    return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f06:	e012      	b.n	8000f2e <ParseHexNumber+0x3a>
        sum <<= 4;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ffc4 	bl	8000ea0 <Hex2Num>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3301      	adds	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
        i++;
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b2f      	cmp	r3, #47	; 0x2f
 8000f34:	d903      	bls.n	8000f3e <ParseHexNumber+0x4a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b39      	cmp	r3, #57	; 0x39
 8000f3c:	d9e4      	bls.n	8000f08 <ParseHexNumber+0x14>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b60      	cmp	r3, #96	; 0x60
 8000f44:	d903      	bls.n	8000f4e <ParseHexNumber+0x5a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b66      	cmp	r3, #102	; 0x66
 8000f4c:	d9dc      	bls.n	8000f08 <ParseHexNumber+0x14>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b40      	cmp	r3, #64	; 0x40
 8000f54:	d903      	bls.n	8000f5e <ParseHexNumber+0x6a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b46      	cmp	r3, #70	; 0x46
 8000f5c:	d9d4      	bls.n	8000f08 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <ParseHexNumber+0x76>
        *cnt = i;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	7afa      	ldrb	r2, [r7, #11]
 8000f68:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	2300      	movs	r3, #0
 8000f84:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b2d      	cmp	r3, #45	; 0x2d
 8000f90:	d119      	bne.n	8000fc6 <ParseNumber+0x52>
        minus = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
        i++;
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000fa2:	e010      	b.n	8000fc6 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	3b30      	subs	r3, #48	; 0x30
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
        i++;
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b2f      	cmp	r3, #47	; 0x2f
 8000fcc:	d903      	bls.n	8000fd6 <ParseNumber+0x62>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b39      	cmp	r3, #57	; 0x39
 8000fd4:	d9e6      	bls.n	8000fa4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <ParseNumber+0x6e>
        *cnt = i;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	7bba      	ldrb	r2, [r7, #14]
 8000fe0:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <ParseNumber+0x7a>
        return 0 - sum;
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	425b      	negs	r3, r3
 8000fec:	e000      	b.n	8000ff0 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000fee:	68bb      	ldr	r3, [r7, #8]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800100a:	e019      	b.n	8001040 <ParseMAC+0x44>
    hexcnt = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b3a      	cmp	r3, #58	; 0x3a
 8001016:	d00e      	beq.n	8001036 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8001018:	f107 030e 	add.w	r3, r7, #14
 800101c:	4619      	mov	r1, r3
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff68 	bl	8000ef4 <ParseHexNumber>
 8001024:	4601      	mov	r1, r0
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	73fa      	strb	r2, [r7, #15]
 800102c:	461a      	mov	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	b2ca      	uxtb	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e1      	bne.n	800100c <ParseMAC+0x10>
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001060:	e019      	b.n	8001096 <ParseIP+0x44>
    hexcnt = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b2e      	cmp	r3, #46	; 0x2e
 800106c:	d00e      	beq.n	800108c <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800106e:	f107 030e 	add.w	r3, r7, #14
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff7d 	bl	8000f74 <ParseNumber>
 800107a:	4601      	mov	r1, r0
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	73fa      	strb	r2, [r7, #15]
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1e1      	bne.n	8001062 <ParseIP+0x10>
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3302      	adds	r3, #2
 80010ba:	4934      	ldr	r1, [pc, #208]	; (800118c <AT_ParseInfo+0xe4>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f00d f9ef 	bl	800e4a0 <strtok>
 80010c2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80010c4:	e05a      	b.n	800117c <AT_ParseInfo+0xd4>
    switch (num++) {
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	72fa      	strb	r2, [r7, #11]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	d84f      	bhi.n	8001170 <AT_ParseInfo+0xc8>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <AT_ParseInfo+0x30>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	080010f5 	.word	0x080010f5
 80010dc:	08001103 	.word	0x08001103
 80010e0:	08001113 	.word	0x08001113
 80010e4:	08001123 	.word	0x08001123
 80010e8:	08001133 	.word	0x08001133
 80010ec:	08001143 	.word	0x08001143
 80010f0:	08001157 	.word	0x08001157
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00d f9a6 	bl	800e44c <strncpy>
      break;
 8001100:	e037      	b.n	8001172 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3320      	adds	r3, #32
 8001106:	2218      	movs	r2, #24
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	4618      	mov	r0, r3
 800110c:	f00d f99e 	bl	800e44c <strncpy>
      break;
 8001110:	e02f      	b.n	8001172 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3338      	adds	r3, #56	; 0x38
 8001116:	2210      	movs	r2, #16
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	4618      	mov	r0, r3
 800111c:	f00d f996 	bl	800e44c <strncpy>
      break;
 8001120:	e027      	b.n	8001172 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3348      	adds	r3, #72	; 0x48
 8001126:	2210      	movs	r2, #16
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f00d f98e 	bl	800e44c <strncpy>
      break;
 8001130:	e01f      	b.n	8001172 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3358      	adds	r3, #88	; 0x58
 8001136:	2210      	movs	r2, #16
 8001138:	68f9      	ldr	r1, [r7, #12]
 800113a:	4618      	mov	r0, r3
 800113c:	f00d f986 	bl	800e44c <strncpy>
      break;
 8001140:	e017      	b.n	8001172 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8001142:	2100      	movs	r1, #0
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff ff15 	bl	8000f74 <ParseNumber>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001154:	e00d      	b.n	8001172 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <AT_ParseInfo+0xe8>)
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f00d f9a1 	bl	800e4a0 <strtok>
 800115e:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3368      	adds	r3, #104	; 0x68
 8001164:	2220      	movs	r2, #32
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	4618      	mov	r0, r3
 800116a:	f00d f96f 	bl	800e44c <strncpy>
      break;
 800116e:	e000      	b.n	8001172 <AT_ParseInfo+0xca>

    default: break;
 8001170:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001172:	4906      	ldr	r1, [pc, #24]	; (800118c <AT_ParseInfo+0xe4>)
 8001174:	2000      	movs	r0, #0
 8001176:	f00d f993 	bl	800e4a0 <strtok>
 800117a:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1a1      	bne.n	80010c6 <AT_ParseInfo+0x1e>
  }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	080109a0 	.word	0x080109a0
 8001190:	080109a4 	.word	0x080109a4

08001194 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3302      	adds	r3, #2
 80011a6:	4952      	ldr	r1, [pc, #328]	; (80012f0 <AT_ParseConnSettings+0x15c>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00d f979 	bl	800e4a0 <strtok>
 80011ae:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80011b0:	e095      	b.n	80012de <AT_ParseConnSettings+0x14a>
    switch (num++) {
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	73fa      	strb	r2, [r7, #15]
 80011b8:	2b0b      	cmp	r3, #11
 80011ba:	d87f      	bhi.n	80012bc <AT_ParseConnSettings+0x128>
 80011bc:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <AT_ParseConnSettings+0x30>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	080011f5 	.word	0x080011f5
 80011c8:	08001203 	.word	0x08001203
 80011cc:	08001213 	.word	0x08001213
 80011d0:	08001227 	.word	0x08001227
 80011d4:	0800123b 	.word	0x0800123b
 80011d8:	0800124f 	.word	0x0800124f
 80011dc:	0800125d 	.word	0x0800125d
 80011e0:	0800126b 	.word	0x0800126b
 80011e4:	08001279 	.word	0x08001279
 80011e8:	08001287 	.word	0x08001287
 80011ec:	08001295 	.word	0x08001295
 80011f0:	080012a9 	.word	0x080012a9
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2221      	movs	r2, #33	; 0x21
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00d f926 	bl	800e44c <strncpy>
      break;
 8001200:	e05d      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3321      	adds	r3, #33	; 0x21
 8001206:	2221      	movs	r2, #33	; 0x21
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	4618      	mov	r0, r3
 800120c:	f00d f91e 	bl	800e44c <strncpy>
      break;
 8001210:	e055      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001212:	2100      	movs	r1, #0
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f7ff fead 	bl	8000f74 <ParseNumber>
 800121a:	4603      	mov	r3, r0
 800121c:	b2da      	uxtb	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8001224:	e04b      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8001226:	2100      	movs	r1, #0
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f7ff fea3 	bl	8000f74 <ParseNumber>
 800122e:	4603      	mov	r3, r0
 8001230:	b2da      	uxtb	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8001238:	e041      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800123a:	2100      	movs	r1, #0
 800123c:	68b8      	ldr	r0, [r7, #8]
 800123e:	f7ff fe99 	bl	8000f74 <ParseNumber>
 8001242:	4603      	mov	r3, r0
 8001244:	b2da      	uxtb	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 800124c:	e037      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3348      	adds	r3, #72	; 0x48
 8001252:	4619      	mov	r1, r3
 8001254:	68b8      	ldr	r0, [r7, #8]
 8001256:	f7ff fefc 	bl	8001052 <ParseIP>
      break;
 800125a:	e030      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	334c      	adds	r3, #76	; 0x4c
 8001260:	4619      	mov	r1, r3
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f7ff fef5 	bl	8001052 <ParseIP>
      break;
 8001268:	e029      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3350      	adds	r3, #80	; 0x50
 800126e:	4619      	mov	r1, r3
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f7ff feee 	bl	8001052 <ParseIP>
      break;
 8001276:	e022      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3354      	adds	r3, #84	; 0x54
 800127c:	4619      	mov	r1, r3
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7ff fee7 	bl	8001052 <ParseIP>
      break;
 8001284:	e01b      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3358      	adds	r3, #88	; 0x58
 800128a:	4619      	mov	r1, r3
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff fee0 	bl	8001052 <ParseIP>
      break;
 8001292:	e014      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001294:	2100      	movs	r1, #0
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff fe6c 	bl	8000f74 <ParseNumber>
 800129c:	4603      	mov	r3, r0
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80012a6:	e00a      	b.n	80012be <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80012a8:	2100      	movs	r1, #0
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff fe62 	bl	8000f74 <ParseNumber>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80012ba:	e000      	b.n	80012be <AT_ParseConnSettings+0x12a>

    default:
      break;
 80012bc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80012be:	490c      	ldr	r1, [pc, #48]	; (80012f0 <AT_ParseConnSettings+0x15c>)
 80012c0:	2000      	movs	r0, #0
 80012c2:	f00d f8ed 	bl	800e4a0 <strtok>
 80012c6:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <AT_ParseConnSettings+0x14a>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b2c      	cmp	r3, #44	; 0x2c
 80012d6:	d102      	bne.n	80012de <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f47f af66 	bne.w	80011b2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	080109a0 	.word	0x080109a0

080012f4 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3302      	adds	r3, #2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b31      	cmp	r3, #49	; 0x31
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f7fe ff48 	bl	80001d0 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	b299      	uxth	r1, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800134a:	461a      	mov	r2, r3
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	47a0      	blx	r4
 8001350:	4603      	mov	r3, r0
 8001352:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	dd3e      	ble.n	80013d8 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001366:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
 800136e:	4603      	mov	r3, r0
 8001370:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001372:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001376:	2b00      	cmp	r3, #0
 8001378:	dd27      	ble.n	80013ca <AT_ExecuteCommand+0xaa>
 800137a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800137e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001382:	dc22      	bgt.n	80013ca <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001384:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001388:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800138c:	d105      	bne.n	800139a <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800138e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001392:	b29b      	uxth	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800139a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80013a6:	490f      	ldr	r1, [pc, #60]	; (80013e4 <AT_ExecuteCommand+0xc4>)
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f00d f862 	bl	800e472 <strstr>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e010      	b.n	80013da <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80013b8:	490b      	ldr	r1, [pc, #44]	; (80013e8 <AT_ExecuteCommand+0xc8>)
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f00d f859 	bl	800e472 <strstr>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013c6:	2305      	movs	r3, #5
 80013c8:	e007      	b.n	80013da <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80013ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013ce:	f113 0f04 	cmn.w	r3, #4
 80013d2:	d101      	bne.n	80013d8 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80013d4:	2306      	movs	r3, #6
 80013d6:	e000      	b.n	80013da <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80013d8:	2304      	movs	r3, #4
}
 80013da:	4618      	mov	r0, r3
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	080109b4 	.word	0x080109b4
 80013e8:	080109c0 	.word	0x080109c0

080013ec <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8001406:	68b8      	ldr	r0, [r7, #8]
 8001408:	f7fe fee2 	bl	80001d0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001410:	8a7b      	ldrh	r3, [r7, #18]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <AT_RequestSendData+0x32>
 800141a:	2302      	movs	r3, #2
 800141c:	e053      	b.n	80014c6 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800142a:	8a79      	ldrh	r1, [r7, #18]
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	4798      	blx	r3
 8001430:	4603      	mov	r3, r0
 8001432:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001434:	8a3a      	ldrh	r2, [r7, #16]
 8001436:	8a7b      	ldrh	r3, [r7, #18]
 8001438:	429a      	cmp	r2, r3
 800143a:	d143      	bne.n	80014c4 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001448:	8879      	ldrh	r1, [r7, #2]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
 800144e:	4603      	mov	r3, r0
 8001450:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001452:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	429a      	cmp	r2, r3
 800145a:	d131      	bne.n	80014c0 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001468:	2100      	movs	r1, #0
 800146a:	6a38      	ldr	r0, [r7, #32]
 800146c:	4798      	blx	r3
 800146e:	4603      	mov	r3, r0
 8001470:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001472:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	dd19      	ble.n	80014ae <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800147a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800147e:	6a3a      	ldr	r2, [r7, #32]
 8001480:	4413      	add	r3, r2
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001486:	4912      	ldr	r1, [pc, #72]	; (80014d0 <AT_RequestSendData+0xe4>)
 8001488:	6a38      	ldr	r0, [r7, #32]
 800148a:	f00c fff2 	bl	800e472 <strstr>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e016      	b.n	80014c6 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001498:	490e      	ldr	r1, [pc, #56]	; (80014d4 <AT_RequestSendData+0xe8>)
 800149a:	6a38      	ldr	r0, [r7, #32]
 800149c:	f00c ffe9 	bl	800e472 <strstr>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80014a6:	2305      	movs	r3, #5
 80014a8:	e00d      	b.n	80014c6 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80014aa:	2302      	movs	r3, #2
 80014ac:	e00b      	b.n	80014c6 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80014ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014b2:	f113 0f04 	cmn.w	r3, #4
 80014b6:	d101      	bne.n	80014bc <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80014b8:	2306      	movs	r3, #6
 80014ba:	e004      	b.n	80014c6 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80014bc:	2302      	movs	r3, #2
 80014be:	e002      	b.n	80014c6 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80014c0:	2302      	movs	r3, #2
 80014c2:	e000      	b.n	80014c6 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80014c4:	2304      	movs	r3, #4
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	080109b4 	.word	0x080109b4
 80014d4:	080109c0 	.word	0x080109c0

080014d8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80014e0:	2302      	movs	r3, #2
 80014e2:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f247 5230 	movw	r2, #30000	; 0x7530
 80014ea:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80014f4:	2000      	movs	r0, #0
 80014f6:	4798      	blx	r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d113      	bne.n	8001526 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001504:	461a      	mov	r2, r3
 8001506:	490a      	ldr	r1, [pc, #40]	; (8001530 <ES_WIFI_Init+0x58>)
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff09 	bl	8001320 <AT_ExecuteCommand>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d106      	bne.n	8001526 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800151e:	4619      	mov	r1, r3
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fdc1 	bl	80010a8 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	080109d0 	.word	0x080109d0

08001534 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00b      	beq.n	8001560 <ES_WIFI_RegisterBusIO+0x2c>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <ES_WIFI_RegisterBusIO+0x2c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <ES_WIFI_RegisterBusIO+0x2c>
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <ES_WIFI_RegisterBusIO+0x2c>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001560:	2302      	movs	r3, #2
 8001562:	e014      	b.n	800158e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	4932      	ldr	r1, [pc, #200]	; (800167c <ES_WIFI_Connect+0xe0>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00c ff29 	bl	800e40c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015c6:	461a      	mov	r2, r3
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fea9 	bl	8001320 <AT_ExecuteCommand>
 80015ce:	4603      	mov	r3, r0
 80015d0:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14b      	bne.n	8001670 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4927      	ldr	r1, [pc, #156]	; (8001680 <ES_WIFI_Connect+0xe4>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00c ff12 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015f4:	461a      	mov	r2, r3
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff fe92 	bl	8001320 <AT_ExecuteCommand>
 80015fc:	4603      	mov	r3, r0
 80015fe:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d134      	bne.n	8001670 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	491b      	ldr	r1, [pc, #108]	; (8001684 <ES_WIFI_Connect+0xe8>)
 8001618:	4618      	mov	r0, r3
 800161a:	f00c fef7 	bl	800e40c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800162a:	461a      	mov	r2, r3
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fe77 	bl	8001320 <AT_ExecuteCommand>
 8001632:	4603      	mov	r3, r0
 8001634:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d119      	bne.n	8001670 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001642:	4911      	ldr	r1, [pc, #68]	; (8001688 <ES_WIFI_Connect+0xec>)
 8001644:	4618      	mov	r0, r3
 8001646:	f00c fee1 	bl	800e40c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001656:	461a      	mov	r2, r3
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fe61 	bl	8001320 <AT_ExecuteCommand>
 800165e:	4603      	mov	r3, r0
 8001660:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001662:	7dfb      	ldrb	r3, [r7, #23]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d103      	bne.n	8001670 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001670:	7dfb      	ldrb	r3, [r7, #23]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	080109e8 	.word	0x080109e8
 8001680:	080109f0 	.word	0x080109f0
 8001684:	080109f8 	.word	0x080109f8
 8001688:	08010a00 	.word	0x08010a00

0800168c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800169a:	4911      	ldr	r1, [pc, #68]	; (80016e0 <ES_WIFI_IsConnected+0x54>)
 800169c:	4618      	mov	r0, r3
 800169e:	f00c feb5 	bl	800e40c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ae:	461a      	mov	r2, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fe35 	bl	8001320 <AT_ExecuteCommand>
 80016b6:	4603      	mov	r3, r0
 80016b8:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d108      	bne.n	80016d2 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	33d2      	adds	r3, #210	; 0xd2
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f7ff fe11 	bl	80012f4 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	08010a04 	.word	0x08010a04

080016e4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f2:	4910      	ldr	r1, [pc, #64]	; (8001734 <ES_WIFI_GetNetworkSettings+0x50>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00c fe89 	bl	800e40c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001706:	461a      	mov	r2, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe09 	bl	8001320 <AT_ExecuteCommand>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d108      	bne.n	800172a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	338d      	adds	r3, #141	; 0x8d
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7ff fd35 	bl	8001194 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	08010a0c 	.word	0x08010a0c

08001738 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001748:	4912      	ldr	r1, [pc, #72]	; (8001794 <ES_WIFI_GetMACAddress+0x5c>)
 800174a:	4618      	mov	r0, r3
 800174c:	f00c fe5e 	bl	800e40c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800175c:	461a      	mov	r2, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fdde 	bl	8001320 <AT_ExecuteCommand>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001774:	3302      	adds	r3, #2
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <ES_WIFI_GetMACAddress+0x60>)
 8001778:	4618      	mov	r0, r3
 800177a:	f00c fe91 	bl	800e4a0 <strtok>
 800177e:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	68b8      	ldr	r0, [r7, #8]
 8001784:	f7ff fc3a 	bl	8000ffc <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	08010a5c 	.word	0x08010a5c
 8001798:	08010a60 	.word	0x08010a60

0800179c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <ES_WIFI_StartClientConnection+0x1e>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d105      	bne.n	80017c6 <ES_WIFI_StartClientConnection+0x2a>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	885b      	ldrh	r3, [r3, #2]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <ES_WIFI_StartClientConnection+0x2a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e0c1      	b.n	800194a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4960      	ldr	r1, [pc, #384]	; (8001954 <ES_WIFI_StartClientConnection+0x1b8>)
 80017d4:	f00c fe1a 	bl	800e40c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017e4:	461a      	mov	r2, r3
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fd9a 	bl	8001320 <AT_ExecuteCommand>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d114      	bne.n	8001820 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4955      	ldr	r1, [pc, #340]	; (8001958 <ES_WIFI_StartClientConnection+0x1bc>)
 8001804:	f00c fe02 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001814:	461a      	mov	r2, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fd82 	bl	8001320 <AT_ExecuteCommand>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d114      	bne.n	8001850 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	889b      	ldrh	r3, [r3, #4]
 8001830:	461a      	mov	r2, r3
 8001832:	494a      	ldr	r1, [pc, #296]	; (800195c <ES_WIFI_StartClientConnection+0x1c0>)
 8001834:	f00c fdea 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001844:	461a      	mov	r2, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fd6a 	bl	8001320 <AT_ExecuteCommand>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11c      	bne.n	8001890 <ES_WIFI_StartClientConnection+0xf4>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <ES_WIFI_StartClientConnection+0xca>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d114      	bne.n	8001890 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	885b      	ldrh	r3, [r3, #2]
 8001870:	461a      	mov	r2, r3
 8001872:	493b      	ldr	r1, [pc, #236]	; (8001960 <ES_WIFI_StartClientConnection+0x1c4>)
 8001874:	f00c fdca 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001884:	461a      	mov	r2, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fd4a 	bl	8001320 <AT_ExecuteCommand>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d128      	bne.n	80018e8 <ES_WIFI_StartClientConnection+0x14c>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <ES_WIFI_StartClientConnection+0x10a>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d120      	bne.n	80018e8 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	799b      	ldrb	r3, [r3, #6]
 80018b0:	4619      	mov	r1, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	79db      	ldrb	r3, [r3, #7]
 80018b6:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80018bc:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	9200      	str	r2, [sp, #0]
 80018c6:	4623      	mov	r3, r4
 80018c8:	460a      	mov	r2, r1
 80018ca:	4926      	ldr	r1, [pc, #152]	; (8001964 <ES_WIFI_StartClientConnection+0x1c8>)
 80018cc:	f00c fd9e 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018dc:	461a      	mov	r2, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fd1e 	bl	8001320 <AT_ExecuteCommand>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d116      	bne.n	800191c <ES_WIFI_StartClientConnection+0x180>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d112      	bne.n	800191c <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018fc:	491a      	ldr	r1, [pc, #104]	; (8001968 <ES_WIFI_StartClientConnection+0x1cc>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f00c fd84 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001910:	461a      	mov	r2, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fd04 	bl	8001320 <AT_ExecuteCommand>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d112      	bne.n	8001948 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001928:	4910      	ldr	r1, [pc, #64]	; (800196c <ES_WIFI_StartClientConnection+0x1d0>)
 800192a:	4618      	mov	r0, r3
 800192c:	f00c fd6e 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800193c:	461a      	mov	r2, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fcee 	bl	8001320 <AT_ExecuteCommand>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	bf00      	nop
 8001954:	08010ac4 	.word	0x08010ac4
 8001958:	08010acc 	.word	0x08010acc
 800195c:	08010ad4 	.word	0x08010ad4
 8001960:	08010adc 	.word	0x08010adc
 8001964:	08010ae4 	.word	0x08010ae4
 8001968:	08010af4 	.word	0x08010af4
 800196c:	08010afc 	.word	0x08010afc

08001970 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	461a      	mov	r2, r3
 800197c:	460b      	mov	r3, r1
 800197e:	72fb      	strb	r3, [r7, #11]
 8001980:	4613      	mov	r3, r2
 8001982:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001984:	2302      	movs	r3, #2
 8001986:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800198e:	2301      	movs	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e001      	b.n	8001998 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001998:	893b      	ldrh	r3, [r7, #8]
 800199a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800199e:	d302      	bcc.n	80019a6 <ES_WIFI_SendData+0x36>
 80019a0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80019a4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	893a      	ldrh	r2, [r7, #8]
 80019aa:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019b2:	7afa      	ldrb	r2, [r7, #11]
 80019b4:	4942      	ldr	r1, [pc, #264]	; (8001ac0 <ES_WIFI_SendData+0x150>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00c fd28 	bl	800e40c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019c8:	461a      	mov	r2, r3
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff fca8 	bl	8001320 <AT_ExecuteCommand>
 80019d0:	4603      	mov	r3, r0
 80019d2:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 80019d4:	7cfb      	ldrb	r3, [r7, #19]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d15e      	bne.n	8001a98 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4938      	ldr	r1, [pc, #224]	; (8001ac4 <ES_WIFI_SendData+0x154>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00c fd11 	bl	800e40c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019f6:	461a      	mov	r2, r3
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff fc91 	bl	8001320 <AT_ExecuteCommand>
 80019fe:	4603      	mov	r3, r0
 8001a00:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001a02:	7cfb      	ldrb	r3, [r7, #19]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d13d      	bne.n	8001a84 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a0e:	893a      	ldrh	r2, [r7, #8]
 8001a10:	492d      	ldr	r1, [pc, #180]	; (8001ac8 <ES_WIFI_SendData+0x158>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00c fcfa 	bl	800e40c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a24:	893a      	ldrh	r2, [r7, #8]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff fcdd 	bl	80013ec <AT_RequestSendData>
 8001a32:	4603      	mov	r3, r0
 8001a34:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001a36:	7cfb      	ldrb	r3, [r7, #19]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d119      	bne.n	8001a70 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a42:	4922      	ldr	r1, [pc, #136]	; (8001acc <ES_WIFI_SendData+0x15c>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00c fd14 	bl	800e472 <strstr>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d02c      	beq.n	8001aaa <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001a50:	f640 0267 	movw	r2, #2151	; 0x867
 8001a54:	491e      	ldr	r1, [pc, #120]	; (8001ad0 <ES_WIFI_SendData+0x160>)
 8001a56:	481f      	ldr	r0, [pc, #124]	; (8001ad4 <ES_WIFI_SendData+0x164>)
 8001a58:	f00c fc4a 	bl	800e2f0 <iprintf>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a62:	4619      	mov	r1, r3
 8001a64:	481c      	ldr	r0, [pc, #112]	; (8001ad8 <ES_WIFI_SendData+0x168>)
 8001a66:	f00c fc43 	bl	800e2f0 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	74fb      	strb	r3, [r7, #19]
 8001a6e:	e01c      	b.n	8001aaa <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001a70:	f640 026d 	movw	r2, #2157	; 0x86d
 8001a74:	4916      	ldr	r1, [pc, #88]	; (8001ad0 <ES_WIFI_SendData+0x160>)
 8001a76:	4817      	ldr	r0, [pc, #92]	; (8001ad4 <ES_WIFI_SendData+0x164>)
 8001a78:	f00c fc3a 	bl	800e2f0 <iprintf>
 8001a7c:	4817      	ldr	r0, [pc, #92]	; (8001adc <ES_WIFI_SendData+0x16c>)
 8001a7e:	f00c fcbd 	bl	800e3fc <puts>
 8001a82:	e012      	b.n	8001aaa <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001a84:	f640 0272 	movw	r2, #2162	; 0x872
 8001a88:	4911      	ldr	r1, [pc, #68]	; (8001ad0 <ES_WIFI_SendData+0x160>)
 8001a8a:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <ES_WIFI_SendData+0x164>)
 8001a8c:	f00c fc30 	bl	800e2f0 <iprintf>
 8001a90:	4813      	ldr	r0, [pc, #76]	; (8001ae0 <ES_WIFI_SendData+0x170>)
 8001a92:	f00c fcb3 	bl	800e3fc <puts>
 8001a96:	e008      	b.n	8001aaa <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001a98:	f640 0277 	movw	r2, #2167	; 0x877
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <ES_WIFI_SendData+0x160>)
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <ES_WIFI_SendData+0x164>)
 8001aa0:	f00c fc26 	bl	800e2f0 <iprintf>
 8001aa4:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <ES_WIFI_SendData+0x174>)
 8001aa6:	f00c fca9 	bl	800e3fc <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001aaa:	7cfb      	ldrb	r3, [r7, #19]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d102      	bne.n	8001ab6 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001ab6:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	08010ac4 	.word	0x08010ac4
 8001ac4:	08010c7c 	.word	0x08010c7c
 8001ac8:	08010c84 	.word	0x08010c84
 8001acc:	08010c90 	.word	0x08010c90
 8001ad0:	08010b54 	.word	0x08010b54
 8001ad4:	08010b70 	.word	0x08010b70
 8001ad8:	08010c98 	.word	0x08010c98
 8001adc:	08010cb4 	.word	0x08010cb4
 8001ae0:	08010cd0 	.word	0x08010cd0
 8001ae4:	08010ce4 	.word	0x08010ce4

08001ae8 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001af0:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afa:	6593      	str	r3, [r2, #88]	; 0x58
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	4a49      	ldr	r2, [pc, #292]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a43      	ldr	r2, [pc, #268]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <SPI_WIFI_MspInit+0x164>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b56:	483e      	ldr	r0, [pc, #248]	; (8001c50 <SPI_WIFI_MspInit+0x168>)
 8001b58:	f003 f800 	bl	8004b5c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4836      	ldr	r0, [pc, #216]	; (8001c50 <SPI_WIFI_MspInit+0x168>)
 8001b76:	f002 fe2f 	bl	80047d8 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001b7e:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <SPI_WIFI_MspInit+0x16c>)
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4831      	ldr	r0, [pc, #196]	; (8001c58 <SPI_WIFI_MspInit+0x170>)
 8001b92:	f002 fe21 	bl	80047d8 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4829      	ldr	r0, [pc, #164]	; (8001c58 <SPI_WIFI_MspInit+0x170>)
 8001bb4:	f002 fe10 	bl	80047d8 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2101      	movs	r1, #1
 8001bbc:	4826      	ldr	r0, [pc, #152]	; (8001c58 <SPI_WIFI_MspInit+0x170>)
 8001bbe:	f002 ffcd 	bl	8004b5c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	481f      	ldr	r0, [pc, #124]	; (8001c58 <SPI_WIFI_MspInit+0x170>)
 8001bda:	f002 fdfd 	bl	80047d8 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001bec:	2301      	movs	r3, #1
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4818      	ldr	r0, [pc, #96]	; (8001c5c <SPI_WIFI_MspInit+0x174>)
 8001bfc:	f002 fdec 	bl	80047d8 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c12:	2306      	movs	r3, #6
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480f      	ldr	r0, [pc, #60]	; (8001c5c <SPI_WIFI_MspInit+0x174>)
 8001c1e:	f002 fddb 	bl	80047d8 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c30:	2301      	movs	r3, #1
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c34:	2306      	movs	r3, #6
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4807      	ldr	r0, [pc, #28]	; (8001c5c <SPI_WIFI_MspInit+0x174>)
 8001c40:	f002 fdca 	bl	80047d8 <HAL_GPIO_Init>
}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	; 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	10110000 	.word	0x10110000
 8001c58:	48001000 	.word	0x48001000
 8001c5c:	48000800 	.word	0x48000800

08001c60 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d145      	bne.n	8001d00 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001c76:	4a28      	ldr	r2, [pc, #160]	; (8001d18 <SPI_WIFI_Init+0xb8>)
 8001c78:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001c7a:	4826      	ldr	r0, [pc, #152]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001c7c:	f7ff ff34 	bl	8001ae8 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001c82:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c86:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001c90:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001c94:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001cac:	2210      	movs	r2, #16
 8001cae:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001cc8:	4812      	ldr	r0, [pc, #72]	; (8001d14 <SPI_WIFI_Init+0xb4>)
 8001cca:	f004 ffeb 	bl	8006ca4 <HAL_SPI_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	e018      	b.n	8001d0c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2007      	movs	r0, #7
 8001ce0:	f002 fd03 	bl	80046ea <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001ce4:	2007      	movs	r0, #7
 8001ce6:	f002 fd1c 	bl	8004722 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2033      	movs	r0, #51	; 0x33
 8001cf0:	f002 fcfb 	bl	80046ea <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001cf4:	2033      	movs	r0, #51	; 0x33
 8001cf6:	f002 fd14 	bl	8004722 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f000 f9fe 	bl	80020fc <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001d00:	f000 f80c 	bl	8001d1c <SPI_WIFI_ResetModule>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20002190 	.word	0x20002190
 8001d18:	40003c00 	.word	0x40003c00

08001d1c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001d22:	f002 fbd7 	bl	80044d4 <HAL_GetTick>
 8001d26:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d32:	4830      	ldr	r0, [pc, #192]	; (8001df4 <SPI_WIFI_ResetModule+0xd8>)
 8001d34:	f002 ff12 	bl	8004b5c <HAL_GPIO_WritePin>
 8001d38:	200a      	movs	r0, #10
 8001d3a:	f002 fbd7 	bl	80044ec <HAL_Delay>
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d44:	482b      	ldr	r0, [pc, #172]	; (8001df4 <SPI_WIFI_ResetModule+0xd8>)
 8001d46:	f002 ff09 	bl	8004b5c <HAL_GPIO_WritePin>
 8001d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4e:	f002 fbcd 	bl	80044ec <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001d52:	2200      	movs	r2, #0
 8001d54:	2101      	movs	r1, #1
 8001d56:	4827      	ldr	r0, [pc, #156]	; (8001df4 <SPI_WIFI_ResetModule+0xd8>)
 8001d58:	f002 ff00 	bl	8004b5c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001d5c:	200f      	movs	r0, #15
 8001d5e:	f000 f9cd 	bl	80020fc <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8001d62:	e020      	b.n	8001da6 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	463a      	mov	r2, r7
 8001d68:	18d1      	adds	r1, r2, r3
 8001d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4821      	ldr	r0, [pc, #132]	; (8001df8 <SPI_WIFI_ResetModule+0xdc>)
 8001d72:	f005 f89f 	bl	8006eb4 <HAL_SPI_Receive>
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001d80:	f002 fba8 	bl	80044d4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8e:	d202      	bcs.n	8001d96 <SPI_WIFI_ResetModule+0x7a>
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8001d96:	2201      	movs	r2, #1
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4816      	ldr	r0, [pc, #88]	; (8001df4 <SPI_WIFI_ResetModule+0xd8>)
 8001d9c:	f002 fede 	bl	8004b5c <HAL_GPIO_WritePin>
      return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e021      	b.n	8001dea <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8001da6:	2102      	movs	r1, #2
 8001da8:	4812      	ldr	r0, [pc, #72]	; (8001df4 <SPI_WIFI_ResetModule+0xd8>)
 8001daa:	f002 febf 	bl	8004b2c <HAL_GPIO_ReadPin>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d0d7      	beq.n	8001d64 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8001db4:	2201      	movs	r2, #1
 8001db6:	2101      	movs	r1, #1
 8001db8:	480e      	ldr	r0, [pc, #56]	; (8001df4 <SPI_WIFI_ResetModule+0xd8>)
 8001dba:	f002 fecf 	bl	8004b5c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001dbe:	783b      	ldrb	r3, [r7, #0]
 8001dc0:	2b15      	cmp	r3, #21
 8001dc2:	d10e      	bne.n	8001de2 <SPI_WIFI_ResetModule+0xc6>
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b15      	cmp	r3, #21
 8001dc8:	d10b      	bne.n	8001de2 <SPI_WIFI_ResetModule+0xc6>
 8001dca:	78bb      	ldrb	r3, [r7, #2]
 8001dcc:	2b0d      	cmp	r3, #13
 8001dce:	d108      	bne.n	8001de2 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8001dd2:	2b0a      	cmp	r3, #10
 8001dd4:	d105      	bne.n	8001de2 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001dd6:	793b      	ldrb	r3, [r7, #4]
 8001dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8001dda:	d102      	bne.n	8001de2 <SPI_WIFI_ResetModule+0xc6>
 8001ddc:	797b      	ldrb	r3, [r7, #5]
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d002      	beq.n	8001de8 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	e000      	b.n	8001dea <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	48001000 	.word	0x48001000
 8001df8:	20002190 	.word	0x20002190

08001dfc <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <SPI_WIFI_DeInit+0x10>)
 8001e02:	f005 f81b 	bl	8006e3c <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20002190 	.word	0x20002190

08001e10 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001e18:	f002 fb5c 	bl	80044d4 <HAL_GetTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8001e20:	e00a      	b.n	8001e38 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e22:	f002 fb57 	bl	80044d4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad2      	subs	r2, r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d902      	bls.n	8001e38 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e007      	b.n	8001e48 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <wait_cmddata_rdy_high+0x40>)
 8001e3c:	f002 fe76 	bl	8004b2c <HAL_GPIO_ReadPin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d1ed      	bne.n	8001e22 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	48001000 	.word	0x48001000

08001e54 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001e5c:	f002 fb3a 	bl	80044d4 <HAL_GetTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001e64:	e00a      	b.n	8001e7c <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e66:	f002 fb35 	bl	80044d4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad2      	subs	r2, r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d902      	bls.n	8001e7c <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e004      	b.n	8001e86 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <wait_cmddata_rdy_rising_event+0x3c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d0f0      	beq.n	8001e66 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8001e84:	2300      	movs	r3, #0
#endif
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000270 	.word	0x20000270

08001e94 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001e9c:	f002 fb1a 	bl	80044d4 <HAL_GetTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8001ea4:	e00a      	b.n	8001ebc <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ea6:	f002 fb15 	bl	80044d4 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad2      	subs	r2, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d902      	bls.n	8001ebc <wait_spi_rx_event+0x28>
    {
      return -1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e004      	b.n	8001ec6 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <wait_spi_rx_event+0x3c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d0f0      	beq.n	8001ea6 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8001ec4:	2300      	movs	r3, #0
#endif
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000268 	.word	0x20000268

08001ed4 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001edc:	f002 fafa 	bl	80044d4 <HAL_GetTick>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001ee4:	e00a      	b.n	8001efc <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001ee6:	f002 faf5 	bl	80044d4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad2      	subs	r2, r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d902      	bls.n	8001efc <wait_spi_tx_event+0x28>
    {
      return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e004      	b.n	8001f06 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <wait_spi_tx_event+0x3c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d0f0      	beq.n	8001ee6 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001f04:	2300      	movs	r3, #0
#endif
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000026c 	.word	0x2000026c

08001f14 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001f26:	2201      	movs	r2, #1
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4834      	ldr	r0, [pc, #208]	; (8001ffc <SPI_WIFI_ReceiveData+0xe8>)
 8001f2c:	f002 fe16 	bl	8004b5c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 f8e3 	bl	80020fc <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff8b 	bl	8001e54 <wait_cmddata_rdy_rising_event>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da02      	bge.n	8001f4a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001f44:	f06f 0302 	mvn.w	r3, #2
 8001f48:	e054      	b.n	8001ff4 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	482b      	ldr	r0, [pc, #172]	; (8001ffc <SPI_WIFI_ReceiveData+0xe8>)
 8001f50:	f002 fe04 	bl	8004b5c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001f54:	200f      	movs	r0, #15
 8001f56:	f000 f8d1 	bl	80020fc <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001f5a:	e03d      	b.n	8001fd8 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f60:	897b      	ldrh	r3, [r7, #10]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	db02      	blt.n	8001f6c <SPI_WIFI_ReceiveData+0x58>
 8001f66:	897b      	ldrh	r3, [r7, #10]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d13c      	bne.n	8001fe6 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <SPI_WIFI_ReceiveData+0xec>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	2201      	movs	r2, #1
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4822      	ldr	r0, [pc, #136]	; (8002004 <SPI_WIFI_ReceiveData+0xf0>)
 8001f7c:	f005 fcfc 	bl	8007978 <HAL_SPI_Receive_IT>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8001f86:	2201      	movs	r2, #1
 8001f88:	2101      	movs	r1, #1
 8001f8a:	481c      	ldr	r0, [pc, #112]	; (8001ffc <SPI_WIFI_ReceiveData+0xe8>)
 8001f8c:	f002 fde6 	bl	8004b5c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	e02e      	b.n	8001ff4 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff7b 	bl	8001e94 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8001f9e:	7d3a      	ldrb	r2, [r7, #20]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	7d7a      	ldrb	r2, [r7, #21]
 8001faa:	701a      	strb	r2, [r3, #0]
      length += 2;
 8001fac:	8afb      	ldrh	r3, [r7, #22]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8001fba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fbe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fc2:	db09      	blt.n	8001fd8 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <SPI_WIFI_ReceiveData+0xe8>)
 8001fca:	f002 fdc7 	bl	8004b5c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8001fce:	f7ff fea5 	bl	8001d1c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001fd2:	f06f 0303 	mvn.w	r3, #3
 8001fd6:	e00d      	b.n	8001ff4 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4808      	ldr	r0, [pc, #32]	; (8001ffc <SPI_WIFI_ReceiveData+0xe8>)
 8001fdc:	f002 fda6 	bl	8004b2c <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d0ba      	beq.n	8001f5c <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4804      	ldr	r0, [pc, #16]	; (8001ffc <SPI_WIFI_ReceiveData+0xe8>)
 8001fec:	f002 fdb6 	bl	8004b5c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8001ff0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	48001000 	.word	0x48001000
 8002000:	20000268 	.word	0x20000268
 8002004:	20002190 	.word	0x20002190

08002008 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	460b      	mov	r3, r1
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fef9 	bl	8001e10 <wait_cmddata_rdy_high>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	da02      	bge.n	800202a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	e04f      	b.n	80020ca <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800202a:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <SPI_WIFI_SendData+0xcc>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002030:	2200      	movs	r2, #0
 8002032:	2101      	movs	r1, #1
 8002034:	4828      	ldr	r0, [pc, #160]	; (80020d8 <SPI_WIFI_SendData+0xd0>)
 8002036:	f002 fd91 	bl	8004b5c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f85e 	bl	80020fc <SPI_WIFI_DelayUs>
  if (len > 1)
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d919      	bls.n	800207a <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8002046:	4b25      	ldr	r3, [pc, #148]	; (80020dc <SPI_WIFI_SendData+0xd4>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800204c:	897b      	ldrh	r3, [r7, #10]
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	68f9      	ldr	r1, [r7, #12]
 8002056:	4822      	ldr	r0, [pc, #136]	; (80020e0 <SPI_WIFI_SendData+0xd8>)
 8002058:	f005 fbec 	bl	8007834 <HAL_SPI_Transmit_IT>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002062:	2201      	movs	r2, #1
 8002064:	2101      	movs	r1, #1
 8002066:	481c      	ldr	r0, [pc, #112]	; (80020d8 <SPI_WIFI_SendData+0xd0>)
 8002068:	f002 fd78 	bl	8004b5c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	e02b      	b.n	80020ca <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff2d 	bl	8001ed4 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8002084:	897b      	ldrh	r3, [r7, #10]
 8002086:	3b01      	subs	r3, #1
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002090:	230a      	movs	r3, #10
 8002092:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <SPI_WIFI_SendData+0xd4>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	2201      	movs	r2, #1
 80020a0:	4619      	mov	r1, r3
 80020a2:	480f      	ldr	r0, [pc, #60]	; (80020e0 <SPI_WIFI_SendData+0xd8>)
 80020a4:	f005 fbc6 	bl	8007834 <HAL_SPI_Transmit_IT>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80020ae:	2201      	movs	r2, #1
 80020b0:	2101      	movs	r1, #1
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <SPI_WIFI_SendData+0xd0>)
 80020b4:	f002 fd52 	bl	8004b5c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
 80020bc:	e005      	b.n	80020ca <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff07 	bl	8001ed4 <wait_spi_tx_event>
    
  }
  return len;
 80020c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000270 	.word	0x20000270
 80020d8:	48001000 	.word	0x48001000
 80020dc:	2000026c 	.word	0x2000026c
 80020e0:	20002190 	.word	0x20002190

080020e4 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f002 f9fd 	bl	80044ec <HAL_Delay>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <SPI_WIFI_DelayUs+0x94>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d122      	bne.n	800215a <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <SPI_WIFI_DelayUs+0x98>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <SPI_WIFI_DelayUs+0x9c>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 800212a:	f002 f9d3 	bl	80044d4 <HAL_GetTick>
 800212e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002130:	e002      	b.n	8002138 <SPI_WIFI_DelayUs+0x3c>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3b01      	subs	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f9      	bne.n	8002132 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800213e:	f002 f9c9 	bl	80044d4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <SPI_WIFI_DelayUs+0x94>)
 800214a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <SPI_WIFI_DelayUs+0x94>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <SPI_WIFI_DelayUs+0x5e>
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <SPI_WIFI_DelayUs+0x94>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <SPI_WIFI_DelayUs+0x98>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <SPI_WIFI_DelayUs+0xa0>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0c9a      	lsrs	r2, r3, #18
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <SPI_WIFI_DelayUs+0x94>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800217a:	e002      	b.n	8002182 <SPI_WIFI_DelayUs+0x86>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	3b01      	subs	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f9      	bne.n	800217c <SPI_WIFI_DelayUs+0x80>
  return;
 8002188:	bf00      	nop
}
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000274 	.word	0x20000274
 8002194:	2000000c 	.word	0x2000000c
 8002198:	10624dd3 	.word	0x10624dd3
 800219c:	431bde83 	.word	0x431bde83

080021a0 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_SPI_RxCpltCallback+0x24>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_SPI_RxCpltCallback+0x24>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000268 	.word	0x20000268

080021c8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_SPI_TxCpltCallback+0x24>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_SPI_TxCpltCallback+0x24>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000026c 	.word	0x2000026c

080021f0 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SPI_WIFI_ISR+0x1c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <SPI_WIFI_ISR+0x1c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
   }
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000270 	.word	0x20000270

08002210 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <WIFI_Init+0x40>)
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <WIFI_Init+0x44>)
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <WIFI_Init+0x48>)
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <WIFI_Init+0x4c>)
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <WIFI_Init+0x50>)
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <WIFI_Init+0x54>)
 800222a:	f7ff f983 	bl	8001534 <ES_WIFI_RegisterBusIO>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002234:	480b      	ldr	r0, [pc, #44]	; (8002264 <WIFI_Init+0x54>)
 8002236:	f7ff f94f 	bl	80014d8 <ES_WIFI_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002244:	79fb      	ldrb	r3, [r7, #7]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	08001f15 	.word	0x08001f15
 8002254:	08002009 	.word	0x08002009
 8002258:	080020e5 	.word	0x080020e5
 800225c:	08001dfd 	.word	0x08001dfd
 8002260:	08001c61 	.word	0x08001c61
 8002264:	200021f4 	.word	0x200021f4

08002268 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	68f9      	ldr	r1, [r7, #12]
 8002280:	4809      	ldr	r0, [pc, #36]	; (80022a8 <WIFI_Connect+0x40>)
 8002282:	f7ff f98b 	bl	800159c <ES_WIFI_Connect>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800228c:	4806      	ldr	r0, [pc, #24]	; (80022a8 <WIFI_Connect+0x40>)
 800228e:	f7ff fa29 	bl	80016e4 <ES_WIFI_GetNetworkSettings>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800229c:	7dfb      	ldrb	r3, [r7, #23]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200021f4 	.word	0x200021f4

080022ac <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <WIFI_GetMAC_Address+0x28>)
 80022bc:	f7ff fa3c 	bl	8001738 <ES_WIFI_GetMACAddress>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200021f4 	.word	0x200021f4

080022d8 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80022e4:	4809      	ldr	r0, [pc, #36]	; (800230c <WIFI_GetIP_Address+0x34>)
 80022e6:	f7ff f9d1 	bl	800168c <ES_WIFI_IsConnected>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <WIFI_GetIP_Address+0x28>
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <WIFI_GetIP_Address+0x34>)
 80022f2:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 80022f6:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200021f4 	.word	0x200021f4

08002310 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	460b      	mov	r3, r1
 800231e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800232c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800232e:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8002330:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002332:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	789b      	ldrb	r3, [r3, #2]
 8002352:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	78db      	ldrb	r3, [r3, #3]
 8002358:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	4807      	ldr	r0, [pc, #28]	; (8002380 <WIFI_OpenClientConnection+0x70>)
 8002362:	f7ff fa1b 	bl	800179c <ES_WIFI_StartClientConnection>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002376:	4618      	mov	r0, r3
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200021f4 	.word	0x200021f4

08002384 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	4613      	mov	r3, r2
 8002394:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800239a:	89ba      	ldrh	r2, [r7, #12]
 800239c:	7bf9      	ldrb	r1, [r7, #15]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <WIFI_SendData+0x40>)
 80023ac:	f7ff fae0 	bl	8001970 <ES_WIFI_SendData>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200021f4 	.word	0x200021f4

080023c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80023d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <vApplicationGetIdleTaskMemory+0x30>)
 80023de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000278 	.word	0x20000278
 80023f8:	200002cc 	.word	0x200002cc

080023fc <delayStepM>:
void StartSensors(void const * argument);
void StartWifi(void const * argument);

/* this function generates ACTIVE delay in microseconds --> useful for stepper motor */
void delayStepM (uint16_t us)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim8, 0);
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <delayStepM+0x30>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim8) < us);
 800240e:	bf00      	nop
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <delayStepM+0x30>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3f9      	bcc.n	8002410 <delayStepM+0x14>
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20002b00 	.word	0x20002b00

08002430 <HAL_UART_RxCpltCallback>:

/* this is an INTERRUPT raised when there something arrives on arduino serial */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(semaphoreSerialHandle);
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_UART_RxCpltCallback+0x1c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f008 fdc9 	bl	800afd4 <osSemaphoreRelease>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20002afc 	.word	0x20002afc

08002450 <HAL_GPIO_EXTI_Callback>:

/* this function call an interrupt for Wifi */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d102      	bne.n	8002466 <HAL_GPIO_EXTI_Callback+0x16>
    case (GPIO_PIN_1):
    		SPI_WIFI_ISR();
 8002460:	f7ff fec6 	bl	80021f0 <SPI_WIFI_ISR>
    		break;
 8002464:	e000      	b.n	8002468 <HAL_GPIO_EXTI_Callback+0x18>
    default:
    	break;
 8002466:	bf00      	nop
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <SPI3_IRQHandler>:

/* Interrupt for something ???? */
void SPI3_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <SPI3_IRQHandler+0x10>)
 8002476:	f005 fc2f 	bl	8007cd8 <HAL_SPI_IRQHandler>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20002190 	.word	0x20002190

08002484 <_write>:

/* This is an override useful for printf */
int _write(int file, char *ptr, int len)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 10);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	b29a      	uxth	r2, r3
 8002494:	230a      	movs	r3, #10
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <_write+0x24>)
 800249a:	f007 fd0b 	bl	8009eb4 <HAL_UART_Transmit>
	return len;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20002c00 	.word	0x20002c00

080024ac <main>:
bool problem;
bool connection;
bool on;

int main(void)
{
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b0c4      	sub	sp, #272	; 0x110
 80024b0:	af00      	add	r7, sp, #0
  /* Init STM32 board */
  HAL_Init();
 80024b2:	f001 ffa7 	bl	8004404 <HAL_Init>
  BSP_LED_Init(LED2);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f001 fa62 	bl	8003980 <BSP_LED_Init>
  MX_USART1_UART_Init();
 80024bc:	f000 faa4 	bl	8002a08 <MX_USART1_UART_Init>

  /* Configure the system clock */
   SystemClock_Config();
 80024c0:	f000 f95e 	bl	8002780 <SystemClock_Config>

  BSP_ACCELERO_Init();
 80024c4:	f001 fc5e 	bl	8003d84 <BSP_ACCELERO_Init>
  BSP_TSENSOR_Init();
 80024c8:	f001 fce0 	bl	8003e8c <BSP_TSENSOR_Init>
  BSP_PSENSOR_Init();
 80024cc:	f001 fcb0 	bl	8003e30 <BSP_PSENSOR_Init>

  MX_GPIO_Init();
 80024d0:	f000 fafa 	bl	8002ac8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80024d4:	f000 f9cc 	bl	8002870 <MX_TIM2_Init>
  MX_TIM8_Init();
 80024d8:	f000 fa42 	bl	8002960 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80024dc:	f000 fac4 	bl	8002a68 <MX_USART3_UART_Init>

  /* START TIMERS */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80024e0:	2100      	movs	r1, #0
 80024e2:	4889      	ldr	r0, [pc, #548]	; (8002708 <main+0x25c>)
 80024e4:	f006 fb94 	bl	8008c10 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim8);
 80024e8:	4888      	ldr	r0, [pc, #544]	; (800270c <main+0x260>)
 80024ea:	f006 fac7 	bl	8008a7c <HAL_TIM_Base_Start>

  /* RTOS_SEMAPHORES */
  osSemaphoreDef(semaphoreWifiSinc);
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  semaphoreWifiSincHandle = osSemaphoreCreate(osSemaphore(semaphoreWifiSinc), 1);
 80024fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80024fe:	2101      	movs	r1, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f008 fce7 	bl	800aed4 <osSemaphoreCreate>
 8002506:	4603      	mov	r3, r0
 8002508:	4a81      	ldr	r2, [pc, #516]	; (8002710 <main+0x264>)
 800250a:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(semaphoreWifi);
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  semaphoreWifiHandle = osSemaphoreCreate(osSemaphore(semaphoreWifi), 1);
 8002518:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f008 fcd8 	bl	800aed4 <osSemaphoreCreate>
 8002524:	4603      	mov	r3, r0
 8002526:	4a7b      	ldr	r2, [pc, #492]	; (8002714 <main+0x268>)
 8002528:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(semaphoreSerial);
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  semaphoreSerialHandle = osSemaphoreCreate(osSemaphore(semaphoreSerial), 1);
 8002536:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800253a:	2101      	movs	r1, #1
 800253c:	4618      	mov	r0, r3
 800253e:	f008 fcc9 	bl	800aed4 <osSemaphoreCreate>
 8002542:	4603      	mov	r3, r0
 8002544:	4a74      	ldr	r2, [pc, #464]	; (8002718 <main+0x26c>)
 8002546:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(semaphoreServoPriv);
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  semaphoreServoPrivHandle = osSemaphoreCreate(osSemaphore(semaphoreServoPriv), 1);
 8002554:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002558:	2101      	movs	r1, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f008 fcba 	bl	800aed4 <osSemaphoreCreate>
 8002560:	4603      	mov	r3, r0
 8002562:	4a6e      	ldr	r2, [pc, #440]	; (800271c <main+0x270>)
 8002564:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(semaphoreStepperPriv);
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  semaphoreStepperPrivHandle = osSemaphoreCreate(osSemaphore(semaphoreStepperPriv), 1);
 8002572:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f008 fcab 	bl	800aed4 <osSemaphoreCreate>
 800257e:	4603      	mov	r3, r0
 8002580:	4a67      	ldr	r2, [pc, #412]	; (8002720 <main+0x274>)
 8002582:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(semaphoreServo);
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  semaphoreServoHandle = osSemaphoreCreate(osSemaphore(semaphoreServo), 1);
 8002590:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f008 fc9c 	bl	800aed4 <osSemaphoreCreate>
 800259c:	4603      	mov	r3, r0
 800259e:	4a61      	ldr	r2, [pc, #388]	; (8002724 <main+0x278>)
 80025a0:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(semaphoreMutex);
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  semaphoreMutexHandle = osSemaphoreCreate(osSemaphore(semaphoreMutex), 1);
 80025ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f008 fc8d 	bl	800aed4 <osSemaphoreCreate>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a5a      	ldr	r2, [pc, #360]	; (8002728 <main+0x27c>)
 80025be:	6013      	str	r3, [r2, #0]

  /* RTOS_QUEUES */
  osMessageQDef(QueueData, 1, sizeof(uint8_t*));
 80025c0:	4b5a      	ldr	r3, [pc, #360]	; (800272c <main+0x280>)
 80025c2:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80025c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  QueueDataHandle = osMessageCreate(osMessageQ(QueueData), NULL);
 80025cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f008 fd34 	bl	800b040 <osMessageCreate>
 80025d8:	4603      	mov	r3, r0
 80025da:	4a55      	ldr	r2, [pc, #340]	; (8002730 <main+0x284>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* RTOS_THREADS */

  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80025de:	4b55      	ldr	r3, [pc, #340]	; (8002734 <main+0x288>)
 80025e0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80025e4:	461d      	mov	r5, r3
 80025e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80025f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f008 fc0b 	bl	800ae14 <osThreadCreate>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a4d      	ldr	r2, [pc, #308]	; (8002738 <main+0x28c>)
 8002602:	6013      	str	r3, [r2, #0]

  /* definition and creation of ServoTask */
  osThreadDef(ServoTask, StartServo, osPriorityNormal, 0, 128);
 8002604:	4b4d      	ldr	r3, [pc, #308]	; (800273c <main+0x290>)
 8002606:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800260a:	461d      	mov	r5, r3
 800260c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServoTaskHandle = osThreadCreate(osThread(ServoTask), NULL);
 8002618:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f008 fbf8 	bl	800ae14 <osThreadCreate>
 8002624:	4603      	mov	r3, r0
 8002626:	4a46      	ldr	r2, [pc, #280]	; (8002740 <main+0x294>)
 8002628:	6013      	str	r3, [r2, #0]

  /* definition and creation of StepperTask */
  osThreadDef(StepperTask, StartStepper, osPriorityNormal, 0, 128);
 800262a:	4b46      	ldr	r3, [pc, #280]	; (8002744 <main+0x298>)
 800262c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002630:	461d      	mov	r5, r3
 8002632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800263a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StepperTaskHandle = osThreadCreate(osThread(StepperTask), NULL);
 800263e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f008 fbe5 	bl	800ae14 <osThreadCreate>
 800264a:	4603      	mov	r3, r0
 800264c:	4a3e      	ldr	r2, [pc, #248]	; (8002748 <main+0x29c>)
 800264e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SendDataTask */
  osThreadDef(SendDataTask, StartSendData, osPriorityNormal, 0, 128);
 8002650:	4b3e      	ldr	r3, [pc, #248]	; (800274c <main+0x2a0>)
 8002652:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002656:	461d      	mov	r5, r3
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SendDataTaskHandle = osThreadCreate(osThread(SendDataTask), NULL);
 8002664:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f008 fbd2 	bl	800ae14 <osThreadCreate>
 8002670:	4603      	mov	r3, r0
 8002672:	4a37      	ldr	r2, [pc, #220]	; (8002750 <main+0x2a4>)
 8002674:	6013      	str	r3, [r2, #0]

  /* definition and creation of ManagerTask */
  osThreadDef(ManagerTask, StartManager, osPriorityAboveNormal, 0, 128);
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <main+0x2a8>)
 8002678:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800267c:	461d      	mov	r5, r3
 800267e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ManagerTaskHandle = osThreadCreate(osThread(ManagerTask), NULL);
 800268a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f008 fbbf 	bl	800ae14 <osThreadCreate>
 8002696:	4603      	mov	r3, r0
 8002698:	4a2f      	ldr	r2, [pc, #188]	; (8002758 <main+0x2ac>)
 800269a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensors, osPriorityNormal, 0, 128);
 800269c:	4b2f      	ldr	r3, [pc, #188]	; (800275c <main+0x2b0>)
 800269e:	f107 0420 	add.w	r4, r7, #32
 80026a2:	461d      	mov	r5, r3
 80026a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 80026b0:	f107 0320 	add.w	r3, r7, #32
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f008 fbac 	bl	800ae14 <osThreadCreate>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a28      	ldr	r2, [pc, #160]	; (8002760 <main+0x2b4>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of WifiTask */
   osThreadDef(WifiTask, StartWifi, osPriorityNormal, 0, 128);
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <main+0x2b8>)
 80026c6:	461c      	mov	r4, r3
 80026c8:	4615      	mov	r5, r2
 80026ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   WifiTaskHandle = osThreadCreate(osThread(WifiTask), NULL);
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f008 fb9a 	bl	800ae14 <osThreadCreate>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <main+0x2bc>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Init variables */
  HAL_UART_Receive_IT(&huart3, command, 1);
 80026e6:	2201      	movs	r2, #1
 80026e8:	4920      	ldr	r1, [pc, #128]	; (800276c <main+0x2c0>)
 80026ea:	4821      	ldr	r0, [pc, #132]	; (8002770 <main+0x2c4>)
 80026ec:	f007 fc76 	bl	8009fdc <HAL_UART_Receive_IT>
  problem = false;
 80026f0:	4b20      	ldr	r3, [pc, #128]	; (8002774 <main+0x2c8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
  connection = false;
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <main+0x2cc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
  on = false;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <main+0x2d0>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]

  /* Start scheduler */
  osKernelStart();
 8002702:	f008 fb80 	bl	800ae06 <osKernelStart>

  while (1) {}
 8002706:	e7fe      	b.n	8002706 <main+0x25a>
 8002708:	20002cec 	.word	0x20002cec
 800270c:	20002b00 	.word	0x20002b00
 8002710:	20002b4c 	.word	0x20002b4c
 8002714:	20002bd4 	.word	0x20002bd4
 8002718:	20002afc 	.word	0x20002afc
 800271c:	20002d38 	.word	0x20002d38
 8002720:	20002c80 	.word	0x20002c80
 8002724:	20002bfc 	.word	0x20002bfc
 8002728:	20002bd8 	.word	0x20002bd8
 800272c:	08010e80 	.word	0x08010e80
 8002730:	20002cd0 	.word	0x20002cd0
 8002734:	08010e90 	.word	0x08010e90
 8002738:	20002af4 	.word	0x20002af4
 800273c:	08010eac 	.word	0x08010eac
 8002740:	20002af8 	.word	0x20002af8
 8002744:	08010ec8 	.word	0x08010ec8
 8002748:	20002be4 	.word	0x20002be4
 800274c:	08010ee4 	.word	0x08010ee4
 8002750:	20002c84 	.word	0x20002c84
 8002754:	08010f00 	.word	0x08010f00
 8002758:	20002d3c 	.word	0x20002d3c
 800275c:	08010f1c 	.word	0x08010f1c
 8002760:	20002ce8 	.word	0x20002ce8
 8002764:	08010f38 	.word	0x08010f38
 8002768:	20002d48 	.word	0x20002d48
 800276c:	20002be8 	.word	0x20002be8
 8002770:	20002b54 	.word	0x20002b54
 8002774:	20002ccf 	.word	0x20002ccf
 8002778:	20002d44 	.word	0x20002d44
 800277c:	20002be0 	.word	0x20002be0

08002780 <SystemClock_Config>:



/* System Clock Configuration */
void SystemClock_Config(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0b8      	sub	sp, #224	; 0xe0
 8002784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002786:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800278a:	2244      	movs	r2, #68	; 0x44
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f00b f93c 	bl	800da0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002794:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a4:	463b      	mov	r3, r7
 80027a6:	2288      	movs	r2, #136	; 0x88
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f00b f92e 	bl	800da0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027be:	2310      	movs	r3, #16
 80027c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c4:	2302      	movs	r3, #2
 80027c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 80027d6:	2309      	movs	r3, #9
 80027d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027dc:	2307      	movs	r3, #7
 80027de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 ffae 	bl	8005754 <HAL_RCC_OscConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80027fe:	f000 fd33 	bl	8003268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002802:	230f      	movs	r3, #15
 8002804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002808:	2303      	movs	r3, #3
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002822:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002826:	2104      	movs	r1, #4
 8002828:	4618      	mov	r0, r3
 800282a:	f003 fb79 	bl	8005f20 <HAL_RCC_ClockConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002834:	f000 fd18 	bl	8003268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4;
 8002838:	2309      	movs	r3, #9
 800283a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800283c:	2300      	movs	r3, #0
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002840:	2300      	movs	r3, #0
 8002842:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002844:	463b      	mov	r3, r7
 8002846:	4618      	mov	r0, r3
 8002848:	f003 fd70 	bl	800632c <HAL_RCCEx_PeriphCLKConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002852:	f000 fd09 	bl	8003268 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002856:	f44f 7000 	mov.w	r0, #512	; 0x200
 800285a:	f002 ff25 	bl	80056a8 <HAL_PWREx_ControlVoltageScaling>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002864:	f000 fd00 	bl	8003268 <Error_Handler>
  }
}
 8002868:	bf00      	nop
 800286a:	37e0      	adds	r7, #224	; 0xe0
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <MX_TIM2_Init>:

/* TIM2 Initialization Function */
static void MX_TIM2_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002890:	463b      	mov	r3, r7
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	615a      	str	r2, [r3, #20]
 80028a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028a2:	4b2e      	ldr	r3, [pc, #184]	; (800295c <MX_TIM2_Init+0xec>)
 80028a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <MX_TIM2_Init+0xec>)
 80028ac:	f240 529f 	movw	r2, #1439	; 0x59f
 80028b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <MX_TIM2_Init+0xec>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80028b8:	4b28      	ldr	r3, [pc, #160]	; (800295c <MX_TIM2_Init+0xec>)
 80028ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c0:	4b26      	ldr	r3, [pc, #152]	; (800295c <MX_TIM2_Init+0xec>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <MX_TIM2_Init+0xec>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028cc:	4823      	ldr	r0, [pc, #140]	; (800295c <MX_TIM2_Init+0xec>)
 80028ce:	f006 f87e 	bl	80089ce <HAL_TIM_Base_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80028d8:	f000 fcc6 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e6:	4619      	mov	r1, r3
 80028e8:	481c      	ldr	r0, [pc, #112]	; (800295c <MX_TIM2_Init+0xec>)
 80028ea:	f006 fcc7 	bl	800927c <HAL_TIM_ConfigClockSource>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80028f4:	f000 fcb8 	bl	8003268 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028f8:	4818      	ldr	r0, [pc, #96]	; (800295c <MX_TIM2_Init+0xec>)
 80028fa:	f006 f927 	bl	8008b4c <HAL_TIM_PWM_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002904:	f000 fcb0 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	4811      	ldr	r0, [pc, #68]	; (800295c <MX_TIM2_Init+0xec>)
 8002918:	f007 f9d8 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002922:	f000 fca1 	bl	8003268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002926:	2360      	movs	r3, #96	; 0x60
 8002928:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002936:	463b      	mov	r3, r7
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <MX_TIM2_Init+0xec>)
 800293e:	f006 fb8d 	bl	800905c <HAL_TIM_PWM_ConfigChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002948:	f000 fc8e 	bl	8003268 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <MX_TIM2_Init+0xec>)
 800294e:	f000 fe1d 	bl	800358c <HAL_TIM_MspPostInit>
}
 8002952:	bf00      	nop
 8002954:	3738      	adds	r7, #56	; 0x38
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20002cec 	.word	0x20002cec

08002960 <MX_TIM8_Init>:

/* TIM8 Initialization Function */
static void MX_TIM8_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <MX_TIM8_Init+0xa0>)
 8002980:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <MX_TIM8_Init+0xa4>)
 8002982:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <MX_TIM8_Init+0xa0>)
 8002986:	2247      	movs	r2, #71	; 0x47
 8002988:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <MX_TIM8_Init+0xa0>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65534;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_TIM8_Init+0xa0>)
 8002992:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002996:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <MX_TIM8_Init+0xa0>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_TIM8_Init+0xa0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MX_TIM8_Init+0xa0>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80029aa:	4815      	ldr	r0, [pc, #84]	; (8002a00 <MX_TIM8_Init+0xa0>)
 80029ac:	f006 f80f 	bl	80089ce <HAL_TIM_Base_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80029b6:	f000 fc57 	bl	8003268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4619      	mov	r1, r3
 80029c6:	480e      	ldr	r0, [pc, #56]	; (8002a00 <MX_TIM8_Init+0xa0>)
 80029c8:	f006 fc58 	bl	800927c <HAL_TIM_ConfigClockSource>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80029d2:	f000 fc49 	bl	8003268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <MX_TIM8_Init+0xa0>)
 80029e8:	f007 f970 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80029f2:	f000 fc39 	bl	8003268 <Error_Handler>
  }
}
 80029f6:	bf00      	nop
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20002b00 	.word	0x20002b00
 8002a04:	40013400 	.word	0x40013400

08002a08 <MX_USART1_UART_Init>:

/* USART1 Initialization Function */
static void MX_USART1_UART_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
 huart1.Instance = USART1;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a0e:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <MX_USART1_UART_Init+0x5c>)
 8002a10:	601a      	str	r2, [r3, #0]
 huart1.Init.BaudRate = 115200;
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a18:	605a      	str	r2, [r3, #4]
 huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
 huart1.Init.StopBits = UART_STOPBITS_1;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
 huart1.Init.Parity = UART_PARITY_NONE;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
 huart1.Init.Mode = UART_MODE_TX_RX;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a2e:	220c      	movs	r2, #12
 8002a30:	615a      	str	r2, [r3, #20]
 huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
 huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
 huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	621a      	str	r2, [r3, #32]
 huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
 if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <MX_USART1_UART_Init+0x58>)
 8002a4c:	f007 f9e4 	bl	8009e18 <HAL_UART_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_USART1_UART_Init+0x52>
 {
   Error_Handler();
 8002a56:	f000 fc07 	bl	8003268 <Error_Handler>
 }
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20002c00 	.word	0x20002c00
 8002a64:	40013800 	.word	0x40013800

08002a68 <MX_USART3_UART_Init>:

/* USART3 Initialization Function */
static void MX_USART3_UART_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <MX_USART3_UART_Init+0x5c>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002aaa:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <MX_USART3_UART_Init+0x58>)
 8002aac:	f007 f9b4 	bl	8009e18 <HAL_UART_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ab6:	f000 fbd7 	bl	8003268 <Error_Handler>
  }
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20002b54 	.word	0x20002b54
 8002ac4:	40004800 	.word	0x40004800

08002ac8 <MX_GPIO_Init>:

/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	60da      	str	r2, [r3, #12]
 8002adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ade:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aea:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b3c      	ldr	r3, [pc, #240]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	4a3b      	ldr	r2, [pc, #236]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b02:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	4b36      	ldr	r3, [pc, #216]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4a35      	ldr	r2, [pc, #212]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1a:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <MX_GPIO_Init+0x120>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEP_N3_GPIO_Port, STEP_N3_Pin, GPIO_PIN_RESET);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2108      	movs	r1, #8
 8002b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b46:	f002 f809 	bl	8004b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b52:	f002 f803 	bl	8004b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2110      	movs	r1, #16
 8002b5a:	4824      	ldr	r0, [pc, #144]	; (8002bec <MX_GPIO_Init+0x124>)
 8002b5c:	f001 fffe 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_N4_Pin|STEP_N2_Pin|STEP_N1_Pin, GPIO_PIN_RESET);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2107      	movs	r1, #7
 8002b64:	4821      	ldr	r0, [pc, #132]	; (8002bec <MX_GPIO_Init+0x124>)
 8002b66:	f001 fff9 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STEP_N3_Pin */
  GPIO_InitStruct.Pin = STEP_N3_Pin;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STEP_N3_GPIO_Port, &GPIO_InitStruct);
 8002b7a:	f107 0314 	add.w	r3, r7, #20
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b84:	f001 fe28 	bl	80047d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba2:	f001 fe19 	bl	80047d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480b      	ldr	r0, [pc, #44]	; (8002bec <MX_GPIO_Init+0x124>)
 8002bbe:	f001 fe0b 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP_N4_Pin STEP_N2_Pin STEP_N1_Pin */
  GPIO_InitStruct.Pin = STEP_N4_Pin|STEP_N2_Pin|STEP_N1_Pin;
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4804      	ldr	r0, [pc, #16]	; (8002bec <MX_GPIO_Init+0x124>)
 8002bda:	f001 fdfd 	bl	80047d8 <HAL_GPIO_Init>

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	48000400 	.word	0x48000400

08002bf0 <StartDefaultTask>:

/* USER CODE BEGIN Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  for(;;){
 8002bf8:	e7fe      	b.n	8002bf8 <StartDefaultTask+0x8>
	...

08002bfc <StartServo>:
  }
}

/* USER CODE BEGIN Header_StartServo */
void StartServo(void const * argument)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR1 = SERVO_INIT;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <StartServo+0x84>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2249      	movs	r2, #73	; 0x49
 8002c0a:	635a      	str	r2, [r3, #52]	; 0x34
	for(;;) {
		/* Inizio sezione critica.
		 * Le variabili condivise sono htim2.Instance->CCR1 e ON. */
		osSemaphoreWait(semaphoreMutexHandle, osWaitForever);
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <StartServo+0x88>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	4618      	mov	r0, r3
 8002c16:	f008 f98f 	bl	800af38 <osSemaphoreWait>

		/* Il semaforo ServoPriv è */
		if ((htim2.Instance->CCR1 != SERVO_INIT) && (on == true)) {
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <StartServo+0x84>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	2b49      	cmp	r3, #73	; 0x49
 8002c22:	d01c      	beq.n	8002c5e <StartServo+0x62>
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <StartServo+0x8c>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d018      	beq.n	8002c5e <StartServo+0x62>
			if (htim2.Instance->CCR1 > SERVO_INIT)
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <StartServo+0x84>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	2b49      	cmp	r3, #73	; 0x49
 8002c34:	d907      	bls.n	8002c46 <StartServo+0x4a>
				htim2.Instance->CCR1 -=2;
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <StartServo+0x84>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <StartServo+0x84>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3a02      	subs	r2, #2
 8002c42:	635a      	str	r2, [r3, #52]	; 0x34
 8002c44:	e006      	b.n	8002c54 <StartServo+0x58>
			else
				htim2.Instance->CCR1 +=2;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <StartServo+0x84>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <StartServo+0x84>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3202      	adds	r2, #2
 8002c52:	635a      	str	r2, [r3, #52]	; 0x34

			osSemaphoreRelease(semaphoreServoPrivHandle);
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <StartServo+0x90>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f008 f9bb 	bl	800afd4 <osSemaphoreRelease>
		}
		osSemaphoreRelease(semaphoreMutexHandle);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <StartServo+0x88>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f008 f9b6 	bl	800afd4 <osSemaphoreRelease>
		osSemaphoreWait(semaphoreServoPrivHandle, osWaitForever);
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <StartServo+0x90>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	4618      	mov	r0, r3
 8002c72:	f008 f961 	bl	800af38 <osSemaphoreWait>
		osDelay(30);
 8002c76:	201e      	movs	r0, #30
 8002c78:	f008 f918 	bl	800aeac <osDelay>
		osSemaphoreWait(semaphoreMutexHandle, osWaitForever);
 8002c7c:	e7c6      	b.n	8002c0c <StartServo+0x10>
 8002c7e:	bf00      	nop
 8002c80:	20002cec 	.word	0x20002cec
 8002c84:	20002bd8 	.word	0x20002bd8
 8002c88:	20002be0 	.word	0x20002be0
 8002c8c:	20002d38 	.word	0x20002d38

08002c90 <StartStepper>:
	}
}

/* USER CODE BEGIN Header_StartStepper */
void StartStepper(void const * argument)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /* Inizio sezione critica.
	   * Le variabili condivise sono PROBLEM, ON, DIR, RPM. */

	  osSemaphoreWait(semaphoreMutexHandle, osWaitForever);
 8002c98:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <StartStepper+0x6c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f008 f949 	bl	800af38 <osSemaphoreWait>

	  /* Il semaforoStepper è un semaforo privato.
	   * Se è tutto ok allora verrà incrementato in modo che la wait successiva sarà passante.
	   * Se non è tutto ok allora il semaforo non verra incrementato quindi la wait successiva sarà bloccante. */
	  if((problem == false) && (on == true)){
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <StartStepper+0x70>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <StartStepper+0x4c>
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <StartStepper+0x74>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00f      	beq.n	8002cdc <StartStepper+0x4c>
		  stepper_step_angle(10, stepper_dir, stepper_rpm);
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <StartStepper+0x78>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <StartStepper+0x7c>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002cce:	f000 fbb3 	bl	8003438 <stepper_step_angle>
		  osSemaphoreRelease(semaphoreStepperPrivHandle);
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <StartStepper+0x80>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f008 f97c 	bl	800afd4 <osSemaphoreRelease>
	  }
	  osSemaphoreRelease(semaphoreMutexHandle); // fine sezione critica
 8002cdc:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <StartStepper+0x6c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f008 f977 	bl	800afd4 <osSemaphoreRelease>
	  osSemaphoreWait(semaphoreStepperPrivHandle, osWaitForever);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <StartStepper+0x80>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 31ff 	mov.w	r1, #4294967295
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f008 f922 	bl	800af38 <osSemaphoreWait>
	  osDelay(20);
 8002cf4:	2014      	movs	r0, #20
 8002cf6:	f008 f8d9 	bl	800aeac <osDelay>
	  osSemaphoreWait(semaphoreMutexHandle, osWaitForever);
 8002cfa:	e7cd      	b.n	8002c98 <StartStepper+0x8>
 8002cfc:	20002bd8 	.word	0x20002bd8
 8002d00:	20002ccf 	.word	0x20002ccf
 8002d04:	20002be0 	.word	0x20002be0
 8002d08:	20002cce 	.word	0x20002cce
 8002d0c:	20002bf0 	.word	0x20002bf0
 8002d10:	20002c80 	.word	0x20002c80

08002d14 <StartWifi>:
  }
}

/* USER CODE BEGIN Header_StartWifi */
void StartWifi(void const * argument)
{
 8002d14:	b5b0      	push	{r4, r5, r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af04      	add	r7, sp, #16
 8002d1a:	6078      	str	r0, [r7, #4]
	for(;;) {

		/* Il threadWifi resta bloccato fin quando la connessione è già instaurata. Per sbloccarlo
		 * deve essere cliccato il tasto opportuno quando la connessione non è attiva. */

		while (connection == true)
 8002d1c:	e006      	b.n	8002d2c <StartWifi+0x18>
			osSemaphoreWait(semaphoreWifiSincHandle, osWaitForever);
 8002d1e:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <StartWifi+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f04f 31ff 	mov.w	r1, #4294967295
 8002d26:	4618      	mov	r0, r3
 8002d28:	f008 f906 	bl	800af38 <osSemaphoreWait>
		while (connection == true)
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ee0 <StartWifi+0x1cc>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f4      	bne.n	8002d1e <StartWifi+0xa>

		/* Initialize all configured peripherals */
  	    hDiscoUart.Instance = DISCOVERY_COM1;
 8002d34:	4b6b      	ldr	r3, [pc, #428]	; (8002ee4 <StartWifi+0x1d0>)
 8002d36:	4a6c      	ldr	r2, [pc, #432]	; (8002ee8 <StartWifi+0x1d4>)
 8002d38:	601a      	str	r2, [r3, #0]
  	    hDiscoUart.Init.BaudRate = 115200;
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <StartWifi+0x1d0>)
 8002d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d40:	605a      	str	r2, [r3, #4]
  	    hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <StartWifi+0x1d0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  	    hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <StartWifi+0x1d0>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  	    hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <StartWifi+0x1d0>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  	    hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <StartWifi+0x1d0>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  	    hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <StartWifi+0x1d0>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  	    hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b60      	ldr	r3, [pc, #384]	; (8002ee4 <StartWifi+0x1d0>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  	    hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <StartWifi+0x1d0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  	    hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d6c:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <StartWifi+0x1d0>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
  	    BSP_COM_Init(COM1, &hDiscoUart);
 8002d72:	495c      	ldr	r1, [pc, #368]	; (8002ee4 <StartWifi+0x1d0>)
 8002d74:	2000      	movs	r0, #0
 8002d76:	f000 fe49 	bl	8003a0c <BSP_COM_Init>


  	    if(WIFI_Init() ==  WIFI_STATUS_OK)
 8002d7a:	f7ff fa49 	bl	8002210 <WIFI_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f040 80a4 	bne.w	8002ece <StartWifi+0x1ba>
  	    {
  	      printf("> WIFI Module Initialized.\r\n");
 8002d86:	4859      	ldr	r0, [pc, #356]	; (8002eec <StartWifi+0x1d8>)
 8002d88:	f00b fb38 	bl	800e3fc <puts>
  	      if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8002d8c:	4858      	ldr	r0, [pc, #352]	; (8002ef0 <StartWifi+0x1dc>)
 8002d8e:	f7ff fa8d 	bl	80022ac <WIFI_GetMAC_Address>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11a      	bne.n	8002dce <StartWifi+0xba>
  	      {
  	        printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\r\n", MAC_Addr[0], MAC_Addr[1], MAC_Addr[2], MAC_Addr[3], MAC_Addr[4], MAC_Addr[5]);
 8002d98:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <StartWifi+0x1dc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <StartWifi+0x1dc>)
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	461c      	mov	r4, r3
 8002da4:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <StartWifi+0x1dc>)
 8002da6:	789b      	ldrb	r3, [r3, #2]
 8002da8:	461d      	mov	r5, r3
 8002daa:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <StartWifi+0x1dc>)
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b4f      	ldr	r3, [pc, #316]	; (8002ef0 <StartWifi+0x1dc>)
 8002db2:	791b      	ldrb	r3, [r3, #4]
 8002db4:	4619      	mov	r1, r3
 8002db6:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <StartWifi+0x1dc>)
 8002db8:	795b      	ldrb	r3, [r3, #5]
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	9101      	str	r1, [sp, #4]
 8002dbe:	9200      	str	r2, [sp, #0]
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	484b      	ldr	r0, [pc, #300]	; (8002ef4 <StartWifi+0x1e0>)
 8002dc8:	f00b fa92 	bl	800e2f0 <iprintf>
 8002dcc:	e005      	b.n	8002dda <StartWifi+0xc6>
  	      }
  	      else
  	      {
  	        printf("> ERROR : CANNOT get MAC address\r\n");
 8002dce:	484a      	ldr	r0, [pc, #296]	; (8002ef8 <StartWifi+0x1e4>)
 8002dd0:	f00b fb14 	bl	800e3fc <puts>
  	        BSP_LED_On(LED2);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f000 fe03 	bl	80039e0 <BSP_LED_On>
  	      }

  	      if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8002dda:	2203      	movs	r2, #3
 8002ddc:	4947      	ldr	r1, [pc, #284]	; (8002efc <StartWifi+0x1e8>)
 8002dde:	4848      	ldr	r0, [pc, #288]	; (8002f00 <StartWifi+0x1ec>)
 8002de0:	f7ff fa42 	bl	8002268 <WIFI_Connect>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d16a      	bne.n	8002ec0 <StartWifi+0x1ac>
  	      {
  	        printf("> es-wifi module connected \r\n");
 8002dea:	4846      	ldr	r0, [pc, #280]	; (8002f04 <StartWifi+0x1f0>)
 8002dec:	f00b fb06 	bl	800e3fc <puts>
  	        if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8002df0:	4845      	ldr	r0, [pc, #276]	; (8002f08 <StartWifi+0x1f4>)
 8002df2:	f7ff fa71 	bl	80022d8 <WIFI_GetIP_Address>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d15a      	bne.n	8002eb2 <StartWifi+0x19e>
  	        {
  	          printf("> es-wifi module got IP Address : %d.%d.%d.%d\r\n", IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]);
 8002dfc:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <StartWifi+0x1f4>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <StartWifi+0x1f4>)
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <StartWifi+0x1f4>)
 8002e0a:	789b      	ldrb	r3, [r3, #2]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <StartWifi+0x1f4>)
 8002e10:	78db      	ldrb	r3, [r3, #3]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4603      	mov	r3, r0
 8002e16:	483d      	ldr	r0, [pc, #244]	; (8002f0c <StartWifi+0x1f8>)
 8002e18:	f00b fa6a 	bl	800e2f0 <iprintf>
  	          printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\r\n", RemoteIP[0], RemoteIP[1], RemoteIP[2],RemoteIP[3], RemotePORT);
 8002e1c:	4b3c      	ldr	r3, [pc, #240]	; (8002f10 <StartWifi+0x1fc>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <StartWifi+0x1fc>)
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	4618      	mov	r0, r3
 8002e28:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <StartWifi+0x1fc>)
 8002e2a:	789b      	ldrb	r3, [r3, #2]
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <StartWifi+0x1fc>)
 8002e30:	78db      	ldrb	r3, [r3, #3]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f641 7342 	movw	r3, #8002	; 0x1f42
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	9200      	str	r2, [sp, #0]
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4834      	ldr	r0, [pc, #208]	; (8002f14 <StartWifi+0x200>)
 8002e42:	f00b fa55 	bl	800e2f0 <iprintf>

  	          while (Trials--)
 8002e46:	e01c      	b.n	8002e82 <StartWifi+0x16e>
  	          {
  	            if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	f641 7342 	movw	r3, #8002	; 0x1f42
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <StartWifi+0x1fc>)
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <StartWifi+0x204>)
 8002e56:	2100      	movs	r1, #0
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff fa59 	bl	8002310 <WIFI_OpenClientConnection>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10e      	bne.n	8002e82 <StartWifi+0x16e>
  	            {
  	              printf("> TCP Connection opened successfully.\r\n");
 8002e64:	482d      	ldr	r0, [pc, #180]	; (8002f1c <StartWifi+0x208>)
 8002e66:	f00b fac9 	bl	800e3fc <puts>
  	              Socket = 0;
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <StartWifi+0x20c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
  	              connection = true;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <StartWifi+0x1cc>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]

  	              /* Quando la connessione viene instaurata correttamente viene fatto partire il threadSendData */
  	              osSemaphoreRelease(semaphoreWifiHandle);
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <StartWifi+0x210>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f008 f8aa 	bl	800afd4 <osSemaphoreRelease>
  	              break;
 8002e80:	e00a      	b.n	8002e98 <StartWifi+0x184>
  	          while (Trials--)
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <StartWifi+0x214>)
 8002e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	b211      	sxth	r1, r2
 8002e90:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <StartWifi+0x214>)
 8002e92:	8011      	strh	r1, [r2, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1d7      	bne.n	8002e48 <StartWifi+0x134>
  	            }
  	          }
  	          if(Socket == -1)
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <StartWifi+0x20c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	f47f af44 	bne.w	8002d2c <StartWifi+0x18>
  	          {
  	            printf("> ERROR : Cannot open Connection\r\n");
 8002ea4:	4821      	ldr	r0, [pc, #132]	; (8002f2c <StartWifi+0x218>)
 8002ea6:	f00b faa9 	bl	800e3fc <puts>
  	            BSP_LED_On(LED2);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f000 fd98 	bl	80039e0 <BSP_LED_On>
 8002eb0:	e73c      	b.n	8002d2c <StartWifi+0x18>
  	          }
  	        }
  	        else
  	        {
  	          printf("> ERROR : es-wifi module CANNOT get IP address\r\n");
 8002eb2:	481f      	ldr	r0, [pc, #124]	; (8002f30 <StartWifi+0x21c>)
 8002eb4:	f00b faa2 	bl	800e3fc <puts>
  	          BSP_LED_On(LED2);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f000 fd91 	bl	80039e0 <BSP_LED_On>
 8002ebe:	e735      	b.n	8002d2c <StartWifi+0x18>
  	        }
  	      }
  	      else
  	      {
  	        printf("> ERROR : es-wifi module NOT connected\r\n");
 8002ec0:	481c      	ldr	r0, [pc, #112]	; (8002f34 <StartWifi+0x220>)
 8002ec2:	f00b fa9b 	bl	800e3fc <puts>
  	        BSP_LED_On(LED2);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f000 fd8a 	bl	80039e0 <BSP_LED_On>
 8002ecc:	e72e      	b.n	8002d2c <StartWifi+0x18>
  	      }
  	    }
  	    else
  	    {
  	      printf("> ERROR : WIFI Module cannot be initialized.\r\n");
 8002ece:	481a      	ldr	r0, [pc, #104]	; (8002f38 <StartWifi+0x224>)
 8002ed0:	f00b fa94 	bl	800e3fc <puts>
  	      BSP_LED_On(LED2);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f000 fd83 	bl	80039e0 <BSP_LED_On>
		while (connection == true)
 8002eda:	e727      	b.n	8002d2c <StartWifi+0x18>
 8002edc:	20002b4c 	.word	0x20002b4c
 8002ee0:	20002d44 	.word	0x20002d44
 8002ee4:	20002d50 	.word	0x20002d50
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	08010f54 	.word	0x08010f54
 8002ef0:	20002ce0 	.word	0x20002ce0
 8002ef4:	08010f70 	.word	0x08010f70
 8002ef8:	08010fa4 	.word	0x08010fa4
 8002efc:	08010fc8 	.word	0x08010fc8
 8002f00:	08010fd4 	.word	0x08010fd4
 8002f04:	08010fdc 	.word	0x08010fdc
 8002f08:	20002d4c 	.word	0x20002d4c
 8002f0c:	08010ffc 	.word	0x08010ffc
 8002f10:	20000000 	.word	0x20000000
 8002f14:	0801102c 	.word	0x0801102c
 8002f18:	08011060 	.word	0x08011060
 8002f1c:	0801106c 	.word	0x0801106c
 8002f20:	20000004 	.word	0x20000004
 8002f24:	20002bd4 	.word	0x20002bd4
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	08011094 	.word	0x08011094
 8002f30:	080110b8 	.word	0x080110b8
 8002f34:	080110e8 	.word	0x080110e8
 8002f38:	08011110 	.word	0x08011110

08002f3c <StartSendData>:
	}
}

/* USER CODE BEGIN Header_StartSendData */
void StartSendData(void const * argument)
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	6178      	str	r0, [r7, #20]
  	 for (;;)
  	 {
  		 /* Se non c'è connessione è inutile inviare dati al server quindi il threadSendData si blocca */
  		 if (connection == false) {
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <StartSendData+0x88>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f083 0301 	eor.w	r3, r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <StartSendData+0x24>
  			 osSemaphoreWait(semaphoreWifiHandle, osWaitForever);
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <StartSendData+0x8c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f007 ffec 	bl	800af38 <osSemaphoreWait>
  		 }
  		 if(Socket != -1)
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <StartSendData+0x90>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d026      	beq.n	8002fb8 <StartSendData+0x7c>
  		 {
  			 retval = osMessageGet(QueueDataHandle, 200);
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <StartSendData+0x94>)
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	4c19      	ldr	r4, [pc, #100]	; (8002fd4 <StartSendData+0x98>)
 8002f70:	463b      	mov	r3, r7
 8002f72:	22c8      	movs	r2, #200	; 0xc8
 8002f74:	4618      	mov	r0, r3
 8002f76:	f008 f8cb 	bl	800b110 <osMessageGet>
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	         ret = WIFI_SendData(Socket, (uint8_t*) retval.value.p, 70, &Datalen, WIFI_WRITE_TIMEOUT);
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <StartSendData+0x90>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b2d8      	uxtb	r0, r3
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <StartSendData+0x98>)
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <StartSendData+0x9c>)
 8002f96:	2246      	movs	r2, #70	; 0x46
 8002f98:	f7ff f9f4 	bl	8002384 <WIFI_SendData>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <StartSendData+0xa0>)
 8002fa2:	601a      	str	r2, [r3, #0]
	         if (ret != WIFI_STATUS_OK)
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <StartSendData+0xa0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <StartSendData+0x7c>
	         {
	        	 printf("\r\n> ERROR : Failed to Send Data, connection closed\r\n");
 8002fac:	480c      	ldr	r0, [pc, #48]	; (8002fe0 <StartSendData+0xa4>)
 8002fae:	f00b fa25 	bl	800e3fc <puts>
	        	 connection = false;
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <StartSendData+0x88>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
	         }
  		 }
  		osDelay(3000);
 8002fb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002fbc:	f007 ff76 	bl	800aeac <osDelay>
  		 if (connection == false) {
 8002fc0:	e7c0      	b.n	8002f44 <StartSendData+0x8>
 8002fc2:	bf00      	nop
 8002fc4:	20002d44 	.word	0x20002d44
 8002fc8:	20002bd4 	.word	0x20002bd4
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	20002cd0 	.word	0x20002cd0
 8002fd4:	20002cd4 	.word	0x20002cd4
 8002fd8:	20002b50 	.word	0x20002b50
 8002fdc:	20002d40 	.word	0x20002d40
 8002fe0:	08011140 	.word	0x08011140

08002fe4 <StartSensors>:
}


/* USER CODE BEGIN Header_StartSensors */
void StartSensors(void const * argument)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002fec:	4838      	ldr	r0, [pc, #224]	; (80030d0 <StartSensors+0xec>)
 8002fee:	f000 ff07 	bl	8003e00 <BSP_ACCELERO_AccGetXYZ>
	  temperature = (int) BSP_TSENSOR_ReadTemp();
 8002ff2:	f000 ff67 	bl	8003ec4 <BSP_TSENSOR_ReadTemp>
 8002ff6:	eef0 7a40 	vmov.f32	s15, s0
 8002ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffe:	ee17 2a90 	vmov	r2, s15
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <StartSensors+0xf0>)
 8003004:	601a      	str	r2, [r3, #0]
	  pressure = (int) BSP_PSENSOR_ReadPressure();
 8003006:	f000 ff33 	bl	8003e70 <BSP_PSENSOR_ReadPressure>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003012:	ee17 2a90 	vmov	r2, s15
 8003016:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <StartSensors+0xf4>)
 8003018:	601a      	str	r2, [r3, #0]
	  sprintf(wifi_data, "Temperatura: %d \r\nPressione: %d \r\nInclinazione: %d \r\n\n", temperature, pressure, pDataXYZ[0]);
 800301a:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <StartSensors+0xf0>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <StartSensors+0xf4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	492b      	ldr	r1, [pc, #172]	; (80030d0 <StartSensors+0xec>)
 8003024:	f9b1 1000 	ldrsh.w	r1, [r1]
 8003028:	9100      	str	r1, [sp, #0]
 800302a:	492c      	ldr	r1, [pc, #176]	; (80030dc <StartSensors+0xf8>)
 800302c:	482c      	ldr	r0, [pc, #176]	; (80030e0 <StartSensors+0xfc>)
 800302e:	f00b f9ed 	bl	800e40c <siprintf>
	  osMessagePut(QueueDataHandle, (uint32_t) &wifi_data, 200);
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <StartSensors+0x100>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	492a      	ldr	r1, [pc, #168]	; (80030e0 <StartSensors+0xfc>)
 8003038:	22c8      	movs	r2, #200	; 0xc8
 800303a:	4618      	mov	r0, r3
 800303c:	f008 f828 	bl	800b090 <osMessagePut>

	  /* Sezione critica protetta da mutex.
	   * Le variabile condivisa è PROBLEM */

	  osSemaphoreWait(semaphoreMutexHandle, osWaitForever);
 8003040:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <StartSensors+0x104>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	4618      	mov	r0, r3
 800304a:	f007 ff75 	bl	800af38 <osSemaphoreWait>

	  if ((pDataXYZ[0] < -200) || (pDataXYZ[0] > 200) || (pDataXYZ[3] < 0) || (temperature > 50)) {
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <StartSensors+0xec>)
 8003050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003054:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8003058:	db0d      	blt.n	8003076 <StartSensors+0x92>
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <StartSensors+0xec>)
 800305c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003060:	2bc8      	cmp	r3, #200	; 0xc8
 8003062:	dc08      	bgt.n	8003076 <StartSensors+0x92>
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <StartSensors+0xec>)
 8003066:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	db03      	blt.n	8003076 <StartSensors+0x92>
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <StartSensors+0xf0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b32      	cmp	r3, #50	; 0x32
 8003074:	dd0e      	ble.n	8003094 <StartSensors+0xb0>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003076:	2201      	movs	r2, #1
 8003078:	2101      	movs	r1, #1
 800307a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800307e:	f001 fd6d 	bl	8004b5c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003082:	2201      	movs	r2, #1
 8003084:	2110      	movs	r1, #16
 8003086:	4819      	ldr	r0, [pc, #100]	; (80030ec <StartSensors+0x108>)
 8003088:	f001 fd68 	bl	8004b5c <HAL_GPIO_WritePin>
		  problem = true;
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <StartSensors+0x10c>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e012      	b.n	80030ba <StartSensors+0xd6>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003094:	2200      	movs	r2, #0
 8003096:	2101      	movs	r1, #1
 8003098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800309c:	f001 fd5e 	bl	8004b5c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2110      	movs	r1, #16
 80030a4:	4811      	ldr	r0, [pc, #68]	; (80030ec <StartSensors+0x108>)
 80030a6:	f001 fd59 	bl	8004b5c <HAL_GPIO_WritePin>
		  problem = false;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <StartSensors+0x10c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]

		  /* Se il problema viene risolto viene fatto ripartire il motore stepper */
		  osSemaphoreRelease(semaphoreStepperPrivHandle);
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <StartSensors+0x110>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f007 ff8d 	bl	800afd4 <osSemaphoreRelease>
	  }

	  osSemaphoreRelease(semaphoreMutexHandle); // fine sezione critica
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <StartSensors+0x104>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f007 ff88 	bl	800afd4 <osSemaphoreRelease>

	  osDelay(500);
 80030c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030c8:	f007 fef0 	bl	800aeac <osDelay>
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80030cc:	e78e      	b.n	8002fec <StartSensors+0x8>
 80030ce:	bf00      	nop
 80030d0:	200004cc 	.word	0x200004cc
 80030d4:	20002bec 	.word	0x20002bec
 80030d8:	20002bf8 	.word	0x20002bf8
 80030dc:	08011174 	.word	0x08011174
 80030e0:	20002c88 	.word	0x20002c88
 80030e4:	20002cd0 	.word	0x20002cd0
 80030e8:	20002bd8 	.word	0x20002bd8
 80030ec:	48000400 	.word	0x48000400
 80030f0:	20002ccf 	.word	0x20002ccf
 80030f4:	20002c80 	.word	0x20002c80

080030f8 <StartManager>:
  }
}

/* USER CODE BEGIN Header_StartManager */
void StartManager(void const * argument)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /* semaforo su cui si blocca il threadManager in attesa di arrivo di comandi su seriale arduino */
	  osSemaphoreWait(semaphoreSerialHandle, osWaitForever);
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <StartManager+0x144>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	4618      	mov	r0, r3
 800310a:	f007 ff15 	bl	800af38 <osSemaphoreWait>
	  HAL_UART_Receive_IT(&huart3, command, 1);
 800310e:	2201      	movs	r2, #1
 8003110:	494b      	ldr	r1, [pc, #300]	; (8003240 <StartManager+0x148>)
 8003112:	484c      	ldr	r0, [pc, #304]	; (8003244 <StartManager+0x14c>)
 8003114:	f006 ff62 	bl	8009fdc <HAL_UART_Receive_IT>

	  /* Inizio sezione critica protetta da mutex. L
	   * Le variabili condivise con altri thread sono RPM, DIR, ON, htim2.Instance->CCR1 */

	  osSemaphoreWait(semaphoreMutexHandle, osWaitForever);
 8003118:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <StartManager+0x150>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	4618      	mov	r0, r3
 8003122:	f007 ff09 	bl	800af38 <osSemaphoreWait>
	  switch (command[0]) {
 8003126:	4b46      	ldr	r3, [pc, #280]	; (8003240 <StartManager+0x148>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d079      	beq.n	8003222 <StartManager+0x12a>
 800312e:	2b00      	cmp	r3, #0
 8003130:	db79      	blt.n	8003226 <StartManager+0x12e>
 8003132:	2b6e      	cmp	r3, #110	; 0x6e
 8003134:	dc77      	bgt.n	8003226 <StartManager+0x12e>
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	db75      	blt.n	8003226 <StartManager+0x12e>
 800313a:	3b64      	subs	r3, #100	; 0x64
 800313c:	2b0a      	cmp	r3, #10
 800313e:	d872      	bhi.n	8003226 <StartManager+0x12e>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <StartManager+0x50>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	08003175 	.word	0x08003175
 800314c:	08003227 	.word	0x08003227
 8003150:	080031a3 	.word	0x080031a3
 8003154:	080031d5 	.word	0x080031d5
 8003158:	08003227 	.word	0x08003227
 800315c:	080031b9 	.word	0x080031b9
 8003160:	080031f1 	.word	0x080031f1
 8003164:	080031f9 	.word	0x080031f9
 8003168:	0800320f 	.word	0x0800320f
 800316c:	08003227 	.word	0x08003227
 8003170:	08003217 	.word	0x08003217
			case (100):
				if(stepper_rpm == 0) {
 8003174:	4b35      	ldr	r3, [pc, #212]	; (800324c <StartManager+0x154>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <StartManager+0x9c>
					//printf("Accensione \r\n");
					on = true;
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <StartManager+0x158>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
					stepper_rpm = STEP_RPM_INIT;
 8003182:	4b32      	ldr	r3, [pc, #200]	; (800324c <StartManager+0x154>)
 8003184:	2208      	movs	r2, #8
 8003186:	701a      	strb	r2, [r3, #0]

					/* Al click del tasto di accensione viene fatto partire il thread che fa ruotare il motore stepper */
					osSemaphoreRelease(semaphoreStepperPrivHandle);
 8003188:	4b32      	ldr	r3, [pc, #200]	; (8003254 <StartManager+0x15c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f007 ff21 	bl	800afd4 <osSemaphoreRelease>
				} else {
					//printf("Spegnimento \r\n");
					on = false;
					stepper_rpm = 0;
				}
				break;
 8003192:	e04d      	b.n	8003230 <StartManager+0x138>
					on = false;
 8003194:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <StartManager+0x158>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
					stepper_rpm = 0;
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <StartManager+0x154>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
				break;
 80031a0:	e046      	b.n	8003230 <StartManager+0x138>
			case (101):
				//printf("func/stop \r\n");
				break;
			case (102):
				//printf("Vol+ \r\n");
				if(stepper_rpm <= 13)
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <StartManager+0x154>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b0d      	cmp	r3, #13
 80031a8:	d83f      	bhi.n	800322a <StartManager+0x132>
					stepper_rpm += 2;
 80031aa:	4b28      	ldr	r3, [pc, #160]	; (800324c <StartManager+0x154>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3302      	adds	r3, #2
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <StartManager+0x154>)
 80031b4:	701a      	strb	r2, [r3, #0]
				break;
 80031b6:	e038      	b.n	800322a <StartManager+0x132>
			case (105):
				//printf("Destra \r\n");
				if (on == true)
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <StartManager+0x158>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <StartManager+0xd0>
					htim2.Instance->CCR1 = SERVO_INIT + 12;
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <StartManager+0x160>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2255      	movs	r2, #85	; 0x55
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34

				/* Quando le ruote curvano viene fatto partire il thread che si occupa di riaddrizzarle */
				osSemaphoreRelease(semaphoreServoPrivHandle);
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <StartManager+0x164>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f007 ff01 	bl	800afd4 <osSemaphoreRelease>
				break;
 80031d2:	e02d      	b.n	8003230 <StartManager+0x138>
			case (104):
				//printf("play/pausa \r\n");
				break;
			case (103):
				//printf("Sinistra \r\n");
				if (on == true)
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <StartManager+0x158>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <StartManager+0xec>
					htim2.Instance->CCR1 = SERVO_INIT - 12;
 80031dc:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <StartManager+0x160>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	223d      	movs	r2, #61	; 0x3d
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34

				/* Quando le ruote curvano viene fatto partire il thread che si occupa di riaddrizzarle */
				osSemaphoreRelease(semaphoreServoPrivHandle);
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <StartManager+0x164>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f007 fef3 	bl	800afd4 <osSemaphoreRelease>
				break;
 80031ee:	e01f      	b.n	8003230 <StartManager+0x138>
			case (106):
				//printf("Indietro \r\n"); //freccia giù
				stepper_dir = 1;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <StartManager+0x168>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
				break;
 80031f6:	e01b      	b.n	8003230 <StartManager+0x138>
			case (107):
				//printf("Vol- \r\n");
				if(stepper_rpm > 2)
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <StartManager+0x154>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d916      	bls.n	800322e <StartManager+0x136>
					stepper_rpm -= 2;
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <StartManager+0x154>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	3b02      	subs	r3, #2
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b10      	ldr	r3, [pc, #64]	; (800324c <StartManager+0x154>)
 800320a:	701a      	strb	r2, [r3, #0]
				break;
 800320c:	e00f      	b.n	800322e <StartManager+0x136>
			case (108):
				//printf("Avanti \r\n"); //freccia su
				stepper_dir = 0;
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <StartManager+0x168>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
				break;
 8003214:	e00c      	b.n	8003230 <StartManager+0x138>
				break;
			case (110):
				//printf("repeat \r\n");

				/* Al click del tasto viene fatto partire il thread che instaura la connessione con il server TCP */
				osSemaphoreRelease(semaphoreWifiSincHandle);
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <StartManager+0x16c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f007 feda 	bl	800afd4 <osSemaphoreRelease>
				break;
 8003220:	e006      	b.n	8003230 <StartManager+0x138>
			case (0):
				//printf("0 \r\n");
				break;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <StartManager+0x138>
			default :
				//printf("Segnale non codificato \r\n");
				break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <StartManager+0x138>
				break;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <StartManager+0x138>
				break;
 800322e:	bf00      	nop
	  	}
	  osSemaphoreRelease(semaphoreMutexHandle); // Fine sezione critica
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <StartManager+0x150>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f007 fecd 	bl	800afd4 <osSemaphoreRelease>
	  osSemaphoreWait(semaphoreSerialHandle, osWaitForever);
 800323a:	e761      	b.n	8003100 <StartManager+0x8>
 800323c:	20002afc 	.word	0x20002afc
 8003240:	20002be8 	.word	0x20002be8
 8003244:	20002b54 	.word	0x20002b54
 8003248:	20002bd8 	.word	0x20002bd8
 800324c:	20002bf0 	.word	0x20002bf0
 8003250:	20002be0 	.word	0x20002be0
 8003254:	20002c80 	.word	0x20002c80
 8003258:	20002cec 	.word	0x20002cec
 800325c:	20002d38 	.word	0x20002d38
 8003260:	20002cce 	.word	0x20002cce
 8003264:	20002b4c 	.word	0x20002b4c

08003268 <Error_Handler>:
  }
}

/* This function is executed in case of error occurrence. */
void Error_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800326c:	b672      	cpsid	i
}
 800326e:	bf00      	nop
  __disable_irq();
  while (1)
 8003270:	e7fe      	b.n	8003270 <Error_Handler+0x8>

08003272 <stepper_set_rpm>:


#define stepsperrev 4096

void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 17 rev/min
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
	delayStepM(60000000/stepsperrev/rpm);
 800327a:	f643 1238 	movw	r2, #14648	; 0x3938
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	fb92 f3f3 	sdiv	r3, r2, r3
 8003284:	b29b      	uxth	r3, r3
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f8b8 	bl	80023fc <delayStepM>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <stepper_half_drive>:

void stepper_half_drive (int step)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b07      	cmp	r3, #7
 80032a0:	f200 80c4 	bhi.w	800342c <stepper_half_drive+0x198>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <stepper_half_drive+0x18>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032cd 	.word	0x080032cd
 80032b0:	080032f9 	.word	0x080032f9
 80032b4:	08003325 	.word	0x08003325
 80032b8:	08003351 	.word	0x08003351
 80032bc:	0800337d 	.word	0x0800337d
 80032c0:	080033a9 	.word	0x080033a9
 80032c4:	080033d5 	.word	0x080033d5
 80032c8:	08003401 	.word	0x08003401
	switch (step){
		case 0:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN1
 80032cc:	2201      	movs	r2, #1
 80032ce:	2104      	movs	r1, #4
 80032d0:	4858      	ldr	r0, [pc, #352]	; (8003434 <stepper_half_drive+0x1a0>)
 80032d2:	f001 fc43 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80032d6:	2200      	movs	r2, #0
 80032d8:	2102      	movs	r1, #2
 80032da:	4856      	ldr	r0, [pc, #344]	; (8003434 <stepper_half_drive+0x1a0>)
 80032dc:	f001 fc3e 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80032e0:	2200      	movs	r2, #0
 80032e2:	2108      	movs	r1, #8
 80032e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e8:	f001 fc38 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // IN4
 80032ec:	2200      	movs	r2, #0
 80032ee:	2101      	movs	r1, #1
 80032f0:	4850      	ldr	r0, [pc, #320]	; (8003434 <stepper_half_drive+0x1a0>)
 80032f2:	f001 fc33 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 80032f6:	e099      	b.n	800342c <stepper_half_drive+0x198>

		case 1:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN1
 80032f8:	2201      	movs	r2, #1
 80032fa:	2104      	movs	r1, #4
 80032fc:	484d      	ldr	r0, [pc, #308]	; (8003434 <stepper_half_drive+0x1a0>)
 80032fe:	f001 fc2d 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 8003302:	2201      	movs	r2, #1
 8003304:	2102      	movs	r1, #2
 8003306:	484b      	ldr	r0, [pc, #300]	; (8003434 <stepper_half_drive+0x1a0>)
 8003308:	f001 fc28 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 800330c:	2200      	movs	r2, #0
 800330e:	2108      	movs	r1, #8
 8003310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003314:	f001 fc22 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // IN4
 8003318:	2200      	movs	r2, #0
 800331a:	2101      	movs	r1, #1
 800331c:	4845      	ldr	r0, [pc, #276]	; (8003434 <stepper_half_drive+0x1a0>)
 800331e:	f001 fc1d 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 8003322:	e083      	b.n	800342c <stepper_half_drive+0x198>

		case 2:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 8003324:	2200      	movs	r2, #0
 8003326:	2104      	movs	r1, #4
 8003328:	4842      	ldr	r0, [pc, #264]	; (8003434 <stepper_half_drive+0x1a0>)
 800332a:	f001 fc17 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 800332e:	2201      	movs	r2, #1
 8003330:	2102      	movs	r1, #2
 8003332:	4840      	ldr	r0, [pc, #256]	; (8003434 <stepper_half_drive+0x1a0>)
 8003334:	f001 fc12 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 8003338:	2200      	movs	r2, #0
 800333a:	2108      	movs	r1, #8
 800333c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003340:	f001 fc0c 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // IN4
 8003344:	2200      	movs	r2, #0
 8003346:	2101      	movs	r1, #1
 8003348:	483a      	ldr	r0, [pc, #232]	; (8003434 <stepper_half_drive+0x1a0>)
 800334a:	f001 fc07 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 800334e:	e06d      	b.n	800342c <stepper_half_drive+0x198>

		case 3:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 8003350:	2200      	movs	r2, #0
 8003352:	2104      	movs	r1, #4
 8003354:	4837      	ldr	r0, [pc, #220]	; (8003434 <stepper_half_drive+0x1a0>)
 8003356:	f001 fc01 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // IN2
 800335a:	2201      	movs	r2, #1
 800335c:	2102      	movs	r1, #2
 800335e:	4835      	ldr	r0, [pc, #212]	; (8003434 <stepper_half_drive+0x1a0>)
 8003360:	f001 fbfc 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 8003364:	2201      	movs	r2, #1
 8003366:	2108      	movs	r1, #8
 8003368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800336c:	f001 fbf6 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // IN4
 8003370:	2200      	movs	r2, #0
 8003372:	2101      	movs	r1, #1
 8003374:	482f      	ldr	r0, [pc, #188]	; (8003434 <stepper_half_drive+0x1a0>)
 8003376:	f001 fbf1 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 800337a:	e057      	b.n	800342c <stepper_half_drive+0x198>

		case 4:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 800337c:	2200      	movs	r2, #0
 800337e:	2104      	movs	r1, #4
 8003380:	482c      	ldr	r0, [pc, #176]	; (8003434 <stepper_half_drive+0x1a0>)
 8003382:	f001 fbeb 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 8003386:	2200      	movs	r2, #0
 8003388:	2102      	movs	r1, #2
 800338a:	482a      	ldr	r0, [pc, #168]	; (8003434 <stepper_half_drive+0x1a0>)
 800338c:	f001 fbe6 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 8003390:	2201      	movs	r2, #1
 8003392:	2108      	movs	r1, #8
 8003394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003398:	f001 fbe0 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);   // IN4
 800339c:	2200      	movs	r2, #0
 800339e:	2101      	movs	r1, #1
 80033a0:	4824      	ldr	r0, [pc, #144]	; (8003434 <stepper_half_drive+0x1a0>)
 80033a2:	f001 fbdb 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 80033a6:	e041      	b.n	800342c <stepper_half_drive+0x198>

		case 5:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 80033a8:	2200      	movs	r2, #0
 80033aa:	2104      	movs	r1, #4
 80033ac:	4821      	ldr	r0, [pc, #132]	; (8003434 <stepper_half_drive+0x1a0>)
 80033ae:	f001 fbd5 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80033b2:	2200      	movs	r2, #0
 80033b4:	2102      	movs	r1, #2
 80033b6:	481f      	ldr	r0, [pc, #124]	; (8003434 <stepper_half_drive+0x1a0>)
 80033b8:	f001 fbd0 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);   // IN3
 80033bc:	2201      	movs	r2, #1
 80033be:	2108      	movs	r1, #8
 80033c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033c4:	f001 fbca 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // IN4
 80033c8:	2201      	movs	r2, #1
 80033ca:	2101      	movs	r1, #1
 80033cc:	4819      	ldr	r0, [pc, #100]	; (8003434 <stepper_half_drive+0x1a0>)
 80033ce:	f001 fbc5 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 80033d2:	e02b      	b.n	800342c <stepper_half_drive+0x198>

		case 6:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);   // IN1
 80033d4:	2200      	movs	r2, #0
 80033d6:	2104      	movs	r1, #4
 80033d8:	4816      	ldr	r0, [pc, #88]	; (8003434 <stepper_half_drive+0x1a0>)
 80033da:	f001 fbbf 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 80033de:	2200      	movs	r2, #0
 80033e0:	2102      	movs	r1, #2
 80033e2:	4814      	ldr	r0, [pc, #80]	; (8003434 <stepper_half_drive+0x1a0>)
 80033e4:	f001 fbba 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 80033e8:	2200      	movs	r2, #0
 80033ea:	2108      	movs	r1, #8
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f0:	f001 fbb4 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // IN4
 80033f4:	2201      	movs	r2, #1
 80033f6:	2101      	movs	r1, #1
 80033f8:	480e      	ldr	r0, [pc, #56]	; (8003434 <stepper_half_drive+0x1a0>)
 80033fa:	f001 fbaf 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 80033fe:	e015      	b.n	800342c <stepper_half_drive+0x198>

		case 7:
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);   // IN1
 8003400:	2201      	movs	r2, #1
 8003402:	2104      	movs	r1, #4
 8003404:	480b      	ldr	r0, [pc, #44]	; (8003434 <stepper_half_drive+0x1a0>)
 8003406:	f001 fba9 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);   // IN2
 800340a:	2200      	movs	r2, #0
 800340c:	2102      	movs	r1, #2
 800340e:	4809      	ldr	r0, [pc, #36]	; (8003434 <stepper_half_drive+0x1a0>)
 8003410:	f001 fba4 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);   // IN3
 8003414:	2200      	movs	r2, #0
 8003416:	2108      	movs	r1, #8
 8003418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800341c:	f001 fb9e 	bl	8004b5c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // IN4
 8003420:	2201      	movs	r2, #1
 8003422:	2101      	movs	r1, #1
 8003424:	4803      	ldr	r0, [pc, #12]	; (8003434 <stepper_half_drive+0x1a0>)
 8003426:	f001 fb99 	bl	8004b5c <HAL_GPIO_WritePin>
			  break;
 800342a:	bf00      	nop

		}
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	48000400 	.word	0x48000400

08003438 <stepper_step_angle>:

void stepper_step_angle (float angle, int direction, int rpm) //rpm 1-17 circa
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003442:	60b8      	str	r0, [r7, #8]
 8003444:	6079      	str	r1, [r7, #4]
	float anglepersequence = 0.703125;  // 360 = 512 sequences
 8003446:	4b20      	ldr	r3, [pc, #128]	; (80034c8 <stepper_step_angle+0x90>)
 8003448:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 800344a:	edd7 6a03 	vldr	s13, [r7, #12]
 800344e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800345a:	ee17 3a90 	vmov	r3, s15
 800345e:	617b      	str	r3, [r7, #20]

	for (int seq=0; seq<numberofsequences; seq++)
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
 8003464:	e027      	b.n	80034b6 <stepper_step_angle+0x7e>
	{
		if (direction == 0)  // for clockwise
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <stepper_step_angle+0x54>
		{
			for (int step=7; step>=0; step--)
 800346c:	2307      	movs	r3, #7
 800346e:	623b      	str	r3, [r7, #32]
 8003470:	e008      	b.n	8003484 <stepper_step_angle+0x4c>
			{
				stepper_half_drive(step);
 8003472:	6a38      	ldr	r0, [r7, #32]
 8003474:	f7ff ff0e 	bl	8003294 <stepper_half_drive>
				stepper_set_rpm(rpm);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fefa 	bl	8003272 <stepper_set_rpm>
			for (int step=7; step>=0; step--)
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	3b01      	subs	r3, #1
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b00      	cmp	r3, #0
 8003488:	daf3      	bge.n	8003472 <stepper_step_angle+0x3a>
 800348a:	e011      	b.n	80034b0 <stepper_step_angle+0x78>
			}

		}

		else if (direction == 1)  // for anti-clockwise
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10e      	bne.n	80034b0 <stepper_step_angle+0x78>
		{
			for (int step=0; step<8; step++)
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e008      	b.n	80034aa <stepper_step_angle+0x72>
			{
				stepper_half_drive(step);
 8003498:	69f8      	ldr	r0, [r7, #28]
 800349a:	f7ff fefb 	bl	8003294 <stepper_half_drive>
				stepper_set_rpm(rpm);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fee7 	bl	8003272 <stepper_set_rpm>
			for (int step=0; step<8; step++)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	3301      	adds	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b07      	cmp	r3, #7
 80034ae:	ddf3      	ble.n	8003498 <stepper_step_angle+0x60>
	for (int seq=0; seq<numberofsequences; seq++)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3301      	adds	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	dbd3      	blt.n	8003466 <stepper_step_angle+0x2e>
			}
		}
	}
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	3f340000 	.word	0x3f340000

080034cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_MspInit+0x4c>)
 80034d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d6:	4a10      	ldr	r2, [pc, #64]	; (8003518 <HAL_MspInit+0x4c>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6613      	str	r3, [r2, #96]	; 0x60
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_MspInit+0x4c>)
 80034e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_MspInit+0x4c>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <HAL_MspInit+0x4c>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_MspInit+0x4c>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	210f      	movs	r1, #15
 8003506:	f06f 0001 	mvn.w	r0, #1
 800350a:	f001 f8ee 	bl	80046ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000

0800351c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d114      	bne.n	8003558 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_TIM_Base_MspInit+0x68>)
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_TIM_Base_MspInit+0x68>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6593      	str	r3, [r2, #88]	; 0x58
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_TIM_Base_MspInit+0x68>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2105      	movs	r1, #5
 800354a:	201c      	movs	r0, #28
 800354c:	f001 f8cd 	bl	80046ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003550:	201c      	movs	r0, #28
 8003552:	f001 f8e6 	bl	8004722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003556:	e010      	b.n	800357a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM8)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_TIM_Base_MspInit+0x6c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10b      	bne.n	800357a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <HAL_TIM_Base_MspInit+0x68>)
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	4a07      	ldr	r2, [pc, #28]	; (8003584 <HAL_TIM_Base_MspInit+0x68>)
 8003568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800356c:	6613      	str	r3, [r2, #96]	; 0x60
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_TIM_Base_MspInit+0x68>)
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	68bb      	ldr	r3, [r7, #8]
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	40013400 	.word	0x40013400

0800358c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d11c      	bne.n	80035e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_TIM_MspPostInit+0x64>)
 80035b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b2:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <HAL_TIM_MspPostInit+0x64>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <HAL_TIM_MspPostInit+0x64>)
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80035c6:	2320      	movs	r3, #32
 80035c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f107 030c 	add.w	r3, r7, #12
 80035de:	4619      	mov	r1, r3
 80035e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035e4:	f001 f8f8 	bl	80047d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000

080035f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a32      	ldr	r2, [pc, #200]	; (80036dc <HAL_UART_MspInit+0xe8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d128      	bne.n	8003668 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003616:	4b32      	ldr	r3, [pc, #200]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361a:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <HAL_UART_MspInit+0xec>)
 800361c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003620:	6613      	str	r3, [r2, #96]	; 0x60
 8003622:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363a:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_UART_MspInit+0xec>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003646:	23c0      	movs	r3, #192	; 0xc0
 8003648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003652:	2303      	movs	r3, #3
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003656:	2307      	movs	r3, #7
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365a:	f107 031c 	add.w	r3, r7, #28
 800365e:	4619      	mov	r1, r3
 8003660:	4820      	ldr	r0, [pc, #128]	; (80036e4 <HAL_UART_MspInit+0xf0>)
 8003662:	f001 f8b9 	bl	80047d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003666:	e034      	b.n	80036d2 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART3)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1e      	ldr	r2, [pc, #120]	; (80036e8 <HAL_UART_MspInit+0xf4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d12f      	bne.n	80036d2 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	4a1a      	ldr	r2, [pc, #104]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	6593      	str	r3, [r2, #88]	; 0x58
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_UART_MspInit+0xec>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_UART_MspInit+0xec>)
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036a2:	2330      	movs	r3, #48	; 0x30
 80036a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036b2:	2307      	movs	r3, #7
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b6:	f107 031c 	add.w	r3, r7, #28
 80036ba:	4619      	mov	r1, r3
 80036bc:	480b      	ldr	r0, [pc, #44]	; (80036ec <HAL_UART_MspInit+0xf8>)
 80036be:	f001 f88b 	bl	80047d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2105      	movs	r1, #5
 80036c6:	2027      	movs	r0, #39	; 0x27
 80036c8:	f001 f80f 	bl	80046ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036cc:	2027      	movs	r0, #39	; 0x27
 80036ce:	f001 f828 	bl	8004722 <HAL_NVIC_EnableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3730      	adds	r7, #48	; 0x30
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40013800 	.word	0x40013800
 80036e0:	40021000 	.word	0x40021000
 80036e4:	48000400 	.word	0x48000400
 80036e8:	40004800 	.word	0x40004800
 80036ec:	48000800 	.word	0x48000800

080036f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f4:	e7fe      	b.n	80036f4 <NMI_Handler+0x4>

080036f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fa:	e7fe      	b.n	80036fa <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	e7fe      	b.n	8003700 <MemManage_Handler+0x4>

08003702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003706:	e7fe      	b.n	8003706 <BusFault_Handler+0x4>

08003708 <EXTI1_IRQHandler>:
//void SVC_Handler(void){}

//void PendSV_Handler(void){}

void EXTI1_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800370c:	2002      	movs	r0, #2
 800370e:	f001 fa3d 	bl	8004b8c <HAL_GPIO_EXTI_IRQHandler>
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}

08003716 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800371a:	e7fe      	b.n	800371a <UsageFault_Handler+0x4>

0800371c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800372e:	f000 febd 	bl	80044ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003732:	f009 fad3 	bl	800ccdc <xTaskGetSchedulerState>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800373c:	f009 fec4 	bl	800d4c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}

08003744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <TIM2_IRQHandler+0x10>)
 800374a:	f005 fb67 	bl	8008e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20002cec 	.word	0x20002cec

08003758 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <USART3_IRQHandler+0x10>)
 800375e:	f006 fcdf 	bl	800a120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20002b54 	.word	0x20002b54

0800376c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
	return 1;
 8003770:	2301      	movs	r3, #1
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_kill>:

int _kill(int pid, int sig)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003786:	f00a f909 	bl	800d99c <__errno>
 800378a:	4603      	mov	r3, r0
 800378c:	2216      	movs	r2, #22
 800378e:	601a      	str	r2, [r3, #0]
	return -1;
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <_exit>:

void _exit (int status)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037a4:	f04f 31ff 	mov.w	r1, #4294967295
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ffe7 	bl	800377c <_kill>
	while (1) {}		/* Make sure we hang here */
 80037ae:	e7fe      	b.n	80037ae <_exit+0x12>

080037b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e00a      	b.n	80037d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037c2:	f3af 8000 	nop.w
 80037c6:	4601      	mov	r1, r0
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	60ba      	str	r2, [r7, #8]
 80037ce:	b2ca      	uxtb	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3301      	adds	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	dbf0      	blt.n	80037c2 <_read+0x12>
	}

return len;
 80037e0:	687b      	ldr	r3, [r7, #4]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	return -1;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003812:	605a      	str	r2, [r3, #4]
	return 0;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <_isatty>:

int _isatty(int file)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
	return 1;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
	return 0;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <_sbrk+0x5c>)
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <_sbrk+0x60>)
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <_sbrk+0x64>)
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <_sbrk+0x68>)
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	429a      	cmp	r2, r3
 8003882:	d207      	bcs.n	8003894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003884:	f00a f88a 	bl	800d99c <__errno>
 8003888:	4603      	mov	r3, r0
 800388a:	220c      	movs	r2, #12
 800388c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	e009      	b.n	80038a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <_sbrk+0x64>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <_sbrk+0x64>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <_sbrk+0x64>)
 80038a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20018000 	.word	0x20018000
 80038b4:	00000400 	.word	0x00000400
 80038b8:	200004d4 	.word	0x200004d4
 80038bc:	20002e30 	.word	0x20002e30

080038c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038c4:	4b17      	ldr	r3, [pc, #92]	; (8003924 <SystemInit+0x64>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <SystemInit+0x64>)
 80038cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <SystemInit+0x68>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a13      	ldr	r2, [pc, #76]	; (8003928 <SystemInit+0x68>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <SystemInit+0x68>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <SystemInit+0x68>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <SystemInit+0x68>)
 80038ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80038f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80038f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <SystemInit+0x68>)
 80038f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <SystemInit+0x68>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <SystemInit+0x68>)
 8003904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003908:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <SystemInit+0x68>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <SystemInit+0x64>)
 8003912:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003916:	609a      	str	r2, [r3, #8]
#endif
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000ed00 	.word	0xe000ed00
 8003928:	40021000 	.word	0x40021000

0800392c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800392c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003964 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003930:	f7ff ffc6 	bl	80038c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003934:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003936:	e003      	b.n	8003940 <LoopCopyDataInit>

08003938 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800393a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800393c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800393e:	3104      	adds	r1, #4

08003940 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003940:	480a      	ldr	r0, [pc, #40]	; (800396c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003944:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003946:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003948:	d3f6      	bcc.n	8003938 <CopyDataInit>
	ldr	r2, =_sbss
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <LoopForever+0x12>)
	b	LoopFillZerobss
 800394c:	e002      	b.n	8003954 <LoopFillZerobss>

0800394e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800394e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003950:	f842 3b04 	str.w	r3, [r2], #4

08003954 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <LoopForever+0x16>)
	cmp	r2, r3
 8003956:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003958:	d3f9      	bcc.n	800394e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800395a:	f00a f825 	bl	800d9a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800395e:	f7fe fda5 	bl	80024ac <main>

08003962 <LoopForever>:

LoopForever:
    b LoopForever
 8003962:	e7fe      	b.n	8003962 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003964:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003968:	08011650 	.word	0x08011650
	ldr	r0, =_sdata
 800396c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003970:	2000024c 	.word	0x2000024c
	ldr	r2, =_sbss
 8003974:	2000024c 	.word	0x2000024c
	ldr	r3, = _ebss
 8003978:	20002e30 	.word	0x20002e30

0800397c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800397c:	e7fe      	b.n	800397c <ADC1_2_IRQHandler>
	...

08003980 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <BSP_LED_Init+0x28>
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <BSP_LED_Init+0x58>)
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <BSP_LED_Init+0x58>)
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <BSP_LED_Init+0x58>)
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80039a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039ac:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80039ae:	2301      	movs	r3, #1
 80039b0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80039b6:	2302      	movs	r3, #2
 80039b8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	4a07      	ldr	r2, [pc, #28]	; (80039dc <BSP_LED_Init+0x5c>)
 80039be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c2:	f107 020c 	add.w	r2, r7, #12
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 ff05 	bl	80047d8 <HAL_GPIO_Init>
}
 80039ce:	bf00      	nop
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	20000010 	.word	0x20000010

080039e0 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	4a06      	ldr	r2, [pc, #24]	; (8003a08 <BSP_LED_On+0x28>)
 80039ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039f6:	b291      	uxth	r1, r2
 80039f8:	2201      	movs	r2, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 f8ae 	bl	8004b5c <HAL_GPIO_WritePin>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000010 	.word	0x20000010

08003a0c <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10b      	bne.n	8003a36 <BSP_COM_Init+0x2a>
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10b      	bne.n	8003a54 <BSP_COM_Init+0x48>
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a42:	f043 0302 	orr.w	r3, r3, #2
 8003a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <BSP_COM_Init+0x66>
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a64:	6613      	str	r3, [r2, #96]	; 0x60
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <BSP_COM_Init+0xc8>)
 8003a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003a82:	2307      	movs	r3, #7
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <BSP_COM_Init+0xcc>)
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	f107 0214 	add.w	r2, r7, #20
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fe9f 	bl	80047d8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <BSP_COM_Init+0xd0>)
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	f107 0214 	add.w	r2, r7, #20
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fe8f 	bl	80047d8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <BSP_COM_Init+0xd4>)
 8003abe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8003ac6:	6838      	ldr	r0, [r7, #0]
 8003ac8:	f006 f9a6 	bl	8009e18 <HAL_UART_Init>
}
 8003acc:	bf00      	nop
 8003ace:	3728      	adds	r7, #40	; 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	20000018 	.word	0x20000018
 8003adc:	2000001c 	.word	0x2000001c
 8003ae0:	20000014 	.word	0x20000014

08003ae4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	; 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af0:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003b04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b0a:	2312      	movs	r3, #18
 8003b0c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b12:	2303      	movs	r3, #3
 8003b14:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003b16:	2304      	movs	r3, #4
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	4619      	mov	r1, r3
 8003b20:	481b      	ldr	r0, [pc, #108]	; (8003b90 <I2Cx_MspInit+0xac>)
 8003b22:	f000 fe59 	bl	80047d8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4818      	ldr	r0, [pc, #96]	; (8003b90 <I2Cx_MspInit+0xac>)
 8003b2e:	f000 fe53 	bl	80047d8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b54:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <I2Cx_MspInit+0xa8>)
 8003b5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b60:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003b62:	2200      	movs	r2, #0
 8003b64:	210f      	movs	r1, #15
 8003b66:	2021      	movs	r0, #33	; 0x21
 8003b68:	f000 fdbf 	bl	80046ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003b6c:	2021      	movs	r0, #33	; 0x21
 8003b6e:	f000 fdd8 	bl	8004722 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	210f      	movs	r1, #15
 8003b76:	2022      	movs	r0, #34	; 0x22
 8003b78:	f000 fdb7 	bl	80046ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003b7c:	2022      	movs	r0, #34	; 0x22
 8003b7e:	f000 fdd0 	bl	8004722 <HAL_NVIC_EnableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3728      	adds	r7, #40	; 0x28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	48000400 	.word	0x48000400

08003b94 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <I2Cx_Init+0x54>)
 8003ba0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a11      	ldr	r2, [pc, #68]	; (8003bec <I2Cx_Init+0x58>)
 8003ba6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff89 	bl	8003ae4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fff2 	bl	8004bbc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003bd8:	2100      	movs	r1, #0
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f001 fd0a 	bl	80055f4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40005800 	.word	0x40005800
 8003bec:	00702681 	.word	0x00702681

08003bf0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	72fb      	strb	r3, [r7, #11]
 8003c02:	460b      	mov	r3, r1
 8003c04:	813b      	strh	r3, [r7, #8]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	b299      	uxth	r1, r3
 8003c12:	88f8      	ldrh	r0, [r7, #6]
 8003c14:	893a      	ldrh	r2, [r7, #8]
 8003c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c1a:	9302      	str	r3, [sp, #8]
 8003c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	4603      	mov	r3, r0
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f001 f9ae 	bl	8004f88 <HAL_I2C_Mem_Read>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f832 	bl	8003ca4 <I2Cx_Error>
  }
  return status;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08a      	sub	sp, #40	; 0x28
 8003c4e:	af04      	add	r7, sp, #16
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	4608      	mov	r0, r1
 8003c54:	4611      	mov	r1, r2
 8003c56:	461a      	mov	r2, r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	72fb      	strb	r3, [r7, #11]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	813b      	strh	r3, [r7, #8]
 8003c60:	4613      	mov	r3, r2
 8003c62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c68:	7afb      	ldrb	r3, [r7, #11]
 8003c6a:	b299      	uxth	r1, r3
 8003c6c:	88f8      	ldrh	r0, [r7, #6]
 8003c6e:	893a      	ldrh	r2, [r7, #8]
 8003c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c74:	9302      	str	r3, [sp, #8]
 8003c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4603      	mov	r3, r0
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f001 f86d 	bl	8004d60 <HAL_I2C_Mem_Write>
 8003c86:	4603      	mov	r3, r0
 8003c88:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	4619      	mov	r1, r3
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f805 	bl	8003ca4 <I2Cx_Error>
  }
  return status;
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 f812 	bl	8004cda <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ff6c 	bl	8003b94 <I2Cx_Init>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <SENSOR_IO_Init+0x10>)
 8003cca:	f7ff ff63 	bl	8003b94 <I2Cx_Init>
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20002dd0 	.word	0x20002dd0

08003cd8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	71bb      	strb	r3, [r7, #6]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003cea:	79bb      	ldrb	r3, [r7, #6]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	79f9      	ldrb	r1, [r7, #7]
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	1d7b      	adds	r3, r7, #5
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4803      	ldr	r0, [pc, #12]	; (8003d08 <SENSOR_IO_Write+0x30>)
 8003cfc:	f7ff ffa5 	bl	8003c4a <I2Cx_WriteMultiple>
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20002dd0 	.word	0x20002dd0

08003d0c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	4603      	mov	r3, r0
 8003d14:	460a      	mov	r2, r1
 8003d16:	71fb      	strb	r3, [r7, #7]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003d20:	79bb      	ldrb	r3, [r7, #6]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	79f9      	ldrb	r1, [r7, #7]
 8003d26:	2301      	movs	r3, #1
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	f107 030f 	add.w	r3, r7, #15
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	2301      	movs	r3, #1
 8003d32:	4804      	ldr	r0, [pc, #16]	; (8003d44 <SENSOR_IO_Read+0x38>)
 8003d34:	f7ff ff5c 	bl	8003bf0 <I2Cx_ReadMultiple>

  return read_value;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20002dd0 	.word	0x20002dd0

08003d48 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	603a      	str	r2, [r7, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	71fb      	strb	r3, [r7, #7]
 8003d56:	460b      	mov	r3, r1
 8003d58:	71bb      	strb	r3, [r7, #6]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003d5e:	79bb      	ldrb	r3, [r7, #6]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	79f9      	ldrb	r1, [r7, #7]
 8003d64:	88bb      	ldrh	r3, [r7, #4]
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4804      	ldr	r0, [pc, #16]	; (8003d80 <SENSOR_IO_ReadMultiple+0x38>)
 8003d70:	f7ff ff3e 	bl	8003bf0 <I2Cx_ReadMultiple>
 8003d74:	4603      	mov	r3, r0
 8003d76:	b29b      	uxth	r3, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20002dd0 	.word	0x20002dd0

08003d84 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <BSP_ACCELERO_Init+0x74>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4798      	blx	r3
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b6a      	cmp	r3, #106	; 0x6a
 8003d9c:	d002      	beq.n	8003da4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e024      	b.n	8003dee <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <BSP_ACCELERO_Init+0x78>)
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <BSP_ACCELERO_Init+0x74>)
 8003da8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003daa:	2330      	movs	r3, #48	; 0x30
 8003dac:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003db2:	2300      	movs	r3, #0
 8003db4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003db6:	2340      	movs	r3, #64	; 0x40
 8003db8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003dc2:	797a      	ldrb	r2, [r7, #5]
 8003dc4:	7abb      	ldrb	r3, [r7, #10]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003dcc:	7a3b      	ldrb	r3, [r7, #8]
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	b21a      	sxth	r2, r3
 8003dd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	b21b      	sxth	r3, r3
 8003de0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <BSP_ACCELERO_Init+0x78>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	89ba      	ldrh	r2, [r7, #12]
 8003dea:	4610      	mov	r0, r2
 8003dec:	4798      	blx	r3
  }  

  return ret;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	2000003c 	.word	0x2000003c
 8003dfc:	200004d8 	.word	0x200004d8

08003e00 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
    }
  }
}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	200004d8 	.word	0x200004d8

08003e30 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <BSP_PSENSOR_Init+0x38>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	20ba      	movs	r0, #186	; 0xba
 8003e3c:	4798      	blx	r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2bb1      	cmp	r3, #177	; 0xb1
 8003e42:	d002      	beq.n	8003e4a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	e009      	b.n	8003e5e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <BSP_PSENSOR_Init+0x3c>)
 8003e4c:	4a06      	ldr	r2, [pc, #24]	; (8003e68 <BSP_PSENSOR_Init+0x38>)
 8003e4e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <BSP_PSENSOR_Init+0x3c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	20ba      	movs	r0, #186	; 0xba
 8003e58:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8003e5e:	687b      	ldr	r3, [r7, #4]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000030 	.word	0x20000030
 8003e6c:	200004dc 	.word	0x200004dc

08003e70 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <BSP_PSENSOR_ReadPressure+0x18>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	20ba      	movs	r0, #186	; 0xba
 8003e7c:	4798      	blx	r3
 8003e7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003e82:	eeb0 0a67 	vmov.f32	s0, s15
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200004dc 	.word	0x200004dc

08003e8c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <BSP_TSENSOR_Init+0x30>)
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <BSP_TSENSOR_Init+0x34>)
 8003e9a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003e9c:	f7ff ff12 	bl	8003cc4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <BSP_TSENSOR_Init+0x30>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	20be      	movs	r0, #190	; 0xbe
 8003eaa:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200004e0 	.word	0x200004e0
 8003ec0:	20000020 	.word	0x20000020

08003ec4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <BSP_TSENSOR_ReadTemp+0x18>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	20be      	movs	r0, #190	; 0xbe
 8003ed0:	4798      	blx	r3
 8003ed2:	eef0 7a40 	vmov.f32	s15, s0
}
 8003ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200004e0 	.word	0x200004e0

08003ee0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	6039      	str	r1, [r7, #0]
 8003eea:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2120      	movs	r1, #32
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff ff0a 	bl	8003d0c <SENSOR_IO_Read>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	f023 0304 	bic.w	r3, r3, #4
 8003f02:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f22:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	2120      	movs	r1, #32
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fed3 	bl	8003cd8 <SENSOR_IO_Write>
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b088      	sub	sp, #32
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	4603      	mov	r3, r0
 8003f42:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	b2d8      	uxtb	r0, r3
 8003f48:	f107 0208 	add.w	r2, r7, #8
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	21b2      	movs	r1, #178	; 0xb2
 8003f50:	f7ff fefa 	bl	8003d48 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2135      	movs	r1, #53	; 0x35
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fed6 	bl	8003d0c <SENSOR_IO_Read>
 8003f60:	4603      	mov	r3, r0
 8003f62:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003f64:	7ffb      	ldrb	r3, [r7, #31]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	7a3b      	ldrb	r3, [r7, #8]
 8003f72:	b21b      	sxth	r3, r3
 8003f74:	4313      	orrs	r3, r2
 8003f76:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003f78:	7ffb      	ldrb	r3, [r7, #31]
 8003f7a:	019b      	lsls	r3, r3, #6
 8003f7c:	b21b      	sxth	r3, r3
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	b21a      	sxth	r2, r3
 8003f84:	7a7b      	ldrb	r3, [r7, #9]
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003f8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003f90:	10db      	asrs	r3, r3, #3
 8003f92:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003f94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003f98:	10db      	asrs	r3, r3, #3
 8003f9a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	b2d8      	uxtb	r0, r3
 8003fa0:	f107 0208 	add.w	r2, r7, #8
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	21bc      	movs	r1, #188	; 0xbc
 8003fa8:	f7ff fece 	bl	8003d48 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003fac:	7a7b      	ldrb	r3, [r7, #9]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	b21a      	sxth	r2, r3
 8003fb2:	7a3b      	ldrb	r3, [r7, #8]
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003fba:	7afb      	ldrb	r3, [r7, #11]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	7abb      	ldrb	r3, [r7, #10]
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	b2d8      	uxtb	r0, r3
 8003fcc:	f107 0208 	add.w	r2, r7, #8
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	21aa      	movs	r1, #170	; 0xaa
 8003fd4:	f7ff feb8 	bl	8003d48 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003fd8:	7a7b      	ldrb	r3, [r7, #9]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	b21a      	sxth	r2, r3
 8003fde:	7a3b      	ldrb	r3, [r7, #8]
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003fe6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003fea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003ffc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800400a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800400e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004012:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	ee07 3a90 	vmov	s15, r3
 800401c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004024:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004034:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	ee07 3a90 	vmov	s15, r3
}
 800403e:	eeb0 0a67 	vmov.f32	s0, s15
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f87b 	bl	8004150 <LPS22HB_Init>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	4603      	mov	r3, r0
 800406a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004070:	f7ff fe28 	bl	8003cc4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	210f      	movs	r1, #15
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fe46 	bl	8003d0c <SENSOR_IO_Read>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800409e:	2300      	movs	r3, #0
 80040a0:	74fb      	strb	r3, [r7, #19]
 80040a2:	e013      	b.n	80040cc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	3328      	adds	r3, #40	; 0x28
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	7cfc      	ldrb	r4, [r7, #19]
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f7ff fe2a 	bl	8003d0c <SENSOR_IO_Read>
 80040b8:	4603      	mov	r3, r0
 80040ba:	461a      	mov	r2, r3
 80040bc:	f107 0318 	add.w	r3, r7, #24
 80040c0:	4423      	add	r3, r4
 80040c2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	3301      	adds	r3, #1
 80040ca:	74fb      	strb	r3, [r7, #19]
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d9e8      	bls.n	80040a4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	74fb      	strb	r3, [r7, #19]
 80040d6:	e010      	b.n	80040fa <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	f107 0218 	add.w	r2, r7, #24
 80040de:	4413      	add	r3, r2
 80040e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80040e4:	461a      	mov	r2, r3
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	3301      	adds	r3, #1
 80040f8:	74fb      	strb	r3, [r7, #19]
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d9eb      	bls.n	80040d8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004110:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2264      	movs	r2, #100	; 0x64
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	da01      	bge.n	8004126 <LPS22HB_P_ReadPressure+0x96>
 8004122:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004126:	131b      	asrs	r3, r3, #12
 8004128:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004134:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800414c <LPS22HB_P_ReadPressure+0xbc>
 8004138:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800413c:	eef0 7a66 	vmov.f32	s15, s13
}
 8004140:	eeb0 0a67 	vmov.f32	s0, s15
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}
 800414a:	bf00      	nop
 800414c:	42c80000 	.word	0x42c80000

08004150 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	211a      	movs	r1, #26
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fdd3 	bl	8003d0c <SENSOR_IO_Read>
 8004166:	4603      	mov	r3, r0
 8004168:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	211a      	movs	r1, #26
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fda8 	bl	8003cd8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2110      	movs	r1, #16
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fdbc 	bl	8003d0c <SENSOR_IO_Read>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80041a6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	f023 0302 	bic.w	r3, r3, #2
 80041ae:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	f043 0302 	orr.w	r3, r3, #2
 80041b6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80041b8:	88fb      	ldrh	r3, [r7, #6]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	2110      	movs	r1, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fd89 	bl	8003cd8 <SENSOR_IO_Write>
}  
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	4603      	mov	r3, r0
 80041d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80041dc:	2110      	movs	r1, #16
 80041de:	20d4      	movs	r0, #212	; 0xd4
 80041e0:	f7ff fd94 	bl	8003d0c <SENSOR_IO_Read>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80041ec:	7bbb      	ldrb	r3, [r7, #14]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80041f4:	7bba      	ldrb	r2, [r7, #14]
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80041fc:	7bbb      	ldrb	r3, [r7, #14]
 80041fe:	461a      	mov	r2, r3
 8004200:	2110      	movs	r1, #16
 8004202:	20d4      	movs	r0, #212	; 0xd4
 8004204:	f7ff fd68 	bl	8003cd8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004208:	2112      	movs	r1, #18
 800420a:	20d4      	movs	r0, #212	; 0xd4
 800420c:	f7ff fd7e 	bl	8003d0c <SENSOR_IO_Read>
 8004210:	4603      	mov	r3, r0
 8004212:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	b29b      	uxth	r3, r3
 800421a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800421c:	7bbb      	ldrb	r3, [r7, #14]
 800421e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004222:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004224:	7bba      	ldrb	r2, [r7, #14]
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	4313      	orrs	r3, r2
 800422a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	461a      	mov	r2, r3
 8004230:	2112      	movs	r1, #18
 8004232:	20d4      	movs	r0, #212	; 0xd4
 8004234:	f7ff fd50 	bl	8003cd8 <SENSOR_IO_Write>
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004246:	2300      	movs	r3, #0
 8004248:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800424a:	2110      	movs	r1, #16
 800424c:	20d4      	movs	r0, #212	; 0xd4
 800424e:	f7ff fd5d 	bl	8003d0c <SENSOR_IO_Read>
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	461a      	mov	r2, r3
 8004262:	2110      	movs	r1, #16
 8004264:	20d4      	movs	r0, #212	; 0xd4
 8004266:	f7ff fd37 	bl	8003cd8 <SENSOR_IO_Write>
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004272:	b580      	push	{r7, lr}
 8004274:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004276:	f7ff fd25 	bl	8003cc4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800427a:	210f      	movs	r1, #15
 800427c:	20d4      	movs	r0, #212	; 0xd4
 800427e:	f7ff fd45 	bl	8003d0c <SENSOR_IO_Read>
 8004282:	4603      	mov	r3, r0
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}

08004288 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004296:	2115      	movs	r1, #21
 8004298:	20d4      	movs	r0, #212	; 0xd4
 800429a:	f7ff fd37 	bl	8003d0c <SENSOR_IO_Read>
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	f023 0310 	bic.w	r3, r3, #16
 80042a8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	f043 0310 	orr.w	r3, r3, #16
 80042b6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	461a      	mov	r2, r3
 80042bc:	2115      	movs	r1, #21
 80042be:	20d4      	movs	r0, #212	; 0xd4
 80042c0:	f7ff fd0a 	bl	8003cd8 <SENSOR_IO_Write>
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80042e2:	2110      	movs	r1, #16
 80042e4:	20d4      	movs	r0, #212	; 0xd4
 80042e6:	f7ff fd11 	bl	8003d0c <SENSOR_IO_Read>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80042ee:	f107 0208 	add.w	r2, r7, #8
 80042f2:	2306      	movs	r3, #6
 80042f4:	2128      	movs	r1, #40	; 0x28
 80042f6:	20d4      	movs	r0, #212	; 0xd4
 80042f8:	f7ff fd26 	bl	8003d48 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e01f      	b.n	8004342 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004302:	7ffb      	ldrb	r3, [r7, #31]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	3301      	adds	r3, #1
 8004308:	f107 0220 	add.w	r2, r7, #32
 800430c:	4413      	add	r3, r2
 800430e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004312:	b29b      	uxth	r3, r3
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	b29a      	uxth	r2, r3
 8004318:	7ffb      	ldrb	r3, [r7, #31]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	f107 0120 	add.w	r1, r7, #32
 8004320:	440b      	add	r3, r1
 8004322:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004326:	b29b      	uxth	r3, r3
 8004328:	4413      	add	r3, r2
 800432a:	b29a      	uxth	r2, r3
 800432c:	7ffb      	ldrb	r3, [r7, #31]
 800432e:	b212      	sxth	r2, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	f107 0120 	add.w	r1, r7, #32
 8004336:	440b      	add	r3, r1
 8004338:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800433c:	7ffb      	ldrb	r3, [r7, #31]
 800433e:	3301      	adds	r3, #1
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	7ffb      	ldrb	r3, [r7, #31]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d9dc      	bls.n	8004302 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d828      	bhi.n	80043a4 <LSM6DSL_AccReadXYZ+0xd8>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <LSM6DSL_AccReadXYZ+0x8c>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	0800438d 	.word	0x0800438d
 800435c:	080043a5 	.word	0x080043a5
 8004360:	080043a5 	.word	0x080043a5
 8004364:	080043a5 	.word	0x080043a5
 8004368:	0800439f 	.word	0x0800439f
 800436c:	080043a5 	.word	0x080043a5
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043a5 	.word	0x080043a5
 8004378:	08004393 	.word	0x08004393
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043a5 	.word	0x080043a5
 8004388:	08004399 	.word	0x08004399
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <LSM6DSL_AccReadXYZ+0x128>)
 800438e:	61bb      	str	r3, [r7, #24]
    break;
 8004390:	e008      	b.n	80043a4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <LSM6DSL_AccReadXYZ+0x12c>)
 8004394:	61bb      	str	r3, [r7, #24]
    break;
 8004396:	e005      	b.n	80043a4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004398:	4b18      	ldr	r3, [pc, #96]	; (80043fc <LSM6DSL_AccReadXYZ+0x130>)
 800439a:	61bb      	str	r3, [r7, #24]
    break;
 800439c:	e002      	b.n	80043a4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <LSM6DSL_AccReadXYZ+0x134>)
 80043a0:	61bb      	str	r3, [r7, #24]
    break;    
 80043a2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e01b      	b.n	80043e2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80043aa:	7ffb      	ldrb	r3, [r7, #31]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	f107 0220 	add.w	r2, r7, #32
 80043b2:	4413      	add	r3, r2
 80043b4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80043c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c8:	7ffb      	ldrb	r3, [r7, #31]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d4:	ee17 2a90 	vmov	r2, s15
 80043d8:	b212      	sxth	r2, r2
 80043da:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80043dc:	7ffb      	ldrb	r3, [r7, #31]
 80043de:	3301      	adds	r3, #1
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	7ffb      	ldrb	r3, [r7, #31]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d9e0      	bls.n	80043aa <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	3d79db23 	.word	0x3d79db23
 80043f8:	3df9db23 	.word	0x3df9db23
 80043fc:	3e79db23 	.word	0x3e79db23
 8004400:	3ef9db23 	.word	0x3ef9db23

08004404 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800440e:	2003      	movs	r0, #3
 8004410:	f000 f960 	bl	80046d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004414:	200f      	movs	r0, #15
 8004416:	f000 f80d 	bl	8004434 <HAL_InitTick>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	71fb      	strb	r3, [r7, #7]
 8004424:	e001      	b.n	800442a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004426:	f7ff f851 	bl	80034cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800442a:	79fb      	ldrb	r3, [r7, #7]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004440:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <HAL_InitTick+0x6c>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d023      	beq.n	8004490 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004448:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <HAL_InitTick+0x70>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_InitTick+0x6c>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4619      	mov	r1, r3
 8004452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004456:	fbb3 f3f1 	udiv	r3, r3, r1
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f96d 	bl	800473e <HAL_SYSTICK_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b0f      	cmp	r3, #15
 800446e:	d809      	bhi.n	8004484 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004470:	2200      	movs	r2, #0
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	f000 f937 	bl	80046ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <HAL_InitTick+0x74>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e007      	b.n	8004494 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
 8004488:	e004      	b.n	8004494 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e001      	b.n	8004494 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000074 	.word	0x20000074
 80044a4:	2000000c 	.word	0x2000000c
 80044a8:	20000070 	.word	0x20000070

080044ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_IncTick+0x20>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_IncTick+0x24>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4413      	add	r3, r2
 80044bc:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <HAL_IncTick+0x24>)
 80044be:	6013      	str	r3, [r2, #0]
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000074 	.word	0x20000074
 80044d0:	20002e1c 	.word	0x20002e1c

080044d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return uwTick;
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <HAL_GetTick+0x14>)
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20002e1c 	.word	0x20002e1c

080044ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044f4:	f7ff ffee 	bl	80044d4 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d005      	beq.n	8004512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_Delay+0x44>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004512:	bf00      	nop
 8004514:	f7ff ffde 	bl	80044d4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	429a      	cmp	r2, r3
 8004522:	d8f7      	bhi.n	8004514 <HAL_Delay+0x28>
  {
  }
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000074 	.word	0x20000074

08004534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <__NVIC_SetPriorityGrouping+0x44>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004550:	4013      	ands	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800455c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004566:	4a04      	ldr	r2, [pc, #16]	; (8004578 <__NVIC_SetPriorityGrouping+0x44>)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	60d3      	str	r3, [r2, #12]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <__NVIC_GetPriorityGrouping+0x18>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	f003 0307 	and.w	r3, r3, #7
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	db0b      	blt.n	80045c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	4907      	ldr	r1, [pc, #28]	; (80045d0 <__NVIC_EnableIRQ+0x38>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2001      	movs	r0, #1
 80045ba:	fa00 f202 	lsl.w	r2, r0, r2
 80045be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	e000e100 	.word	0xe000e100

080045d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	6039      	str	r1, [r7, #0]
 80045de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	db0a      	blt.n	80045fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	490c      	ldr	r1, [pc, #48]	; (8004620 <__NVIC_SetPriority+0x4c>)
 80045ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f2:	0112      	lsls	r2, r2, #4
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	440b      	add	r3, r1
 80045f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045fc:	e00a      	b.n	8004614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4908      	ldr	r1, [pc, #32]	; (8004624 <__NVIC_SetPriority+0x50>)
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	3b04      	subs	r3, #4
 800460c:	0112      	lsls	r2, r2, #4
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	440b      	add	r3, r1
 8004612:	761a      	strb	r2, [r3, #24]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000e100 	.word	0xe000e100
 8004624:	e000ed00 	.word	0xe000ed00

08004628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004628:	b480      	push	{r7}
 800462a:	b089      	sub	sp, #36	; 0x24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f1c3 0307 	rsb	r3, r3, #7
 8004642:	2b04      	cmp	r3, #4
 8004644:	bf28      	it	cs
 8004646:	2304      	movcs	r3, #4
 8004648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3304      	adds	r3, #4
 800464e:	2b06      	cmp	r3, #6
 8004650:	d902      	bls.n	8004658 <NVIC_EncodePriority+0x30>
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3b03      	subs	r3, #3
 8004656:	e000      	b.n	800465a <NVIC_EncodePriority+0x32>
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800465c:	f04f 32ff 	mov.w	r2, #4294967295
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43da      	mvns	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	401a      	ands	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004670:	f04f 31ff 	mov.w	r1, #4294967295
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	43d9      	mvns	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004680:	4313      	orrs	r3, r2
         );
}
 8004682:	4618      	mov	r0, r3
 8004684:	3724      	adds	r7, #36	; 0x24
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3b01      	subs	r3, #1
 800469c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046a0:	d301      	bcc.n	80046a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046a2:	2301      	movs	r3, #1
 80046a4:	e00f      	b.n	80046c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046a6:	4a0a      	ldr	r2, [pc, #40]	; (80046d0 <SysTick_Config+0x40>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ae:	210f      	movs	r1, #15
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	f7ff ff8e 	bl	80045d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <SysTick_Config+0x40>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046be:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <SysTick_Config+0x40>)
 80046c0:	2207      	movs	r2, #7
 80046c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000e010 	.word	0xe000e010

080046d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff29 	bl	8004534 <__NVIC_SetPriorityGrouping>
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b086      	sub	sp, #24
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046fc:	f7ff ff3e 	bl	800457c <__NVIC_GetPriorityGrouping>
 8004700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	6978      	ldr	r0, [r7, #20]
 8004708:	f7ff ff8e 	bl	8004628 <NVIC_EncodePriority>
 800470c:	4602      	mov	r2, r0
 800470e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff5d 	bl	80045d4 <__NVIC_SetPriority>
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	4603      	mov	r3, r0
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800472c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ff31 	bl	8004598 <__NVIC_EnableIRQ>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff ffa2 	bl	8004690 <SysTick_Config>
 800474c:	4603      	mov	r3, r0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d005      	beq.n	800477a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e029      	b.n	80047ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 020e 	bic.w	r2, r2, #14
 8004788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f003 021c 	and.w	r2, r3, #28
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2101      	movs	r1, #1
 80047a8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
    }
  }
  return status;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e6:	e17f      	b.n	8004ae8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2101      	movs	r1, #1
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	4013      	ands	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8171 	beq.w	8004ae2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d00b      	beq.n	8004820 <HAL_GPIO_Init+0x48>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d007      	beq.n	8004820 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004814:	2b11      	cmp	r3, #17
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b12      	cmp	r3, #18
 800481e:	d130      	bne.n	8004882 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	2203      	movs	r2, #3
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004856:	2201      	movs	r2, #1
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f003 0201 	and.w	r2, r3, #1
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b03      	cmp	r3, #3
 800488c:	d118      	bne.n	80048c0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004894:	2201      	movs	r2, #1
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	f003 0201 	and.w	r2, r3, #1
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	2203      	movs	r2, #3
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x128>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b12      	cmp	r3, #18
 80048fe:	d123      	bne.n	8004948 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	08da      	lsrs	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3208      	adds	r2, #8
 8004908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	220f      	movs	r2, #15
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4013      	ands	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	08da      	lsrs	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3208      	adds	r2, #8
 8004942:	6939      	ldr	r1, [r7, #16]
 8004944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	2203      	movs	r2, #3
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0203 	and.w	r2, r3, #3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80ac 	beq.w	8004ae2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498a:	4b5f      	ldr	r3, [pc, #380]	; (8004b08 <HAL_GPIO_Init+0x330>)
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	4a5e      	ldr	r2, [pc, #376]	; (8004b08 <HAL_GPIO_Init+0x330>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6613      	str	r3, [r2, #96]	; 0x60
 8004996:	4b5c      	ldr	r3, [pc, #368]	; (8004b08 <HAL_GPIO_Init+0x330>)
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049a2:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <HAL_GPIO_Init+0x334>)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	3302      	adds	r3, #2
 80049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	220f      	movs	r2, #15
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4013      	ands	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049cc:	d025      	beq.n	8004a1a <HAL_GPIO_Init+0x242>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a4f      	ldr	r2, [pc, #316]	; (8004b10 <HAL_GPIO_Init+0x338>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01f      	beq.n	8004a16 <HAL_GPIO_Init+0x23e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a4e      	ldr	r2, [pc, #312]	; (8004b14 <HAL_GPIO_Init+0x33c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d019      	beq.n	8004a12 <HAL_GPIO_Init+0x23a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a4d      	ldr	r2, [pc, #308]	; (8004b18 <HAL_GPIO_Init+0x340>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_GPIO_Init+0x236>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4c      	ldr	r2, [pc, #304]	; (8004b1c <HAL_GPIO_Init+0x344>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00d      	beq.n	8004a0a <HAL_GPIO_Init+0x232>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_GPIO_Init+0x348>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <HAL_GPIO_Init+0x22e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_GPIO_Init+0x34c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_GPIO_Init+0x22a>
 80049fe:	2306      	movs	r3, #6
 8004a00:	e00c      	b.n	8004a1c <HAL_GPIO_Init+0x244>
 8004a02:	2307      	movs	r3, #7
 8004a04:	e00a      	b.n	8004a1c <HAL_GPIO_Init+0x244>
 8004a06:	2305      	movs	r3, #5
 8004a08:	e008      	b.n	8004a1c <HAL_GPIO_Init+0x244>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e006      	b.n	8004a1c <HAL_GPIO_Init+0x244>
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e004      	b.n	8004a1c <HAL_GPIO_Init+0x244>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e002      	b.n	8004a1c <HAL_GPIO_Init+0x244>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <HAL_GPIO_Init+0x244>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	f002 0203 	and.w	r2, r2, #3
 8004a22:	0092      	lsls	r2, r2, #2
 8004a24:	4093      	lsls	r3, r2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a2c:	4937      	ldr	r1, [pc, #220]	; (8004b0c <HAL_GPIO_Init+0x334>)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	3302      	adds	r3, #2
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4013      	ands	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a5e:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004a64:	4b30      	ldr	r3, [pc, #192]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4013      	ands	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a88:	4a27      	ldr	r2, [pc, #156]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a8e:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004adc:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	fa22 f303 	lsr.w	r3, r2, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f47f ae78 	bne.w	80047e8 <HAL_GPIO_Init+0x10>
  }
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	48000400 	.word	0x48000400
 8004b14:	48000800 	.word	0x48000800
 8004b18:	48000c00 	.word	0x48000c00
 8004b1c:	48001000 	.word	0x48001000
 8004b20:	48001400 	.word	0x48001400
 8004b24:	48001800 	.word	0x48001800
 8004b28:	40010400 	.word	0x40010400

08004b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e001      	b.n	8004b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b6c:	787b      	ldrb	r3, [r7, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b78:	e002      	b.n	8004b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fc50 	bl	8002450 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40010400 	.word	0x40010400

08004bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e081      	b.n	8004cd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8a8 	bl	8004d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2224      	movs	r2, #36	; 0x24
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	e006      	b.n	8004c44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d104      	bne.n	8004c56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	ea42 0103 	orr.w	r1, r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	021a      	lsls	r2, r3, #8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e021      	b.n	8004d30 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2224      	movs	r2, #36	; 0x24
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0201 	bic.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f821 	bl	8004d4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	817b      	strh	r3, [r7, #10]
 8004d72:	460b      	mov	r3, r1
 8004d74:	813b      	strh	r3, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	f040 80f9 	bne.w	8004f7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_I2C_Mem_Write+0x34>
 8004d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0ed      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_I2C_Mem_Write+0x4e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0e6      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004db6:	f7ff fb8d 	bl	80044d4 <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2319      	movs	r3, #25
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 fac3 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0d1      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2221      	movs	r2, #33	; 0x21
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e00:	88f8      	ldrh	r0, [r7, #6]
 8004e02:	893a      	ldrh	r2, [r7, #8]
 8004e04:	8979      	ldrh	r1, [r7, #10]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	4603      	mov	r3, r0
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f9d3 	bl	80051bc <I2C_RequestMemoryWrite>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0a9      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2bff      	cmp	r3, #255	; 0xff
 8004e30:	d90e      	bls.n	8004e50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	22ff      	movs	r2, #255	; 0xff
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	8979      	ldrh	r1, [r7, #10]
 8004e40:	2300      	movs	r3, #0
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fba5 	bl	8005598 <I2C_TransferConfig>
 8004e4e:	e00f      	b.n	8004e70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	8979      	ldrh	r1, [r7, #10]
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fb94 	bl	8005598 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 faad 	bl	80053d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e07b      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d034      	beq.n	8004f28 <HAL_I2C_Mem_Write+0x1c8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d130      	bne.n	8004f28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2180      	movs	r1, #128	; 0x80
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fa3f 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e04d      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2bff      	cmp	r3, #255	; 0xff
 8004ee8:	d90e      	bls.n	8004f08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	22ff      	movs	r2, #255	; 0xff
 8004eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	8979      	ldrh	r1, [r7, #10]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fb49 	bl	8005598 <I2C_TransferConfig>
 8004f06:	e00f      	b.n	8004f28 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	8979      	ldrh	r1, [r7, #10]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fb38 	bl	8005598 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d19e      	bne.n	8004e70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fa8c 	bl	8005454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e01a      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_I2C_Mem_Write+0x224>)
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	fe00e800 	.word	0xfe00e800

08004f88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	4608      	mov	r0, r1
 8004f92:	4611      	mov	r1, r2
 8004f94:	461a      	mov	r2, r3
 8004f96:	4603      	mov	r3, r0
 8004f98:	817b      	strh	r3, [r7, #10]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	813b      	strh	r3, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	f040 80fd 	bne.w	80051aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_I2C_Mem_Read+0x34>
 8004fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d105      	bne.n	8004fc8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0f1      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_I2C_Mem_Read+0x4e>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e0ea      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fde:	f7ff fa79 	bl	80044d4 <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	2319      	movs	r3, #25
 8004fea:	2201      	movs	r2, #1
 8004fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f9af 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0d5      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2222      	movs	r2, #34	; 0x22
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005028:	88f8      	ldrh	r0, [r7, #6]
 800502a:	893a      	ldrh	r2, [r7, #8]
 800502c:	8979      	ldrh	r1, [r7, #10]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	4603      	mov	r3, r0
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f913 	bl	8005264 <I2C_RequestMemoryRead>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0ad      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	2bff      	cmp	r3, #255	; 0xff
 8005058:	d90e      	bls.n	8005078 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	22ff      	movs	r2, #255	; 0xff
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005064:	b2da      	uxtb	r2, r3
 8005066:	8979      	ldrh	r1, [r7, #10]
 8005068:	4b52      	ldr	r3, [pc, #328]	; (80051b4 <HAL_I2C_Mem_Read+0x22c>)
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fa91 	bl	8005598 <I2C_TransferConfig>
 8005076:	e00f      	b.n	8005098 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	b2da      	uxtb	r2, r3
 8005088:	8979      	ldrh	r1, [r7, #10]
 800508a:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <HAL_I2C_Mem_Read+0x22c>)
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fa80 	bl	8005598 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	2200      	movs	r2, #0
 80050a0:	2104      	movs	r1, #4
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f956 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e07c      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d034      	beq.n	8005158 <HAL_I2C_Mem_Read+0x1d0>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d130      	bne.n	8005158 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f927 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e04d      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2bff      	cmp	r3, #255	; 0xff
 8005118:	d90e      	bls.n	8005138 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	8979      	ldrh	r1, [r7, #10]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fa31 	bl	8005598 <I2C_TransferConfig>
 8005136:	e00f      	b.n	8005158 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	b2da      	uxtb	r2, r3
 8005148:	8979      	ldrh	r1, [r7, #10]
 800514a:	2300      	movs	r3, #0
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fa20 	bl	8005598 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d19a      	bne.n	8005098 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f974 	bl	8005454 <I2C_WaitOnSTOPFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e01a      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2220      	movs	r2, #32
 800517c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_I2C_Mem_Read+0x230>)
 800518a:	400b      	ands	r3, r1
 800518c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
  }
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	80002400 	.word	0x80002400
 80051b8:	fe00e800 	.word	0xfe00e800

080051bc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	817b      	strh	r3, [r7, #10]
 80051ce:	460b      	mov	r3, r1
 80051d0:	813b      	strh	r3, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	8979      	ldrh	r1, [r7, #10]
 80051dc:	4b20      	ldr	r3, [pc, #128]	; (8005260 <I2C_RequestMemoryWrite+0xa4>)
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f9d7 	bl	8005598 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f8f0 	bl	80053d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e02c      	b.n	8005258 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005204:	893b      	ldrh	r3, [r7, #8]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
 800520e:	e015      	b.n	800523c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005210:	893b      	ldrh	r3, [r7, #8]
 8005212:	0a1b      	lsrs	r3, r3, #8
 8005214:	b29b      	uxth	r3, r3
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	69b9      	ldr	r1, [r7, #24]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f8d6 	bl	80053d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e012      	b.n	8005258 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005232:	893b      	ldrh	r3, [r7, #8]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2200      	movs	r2, #0
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f884 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	80002000 	.word	0x80002000

08005264 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	4608      	mov	r0, r1
 800526e:	4611      	mov	r1, r2
 8005270:	461a      	mov	r2, r3
 8005272:	4603      	mov	r3, r0
 8005274:	817b      	strh	r3, [r7, #10]
 8005276:	460b      	mov	r3, r1
 8005278:	813b      	strh	r3, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	8979      	ldrh	r1, [r7, #10]
 8005284:	4b20      	ldr	r3, [pc, #128]	; (8005308 <I2C_RequestMemoryRead+0xa4>)
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	2300      	movs	r3, #0
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f984 	bl	8005598 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	69b9      	ldr	r1, [r7, #24]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f89d 	bl	80053d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e02c      	b.n	80052fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d105      	bne.n	80052b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052aa:	893b      	ldrh	r3, [r7, #8]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
 80052b4:	e015      	b.n	80052e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	69b9      	ldr	r1, [r7, #24]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f883 	bl	80053d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e012      	b.n	80052fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052d8:	893b      	ldrh	r3, [r7, #8]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2140      	movs	r1, #64	; 0x40
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f831 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	80002000 	.word	0x80002000

0800530c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d103      	bne.n	800532a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d007      	beq.n	8005348 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	619a      	str	r2, [r3, #24]
  }
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005364:	e022      	b.n	80053ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536c:	d01e      	beq.n	80053ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7ff f8b1 	bl	80044d4 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d113      	bne.n	80053ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e00f      	b.n	80053cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4013      	ands	r3, r2
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d0cd      	beq.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053e0:	e02c      	b.n	800543c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f870 	bl	80054cc <I2C_IsAcknowledgeFailed>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e02a      	b.n	800544c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d01e      	beq.n	800543c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7ff f869 	bl	80044d4 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d113      	bne.n	800543c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	f043 0220 	orr.w	r2, r3, #32
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e007      	b.n	800544c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d1cb      	bne.n	80053e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005460:	e028      	b.n	80054b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f830 	bl	80054cc <I2C_IsAcknowledgeFailed>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e026      	b.n	80054c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005476:	f7ff f82d 	bl	80044d4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	d302      	bcc.n	800548c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d113      	bne.n	80054b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d1cf      	bne.n	8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d151      	bne.n	800558a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e6:	e022      	b.n	800552e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d01e      	beq.n	800552e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f0:	f7fe fff0 	bl	80044d4 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <I2C_IsAcknowledgeFailed+0x3a>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d113      	bne.n	800552e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e02e      	b.n	800558c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b20      	cmp	r3, #32
 800553a:	d1d5      	bne.n	80054e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2210      	movs	r2, #16
 8005542:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2220      	movs	r2, #32
 800554a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff fedd 	bl	800530c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6859      	ldr	r1, [r3, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <I2C_IsAcknowledgeFailed+0xc8>)
 800555e:	400b      	ands	r3, r1
 8005560:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	fe00e800 	.word	0xfe00e800

08005598 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	817b      	strh	r3, [r7, #10]
 80055a6:	4613      	mov	r3, r2
 80055a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	0d5b      	lsrs	r3, r3, #21
 80055b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <I2C_TransferConfig+0x58>)
 80055ba:	430b      	orrs	r3, r1
 80055bc:	43db      	mvns	r3, r3
 80055be:	ea02 0103 	and.w	r1, r2, r3
 80055c2:	897b      	ldrh	r3, [r7, #10]
 80055c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80055c8:	7a7b      	ldrb	r3, [r7, #9]
 80055ca:	041b      	lsls	r3, r3, #16
 80055cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	431a      	orrs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	03ff63ff 	.word	0x03ff63ff

080055f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b20      	cmp	r3, #32
 8005608:	d138      	bne.n	800567c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005614:	2302      	movs	r3, #2
 8005616:	e032      	b.n	800567e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	; 0x24
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40007000 	.word	0x40007000

080056a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b6:	d130      	bne.n	800571a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b8:	4b23      	ldr	r3, [pc, #140]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c4:	d038      	beq.n	8005738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056c6:	4b20      	ldr	r3, [pc, #128]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2232      	movs	r2, #50	; 0x32
 80056dc:	fb02 f303 	mul.w	r3, r2, r3
 80056e0:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	0c9b      	lsrs	r3, r3, #18
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ec:	e002      	b.n	80056f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056f4:	4b14      	ldr	r3, [pc, #80]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005700:	d102      	bne.n	8005708 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f2      	bne.n	80056ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005708:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005714:	d110      	bne.n	8005738 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e00f      	b.n	800573a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005726:	d007      	beq.n	8005738 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005728:	4b07      	ldr	r3, [pc, #28]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005730:	4a05      	ldr	r2, [pc, #20]	; (8005748 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005736:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40007000 	.word	0x40007000
 800574c:	2000000c 	.word	0x2000000c
 8005750:	431bde83 	.word	0x431bde83

08005754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e3d4      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005766:	4ba1      	ldr	r3, [pc, #644]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 030c 	and.w	r3, r3, #12
 800576e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005770:	4b9e      	ldr	r3, [pc, #632]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0310 	and.w	r3, r3, #16
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80e4 	beq.w	8005950 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_RCC_OscConfig+0x4a>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b0c      	cmp	r3, #12
 8005792:	f040 808b 	bne.w	80058ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 8087 	bne.w	80058ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800579e:	4b93      	ldr	r3, [pc, #588]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_RCC_OscConfig+0x62>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e3ac      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	4b8c      	ldr	r3, [pc, #560]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <HAL_RCC_OscConfig+0x7c>
 80057c6:	4b89      	ldr	r3, [pc, #548]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ce:	e005      	b.n	80057dc <HAL_RCC_OscConfig+0x88>
 80057d0:	4b86      	ldr	r3, [pc, #536]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d6:	091b      	lsrs	r3, r3, #4
 80057d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057dc:	4293      	cmp	r3, r2
 80057de:	d223      	bcs.n	8005828 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fd41 	bl	800626c <RCC_SetFlashLatencyFromMSIRange>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e38d      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057f4:	4b7d      	ldr	r3, [pc, #500]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a7c      	ldr	r2, [pc, #496]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80057fa:	f043 0308 	orr.w	r3, r3, #8
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4b7a      	ldr	r3, [pc, #488]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	4977      	ldr	r1, [pc, #476]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 800580e:	4313      	orrs	r3, r2
 8005810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005812:	4b76      	ldr	r3, [pc, #472]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	4972      	ldr	r1, [pc, #456]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005822:	4313      	orrs	r3, r2
 8005824:	604b      	str	r3, [r1, #4]
 8005826:	e025      	b.n	8005874 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005828:	4b70      	ldr	r3, [pc, #448]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6f      	ldr	r2, [pc, #444]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 800582e:	f043 0308 	orr.w	r3, r3, #8
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	4b6d      	ldr	r3, [pc, #436]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	496a      	ldr	r1, [pc, #424]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005842:	4313      	orrs	r3, r2
 8005844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005846:	4b69      	ldr	r3, [pc, #420]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	4965      	ldr	r1, [pc, #404]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d109      	bne.n	8005874 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fd01 	bl	800626c <RCC_SetFlashLatencyFromMSIRange>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e34d      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005874:	f000 fc36 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 8005878:	4602      	mov	r2, r0
 800587a:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	495a      	ldr	r1, [pc, #360]	; (80059f0 <HAL_RCC_OscConfig+0x29c>)
 8005886:	5ccb      	ldrb	r3, [r1, r3]
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
 8005890:	4a58      	ldr	r2, [pc, #352]	; (80059f4 <HAL_RCC_OscConfig+0x2a0>)
 8005892:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005894:	4b58      	ldr	r3, [pc, #352]	; (80059f8 <HAL_RCC_OscConfig+0x2a4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fdcb 	bl	8004434 <HAL_InitTick>
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d052      	beq.n	800594e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	e331      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d032      	beq.n	800591a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058b4:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a4c      	ldr	r2, [pc, #304]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058c0:	f7fe fe08 	bl	80044d4 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058c8:	f7fe fe04 	bl	80044d4 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e31a      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058da:	4b44      	ldr	r3, [pc, #272]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a40      	ldr	r2, [pc, #256]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80058ec:	f043 0308 	orr.w	r3, r3, #8
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	4b3e      	ldr	r3, [pc, #248]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	493b      	ldr	r1, [pc, #236]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005900:	4313      	orrs	r3, r2
 8005902:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005904:	4b39      	ldr	r3, [pc, #228]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	4936      	ldr	r1, [pc, #216]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005914:	4313      	orrs	r3, r2
 8005916:	604b      	str	r3, [r1, #4]
 8005918:	e01a      	b.n	8005950 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800591a:	4b34      	ldr	r3, [pc, #208]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a33      	ldr	r2, [pc, #204]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005926:	f7fe fdd5 	bl	80044d4 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800592e:	f7fe fdd1 	bl	80044d4 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e2e7      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005940:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f0      	bne.n	800592e <HAL_RCC_OscConfig+0x1da>
 800594c:	e000      	b.n	8005950 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800594e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d074      	beq.n	8005a46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b08      	cmp	r3, #8
 8005960:	d005      	beq.n	800596e <HAL_RCC_OscConfig+0x21a>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d10e      	bne.n	8005986 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b03      	cmp	r3, #3
 800596c:	d10b      	bne.n	8005986 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596e:	4b1f      	ldr	r3, [pc, #124]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d064      	beq.n	8005a44 <HAL_RCC_OscConfig+0x2f0>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d160      	bne.n	8005a44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e2c4      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x24a>
 8005990:	4b16      	ldr	r3, [pc, #88]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 8005996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e01d      	b.n	80059da <HAL_RCC_OscConfig+0x286>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a6:	d10c      	bne.n	80059c2 <HAL_RCC_OscConfig+0x26e>
 80059a8:	4b10      	ldr	r3, [pc, #64]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0f      	ldr	r2, [pc, #60]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	e00b      	b.n	80059da <HAL_RCC_OscConfig+0x286>
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4b07      	ldr	r3, [pc, #28]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a06      	ldr	r2, [pc, #24]	; (80059ec <HAL_RCC_OscConfig+0x298>)
 80059d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01c      	beq.n	8005a1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fe fd77 	bl	80044d4 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e8:	e011      	b.n	8005a0e <HAL_RCC_OscConfig+0x2ba>
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000
 80059f0:	080111b4 	.word	0x080111b4
 80059f4:	2000000c 	.word	0x2000000c
 80059f8:	20000070 	.word	0x20000070
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059fc:	f7fe fd6a 	bl	80044d4 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b64      	cmp	r3, #100	; 0x64
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e280      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a0e:	4baf      	ldr	r3, [pc, #700]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x2a8>
 8005a1a:	e014      	b.n	8005a46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1c:	f7fe fd5a 	bl	80044d4 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a24:	f7fe fd56 	bl	80044d4 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b64      	cmp	r3, #100	; 0x64
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e26c      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a36:	4ba5      	ldr	r3, [pc, #660]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f0      	bne.n	8005a24 <HAL_RCC_OscConfig+0x2d0>
 8005a42:	e000      	b.n	8005a46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d060      	beq.n	8005b14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_OscConfig+0x310>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	d119      	bne.n	8005a92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d116      	bne.n	8005a92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a64:	4b99      	ldr	r3, [pc, #612]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_OscConfig+0x328>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e249      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7c:	4b93      	ldr	r3, [pc, #588]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	061b      	lsls	r3, r3, #24
 8005a8a:	4990      	ldr	r1, [pc, #576]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a90:	e040      	b.n	8005b14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d023      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a9a:	4b8c      	ldr	r3, [pc, #560]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a8b      	ldr	r2, [pc, #556]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa6:	f7fe fd15 	bl	80044d4 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aae:	f7fe fd11 	bl	80044d4 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e227      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac0:	4b82      	ldr	r3, [pc, #520]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005acc:	4b7f      	ldr	r3, [pc, #508]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	061b      	lsls	r3, r3, #24
 8005ada:	497c      	ldr	r1, [pc, #496]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	604b      	str	r3, [r1, #4]
 8005ae0:	e018      	b.n	8005b14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ae2:	4b7a      	ldr	r3, [pc, #488]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a79      	ldr	r2, [pc, #484]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aee:	f7fe fcf1 	bl	80044d4 <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af6:	f7fe fced 	bl	80044d4 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e203      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b08:	4b70      	ldr	r3, [pc, #448]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f0      	bne.n	8005af6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d03c      	beq.n	8005b9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01c      	beq.n	8005b62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b28:	4b68      	ldr	r3, [pc, #416]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2e:	4a67      	ldr	r2, [pc, #412]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fe fccc 	bl	80044d4 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b40:	f7fe fcc8 	bl	80044d4 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e1de      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b52:	4b5e      	ldr	r3, [pc, #376]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ef      	beq.n	8005b40 <HAL_RCC_OscConfig+0x3ec>
 8005b60:	e01b      	b.n	8005b9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b62:	4b5a      	ldr	r3, [pc, #360]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b68:	4a58      	ldr	r2, [pc, #352]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b72:	f7fe fcaf 	bl	80044d4 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b7a:	f7fe fcab 	bl	80044d4 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e1c1      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b8c:	4b4f      	ldr	r3, [pc, #316]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1ef      	bne.n	8005b7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80a6 	beq.w	8005cf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005bac:	4b47      	ldr	r3, [pc, #284]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10d      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb8:	4b44      	ldr	r3, [pc, #272]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbc:	4a43      	ldr	r2, [pc, #268]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc4:	4b41      	ldr	r3, [pc, #260]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd4:	4b3e      	ldr	r3, [pc, #248]	; (8005cd0 <HAL_RCC_OscConfig+0x57c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d118      	bne.n	8005c12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005be0:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <HAL_RCC_OscConfig+0x57c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a3a      	ldr	r2, [pc, #232]	; (8005cd0 <HAL_RCC_OscConfig+0x57c>)
 8005be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bec:	f7fe fc72 	bl	80044d4 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf4:	f7fe fc6e 	bl	80044d4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e184      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c06:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <HAL_RCC_OscConfig+0x57c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d108      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4d8>
 8005c1a:	4b2c      	ldr	r3, [pc, #176]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c2a:	e024      	b.n	8005c76 <HAL_RCC_OscConfig+0x522>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d110      	bne.n	8005c56 <HAL_RCC_OscConfig+0x502>
 8005c34:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c3c:	f043 0304 	orr.w	r3, r3, #4
 8005c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c44:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c54:	e00f      	b.n	8005c76 <HAL_RCC_OscConfig+0x522>
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6c:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c6e:	f023 0304 	bic.w	r3, r3, #4
 8005c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fe fc29 	bl	80044d4 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fe fc25 	bl	80044d4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e139      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <HAL_RCC_OscConfig+0x578>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0ed      	beq.n	8005c86 <HAL_RCC_OscConfig+0x532>
 8005caa:	e01a      	b.n	8005ce2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fe fc12 	bl	80044d4 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cb2:	e00f      	b.n	8005cd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb4:	f7fe fc0e 	bl	80044d4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d906      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e122      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
 8005cca:	bf00      	nop
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cd4:	4b90      	ldr	r3, [pc, #576]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e8      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ce2:	7ffb      	ldrb	r3, [r7, #31]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d105      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce8:	4b8b      	ldr	r3, [pc, #556]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	4a8a      	ldr	r2, [pc, #552]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8108 	beq.w	8005f0e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	f040 80d0 	bne.w	8005ea8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d08:	4b83      	ldr	r3, [pc, #524]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f003 0203 	and.w	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d130      	bne.n	8005d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	3b01      	subs	r3, #1
 8005d28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d127      	bne.n	8005d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d11f      	bne.n	8005d7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d48:	2a07      	cmp	r2, #7
 8005d4a:	bf14      	ite	ne
 8005d4c:	2201      	movne	r2, #1
 8005d4e:	2200      	moveq	r2, #0
 8005d50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d113      	bne.n	8005d7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	3b01      	subs	r3, #1
 8005d64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	3b01      	subs	r3, #1
 8005d78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d06e      	beq.n	8005e5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b0c      	cmp	r3, #12
 8005d82:	d069      	beq.n	8005e58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d84:	4b64      	ldr	r3, [pc, #400]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d105      	bne.n	8005d9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d90:	4b61      	ldr	r3, [pc, #388]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0b7      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005da0:	4b5d      	ldr	r3, [pc, #372]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a5c      	ldr	r2, [pc, #368]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005daa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dac:	f7fe fb92 	bl	80044d4 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db4:	f7fe fb8e 	bl	80044d4 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e0a4      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dc6:	4b54      	ldr	r3, [pc, #336]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f0      	bne.n	8005db4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd2:	4b51      	ldr	r3, [pc, #324]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	4b51      	ldr	r3, [pc, #324]	; (8005f1c <HAL_RCC_OscConfig+0x7c8>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005de2:	3a01      	subs	r2, #1
 8005de4:	0112      	lsls	r2, r2, #4
 8005de6:	4311      	orrs	r1, r2
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dec:	0212      	lsls	r2, r2, #8
 8005dee:	4311      	orrs	r1, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005df4:	0852      	lsrs	r2, r2, #1
 8005df6:	3a01      	subs	r2, #1
 8005df8:	0552      	lsls	r2, r2, #21
 8005dfa:	4311      	orrs	r1, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e00:	0852      	lsrs	r2, r2, #1
 8005e02:	3a01      	subs	r2, #1
 8005e04:	0652      	lsls	r2, r2, #25
 8005e06:	4311      	orrs	r1, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e0c:	0912      	lsrs	r2, r2, #4
 8005e0e:	0452      	lsls	r2, r2, #17
 8005e10:	430a      	orrs	r2, r1
 8005e12:	4941      	ldr	r1, [pc, #260]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e18:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a3e      	ldr	r2, [pc, #248]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e24:	4b3c      	ldr	r3, [pc, #240]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a3b      	ldr	r2, [pc, #236]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e30:	f7fe fb50 	bl	80044d4 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e38:	f7fe fb4c 	bl	80044d4 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e062      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e4a:	4b33      	ldr	r3, [pc, #204]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e56:	e05a      	b.n	8005f0e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e059      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e5c:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d152      	bne.n	8005f0e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e68:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e74:	4b28      	ldr	r3, [pc, #160]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e80:	f7fe fb28 	bl	80044d4 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fe fb24 	bl	80044d4 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e03a      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e9a:	4b1f      	ldr	r3, [pc, #124]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0f0      	beq.n	8005e88 <HAL_RCC_OscConfig+0x734>
 8005ea6:	e032      	b.n	8005f0e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	d02d      	beq.n	8005f0a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eae:	4b1a      	ldr	r3, [pc, #104]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eb8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005eba:	4b17      	ldr	r3, [pc, #92]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ec6:	4b14      	ldr	r3, [pc, #80]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005ecc:	f023 0303 	bic.w	r3, r3, #3
 8005ed0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ed2:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005ed8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee2:	f7fe faf7 	bl	80044d4 <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eea:	f7fe faf3 	bl	80044d4 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e009      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005efc:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <HAL_RCC_OscConfig+0x7c4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f0      	bne.n	8005eea <HAL_RCC_OscConfig+0x796>
 8005f08:	e001      	b.n	8005f0e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	f99d808c 	.word	0xf99d808c

08005f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0c8      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f34:	4b66      	ldr	r3, [pc, #408]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d910      	bls.n	8005f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f42:	4b63      	ldr	r3, [pc, #396]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f023 0207 	bic.w	r2, r3, #7
 8005f4a:	4961      	ldr	r1, [pc, #388]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f52:	4b5f      	ldr	r3, [pc, #380]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d001      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0b0      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d04c      	beq.n	800600a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d107      	bne.n	8005f88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f78:	4b56      	ldr	r3, [pc, #344]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d121      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e09e      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d107      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f90:	4b50      	ldr	r3, [pc, #320]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d115      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e092      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fa8:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e086      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fb8:	4b46      	ldr	r3, [pc, #280]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e07e      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fc8:	4b42      	ldr	r3, [pc, #264]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f023 0203 	bic.w	r2, r3, #3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	493f      	ldr	r1, [pc, #252]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fda:	f7fe fa7b 	bl	80044d4 <HAL_GetTick>
 8005fde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe2:	f7fe fa77 	bl	80044d4 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e066      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff8:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 020c 	and.w	r2, r3, #12
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	429a      	cmp	r2, r3
 8006008:	d1eb      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006016:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	492c      	ldr	r1, [pc, #176]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006024:	4313      	orrs	r3, r2
 8006026:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006028:	4b29      	ldr	r3, [pc, #164]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d210      	bcs.n	8006058 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006036:	4b26      	ldr	r3, [pc, #152]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 0207 	bic.w	r2, r3, #7
 800603e:	4924      	ldr	r1, [pc, #144]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4313      	orrs	r3, r2
 8006044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b22      	ldr	r3, [pc, #136]	; (80060d0 <HAL_RCC_ClockConfig+0x1b0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e036      	b.n	80060c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006064:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4918      	ldr	r1, [pc, #96]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006072:	4313      	orrs	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006082:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4910      	ldr	r1, [pc, #64]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006096:	f000 f825 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <HAL_RCC_ClockConfig+0x1b4>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490c      	ldr	r1, [pc, #48]	; (80060d8 <HAL_RCC_ClockConfig+0x1b8>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	fa22 f303 	lsr.w	r3, r2, r3
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80060b6:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe f9ba 	bl	8004434 <HAL_InitTick>
 80060c0:	4603      	mov	r3, r0
 80060c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80060c4:	7afb      	ldrb	r3, [r7, #11]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40022000 	.word	0x40022000
 80060d4:	40021000 	.word	0x40021000
 80060d8:	080111b4 	.word	0x080111b4
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	20000070 	.word	0x20000070

080060e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f2:	4b3e      	ldr	r3, [pc, #248]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
 80060fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060fc:	4b3b      	ldr	r3, [pc, #236]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x34>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b0c      	cmp	r3, #12
 8006110:	d121      	bne.n	8006156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d11e      	bne.n	8006156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006118:	4b34      	ldr	r3, [pc, #208]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d107      	bne.n	8006134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006124:	4b31      	ldr	r3, [pc, #196]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	e005      	b.n	8006140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006134:	4b2d      	ldr	r3, [pc, #180]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006140:	4a2b      	ldr	r2, [pc, #172]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10d      	bne.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006154:	e00a      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b04      	cmp	r3, #4
 800615a:	d102      	bne.n	8006162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800615c:	4b25      	ldr	r3, [pc, #148]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	e004      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b08      	cmp	r3, #8
 8006166:	d101      	bne.n	800616c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006168:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800616a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b0c      	cmp	r3, #12
 8006170:	d134      	bne.n	80061dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006172:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d003      	beq.n	800618a <HAL_RCC_GetSysClockFreq+0xa6>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d003      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0xac>
 8006188:	e005      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800618a:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800618c:	617b      	str	r3, [r7, #20]
      break;
 800618e:	e005      	b.n	800619c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006190:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006192:	617b      	str	r3, [r7, #20]
      break;
 8006194:	e002      	b.n	800619c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	617b      	str	r3, [r7, #20]
      break;
 800619a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800619c:	4b13      	ldr	r3, [pc, #76]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	3301      	adds	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80061aa:	4b10      	ldr	r3, [pc, #64]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	0a1b      	lsrs	r3, r3, #8
 80061b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	fb02 f203 	mul.w	r2, r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <HAL_RCC_GetSysClockFreq+0x108>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	0e5b      	lsrs	r3, r3, #25
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	3301      	adds	r3, #1
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80061dc:	69bb      	ldr	r3, [r7, #24]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000
 80061f0:	080111cc 	.word	0x080111cc
 80061f4:	00f42400 	.word	0x00f42400
 80061f8:	007a1200 	.word	0x007a1200

080061fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006200:	4b03      	ldr	r3, [pc, #12]	; (8006210 <HAL_RCC_GetHCLKFreq+0x14>)
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	2000000c 	.word	0x2000000c

08006214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006218:	f7ff fff0 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 800621c:	4602      	mov	r2, r0
 800621e:	4b06      	ldr	r3, [pc, #24]	; (8006238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	4904      	ldr	r1, [pc, #16]	; (800623c <HAL_RCC_GetPCLK1Freq+0x28>)
 800622a:	5ccb      	ldrb	r3, [r1, r3]
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006234:	4618      	mov	r0, r3
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40021000 	.word	0x40021000
 800623c:	080111c4 	.word	0x080111c4

08006240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006244:	f7ff ffda 	bl	80061fc <HAL_RCC_GetHCLKFreq>
 8006248:	4602      	mov	r2, r0
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	0adb      	lsrs	r3, r3, #11
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	4904      	ldr	r1, [pc, #16]	; (8006268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006256:	5ccb      	ldrb	r3, [r1, r3]
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40021000 	.word	0x40021000
 8006268:	080111c4 	.word	0x080111c4

0800626c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006278:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800627a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006284:	f7ff fa02 	bl	800568c <HAL_PWREx_GetVoltageRange>
 8006288:	6178      	str	r0, [r7, #20]
 800628a:	e014      	b.n	80062b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800628c:	4b25      	ldr	r3, [pc, #148]	; (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800628e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006290:	4a24      	ldr	r2, [pc, #144]	; (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006296:	6593      	str	r3, [r2, #88]	; 0x58
 8006298:	4b22      	ldr	r3, [pc, #136]	; (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800629a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80062a4:	f7ff f9f2 	bl	800568c <HAL_PWREx_GetVoltageRange>
 80062a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062bc:	d10b      	bne.n	80062d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b80      	cmp	r3, #128	; 0x80
 80062c2:	d919      	bls.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2ba0      	cmp	r3, #160	; 0xa0
 80062c8:	d902      	bls.n	80062d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062ca:	2302      	movs	r3, #2
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	e013      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062d0:	2301      	movs	r3, #1
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	e010      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d902      	bls.n	80062e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80062dc:	2303      	movs	r3, #3
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	e00a      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d102      	bne.n	80062ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062e8:	2302      	movs	r3, #2
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e004      	b.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b70      	cmp	r3, #112	; 0x70
 80062f2:	d101      	bne.n	80062f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062f4:	2301      	movs	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062f8:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 0207 	bic.w	r2, r3, #7
 8006300:	4909      	ldr	r1, [pc, #36]	; (8006328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	429a      	cmp	r2, r3
 8006314:	d001      	beq.n	800631a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40021000 	.word	0x40021000
 8006328:	40022000 	.word	0x40022000

0800632c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006334:	2300      	movs	r3, #0
 8006336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006338:	2300      	movs	r3, #0
 800633a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006344:	2b00      	cmp	r3, #0
 8006346:	d041      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006350:	d02a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006352:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006356:	d824      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800635c:	d008      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800635e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006362:	d81e      	bhi.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800636c:	d010      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800636e:	e018      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006370:	4b86      	ldr	r3, [pc, #536]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4a85      	ldr	r2, [pc, #532]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800637c:	e015      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fabb 	bl	8006900 <RCCEx_PLLSAI1_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800638e:	e00c      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3320      	adds	r3, #32
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fba6 	bl	8006ae8 <RCCEx_PLLSAI2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	74fb      	strb	r3, [r7, #19]
      break;
 80063a6:	e000      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80063a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063aa:	7cfb      	ldrb	r3, [r7, #19]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063b0:	4b76      	ldr	r3, [pc, #472]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063be:	4973      	ldr	r1, [pc, #460]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063c6:	e001      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	7cfb      	ldrb	r3, [r7, #19]
 80063ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d041      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063e0:	d02a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80063e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063e6:	d824      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ec:	d008      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063f2:	d81e      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80063f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063fc:	d010      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063fe:	e018      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006400:	4b62      	ldr	r3, [pc, #392]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4a61      	ldr	r2, [pc, #388]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800640c:	e015      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3304      	adds	r3, #4
 8006412:	2100      	movs	r1, #0
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fa73 	bl	8006900 <RCCEx_PLLSAI1_Config>
 800641a:	4603      	mov	r3, r0
 800641c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800641e:	e00c      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3320      	adds	r3, #32
 8006424:	2100      	movs	r1, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fb5e 	bl	8006ae8 <RCCEx_PLLSAI2_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006430:	e003      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	74fb      	strb	r3, [r7, #19]
      break;
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643a:	7cfb      	ldrb	r3, [r7, #19]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006440:	4b52      	ldr	r3, [pc, #328]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644e:	494f      	ldr	r1, [pc, #316]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006456:	e001      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006458:	7cfb      	ldrb	r3, [r7, #19]
 800645a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80a0 	beq.w	80065aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800646a:	2300      	movs	r3, #0
 800646c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800646e:	4b47      	ldr	r3, [pc, #284]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800647a:	2301      	movs	r3, #1
 800647c:	e000      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800647e:	2300      	movs	r3, #0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00d      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006484:	4b41      	ldr	r3, [pc, #260]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006488:	4a40      	ldr	r2, [pc, #256]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800648a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648e:	6593      	str	r3, [r2, #88]	; 0x58
 8006490:	4b3e      	ldr	r3, [pc, #248]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800649c:	2301      	movs	r3, #1
 800649e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064a0:	4b3b      	ldr	r3, [pc, #236]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a3a      	ldr	r2, [pc, #232]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ac:	f7fe f812 	bl	80044d4 <HAL_GetTick>
 80064b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064b2:	e009      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b4:	f7fe f80e 	bl	80044d4 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d902      	bls.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	74fb      	strb	r3, [r7, #19]
        break;
 80064c6:	e005      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064c8:	4b31      	ldr	r3, [pc, #196]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0ef      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80064d4:	7cfb      	ldrb	r3, [r7, #19]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d15c      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064da:	4b2c      	ldr	r3, [pc, #176]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01f      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d019      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064f8:	4b24      	ldr	r3, [pc, #144]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006502:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006504:	4b21      	ldr	r3, [pc, #132]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650a:	4a20      	ldr	r2, [pc, #128]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006514:	4b1d      	ldr	r3, [pc, #116]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800651c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006524:	4a19      	ldr	r2, [pc, #100]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d016      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006536:	f7fd ffcd 	bl	80044d4 <HAL_GetTick>
 800653a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800653c:	e00b      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653e:	f7fd ffc9 	bl	80044d4 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f241 3288 	movw	r2, #5000	; 0x1388
 800654c:	4293      	cmp	r3, r2
 800654e:	d902      	bls.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	74fb      	strb	r3, [r7, #19]
            break;
 8006554:	e006      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0ec      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006564:	7cfb      	ldrb	r3, [r7, #19]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10c      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800656a:	4b08      	ldr	r3, [pc, #32]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800657a:	4904      	ldr	r1, [pc, #16]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006582:	e009      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006584:	7cfb      	ldrb	r3, [r7, #19]
 8006586:	74bb      	strb	r3, [r7, #18]
 8006588:	e006      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000
 8006590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	7cfb      	ldrb	r3, [r7, #19]
 8006596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006598:	7c7b      	ldrb	r3, [r7, #17]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d105      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800659e:	4b9e      	ldr	r3, [pc, #632]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a2:	4a9d      	ldr	r2, [pc, #628]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065b6:	4b98      	ldr	r3, [pc, #608]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065bc:	f023 0203 	bic.w	r2, r3, #3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	4994      	ldr	r1, [pc, #592]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065d8:	4b8f      	ldr	r3, [pc, #572]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	f023 020c 	bic.w	r2, r3, #12
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	498c      	ldr	r1, [pc, #560]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065fa:	4b87      	ldr	r3, [pc, #540]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	4983      	ldr	r1, [pc, #524]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800661c:	4b7e      	ldr	r3, [pc, #504]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	497b      	ldr	r1, [pc, #492]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800663e:	4b76      	ldr	r3, [pc, #472]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664c:	4972      	ldr	r1, [pc, #456]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006660:	4b6d      	ldr	r3, [pc, #436]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	496a      	ldr	r1, [pc, #424]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006682:	4b65      	ldr	r3, [pc, #404]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006690:	4961      	ldr	r1, [pc, #388]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066a4:	4b5c      	ldr	r3, [pc, #368]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b2:	4959      	ldr	r1, [pc, #356]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066c6:	4b54      	ldr	r3, [pc, #336]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	4950      	ldr	r1, [pc, #320]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066e8:	4b4b      	ldr	r3, [pc, #300]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	4948      	ldr	r1, [pc, #288]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800670a:	4b43      	ldr	r3, [pc, #268]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006718:	493f      	ldr	r1, [pc, #252]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d028      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800672c:	4b3a      	ldr	r3, [pc, #232]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673a:	4937      	ldr	r1, [pc, #220]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800674c:	4b32      	ldr	r3, [pc, #200]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4a31      	ldr	r2, [pc, #196]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006756:	60d3      	str	r3, [r2, #12]
 8006758:	e011      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006762:	d10c      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3304      	adds	r3, #4
 8006768:	2101      	movs	r1, #1
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f8c8 	bl	8006900 <RCCEx_PLLSAI1_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006774:	7cfb      	ldrb	r3, [r7, #19]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800677a:	7cfb      	ldrb	r3, [r7, #19]
 800677c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d028      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800678a:	4b23      	ldr	r3, [pc, #140]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006798:	491f      	ldr	r1, [pc, #124]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a8:	d106      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b4:	60d3      	str	r3, [r2, #12]
 80067b6:	e011      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c0:	d10c      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3304      	adds	r3, #4
 80067c6:	2101      	movs	r1, #1
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 f899 	bl	8006900 <RCCEx_PLLSAI1_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067d2:	7cfb      	ldrb	r3, [r7, #19]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80067d8:	7cfb      	ldrb	r3, [r7, #19]
 80067da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02b      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067e8:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f6:	4908      	ldr	r1, [pc, #32]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006806:	d109      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a02      	ldr	r2, [pc, #8]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800680e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006812:	60d3      	str	r3, [r2, #12]
 8006814:	e014      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006816:	bf00      	nop
 8006818:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006824:	d10c      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3304      	adds	r3, #4
 800682a:	2101      	movs	r1, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f000 f867 	bl	8006900 <RCCEx_PLLSAI1_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006836:	7cfb      	ldrb	r3, [r7, #19]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800683c:	7cfb      	ldrb	r3, [r7, #19]
 800683e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d02f      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800684c:	4b2b      	ldr	r3, [pc, #172]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685a:	4928      	ldr	r1, [pc, #160]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686a:	d10d      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3304      	adds	r3, #4
 8006870:	2102      	movs	r1, #2
 8006872:	4618      	mov	r0, r3
 8006874:	f000 f844 	bl	8006900 <RCCEx_PLLSAI1_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800687c:	7cfb      	ldrb	r3, [r7, #19]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d014      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006882:	7cfb      	ldrb	r3, [r7, #19]
 8006884:	74bb      	strb	r3, [r7, #18]
 8006886:	e011      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800688c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006890:	d10c      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3320      	adds	r3, #32
 8006896:	2102      	movs	r1, #2
 8006898:	4618      	mov	r0, r3
 800689a:	f000 f925 	bl	8006ae8 <RCCEx_PLLSAI2_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068a2:	7cfb      	ldrb	r3, [r7, #19]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80068a8:	7cfb      	ldrb	r3, [r7, #19]
 80068aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c6:	490d      	ldr	r1, [pc, #52]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068da:	4b08      	ldr	r3, [pc, #32]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ea:	4904      	ldr	r1, [pc, #16]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40021000 	.word	0x40021000

08006900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800690e:	4b75      	ldr	r3, [pc, #468]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d018      	beq.n	800694c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800691a:	4b72      	ldr	r3, [pc, #456]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0203 	and.w	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d10d      	bne.n	8006946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
       ||
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006932:	4b6c      	ldr	r3, [pc, #432]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
       ||
 8006942:	429a      	cmp	r2, r3
 8006944:	d047      	beq.n	80069d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	73fb      	strb	r3, [r7, #15]
 800694a:	e044      	b.n	80069d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d018      	beq.n	8006986 <RCCEx_PLLSAI1_Config+0x86>
 8006954:	2b03      	cmp	r3, #3
 8006956:	d825      	bhi.n	80069a4 <RCCEx_PLLSAI1_Config+0xa4>
 8006958:	2b01      	cmp	r3, #1
 800695a:	d002      	beq.n	8006962 <RCCEx_PLLSAI1_Config+0x62>
 800695c:	2b02      	cmp	r3, #2
 800695e:	d009      	beq.n	8006974 <RCCEx_PLLSAI1_Config+0x74>
 8006960:	e020      	b.n	80069a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006962:	4b60      	ldr	r3, [pc, #384]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11d      	bne.n	80069aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006972:	e01a      	b.n	80069aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006974:	4b5b      	ldr	r3, [pc, #364]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697c:	2b00      	cmp	r3, #0
 800697e:	d116      	bne.n	80069ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006984:	e013      	b.n	80069ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006986:	4b57      	ldr	r3, [pc, #348]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006992:	4b54      	ldr	r3, [pc, #336]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069a2:	e006      	b.n	80069b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
      break;
 80069a8:	e004      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069aa:	bf00      	nop
 80069ac:	e002      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069ae:	bf00      	nop
 80069b0:	e000      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10d      	bne.n	80069d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069ba:	4b4a      	ldr	r3, [pc, #296]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	430b      	orrs	r3, r1
 80069d0:	4944      	ldr	r1, [pc, #272]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d17d      	bne.n	8006ad8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069dc:	4b41      	ldr	r3, [pc, #260]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a40      	ldr	r2, [pc, #256]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e8:	f7fd fd74 	bl	80044d4 <HAL_GetTick>
 80069ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069ee:	e009      	b.n	8006a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069f0:	f7fd fd70 	bl	80044d4 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d902      	bls.n	8006a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	73fb      	strb	r3, [r7, #15]
        break;
 8006a02:	e005      	b.n	8006a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a04:	4b37      	ldr	r3, [pc, #220]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1ef      	bne.n	80069f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d160      	bne.n	8006ad8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d111      	bne.n	8006a40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a1c:	4b31      	ldr	r3, [pc, #196]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6892      	ldr	r2, [r2, #8]
 8006a2c:	0211      	lsls	r1, r2, #8
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68d2      	ldr	r2, [r2, #12]
 8006a32:	0912      	lsrs	r2, r2, #4
 8006a34:	0452      	lsls	r2, r2, #17
 8006a36:	430a      	orrs	r2, r1
 8006a38:	492a      	ldr	r1, [pc, #168]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	610b      	str	r3, [r1, #16]
 8006a3e:	e027      	b.n	8006a90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d112      	bne.n	8006a6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a46:	4b27      	ldr	r3, [pc, #156]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6892      	ldr	r2, [r2, #8]
 8006a56:	0211      	lsls	r1, r2, #8
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6912      	ldr	r2, [r2, #16]
 8006a5c:	0852      	lsrs	r2, r2, #1
 8006a5e:	3a01      	subs	r2, #1
 8006a60:	0552      	lsls	r2, r2, #21
 8006a62:	430a      	orrs	r2, r1
 8006a64:	491f      	ldr	r1, [pc, #124]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	610b      	str	r3, [r1, #16]
 8006a6a:	e011      	b.n	8006a90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6892      	ldr	r2, [r2, #8]
 8006a7c:	0211      	lsls	r1, r2, #8
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6952      	ldr	r2, [r2, #20]
 8006a82:	0852      	lsrs	r2, r2, #1
 8006a84:	3a01      	subs	r2, #1
 8006a86:	0652      	lsls	r2, r2, #25
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	4916      	ldr	r1, [pc, #88]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a90:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9c:	f7fd fd1a 	bl	80044d4 <HAL_GetTick>
 8006aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aa2:	e009      	b.n	8006ab8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aa4:	f7fd fd16 	bl	80044d4 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d902      	bls.n	8006ab8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8006ab6:	e005      	b.n	8006ac4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ef      	beq.n	8006aa4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	4904      	ldr	r1, [pc, #16]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40021000 	.word	0x40021000

08006ae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006af6:	4b6a      	ldr	r3, [pc, #424]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d018      	beq.n	8006b34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b02:	4b67      	ldr	r3, [pc, #412]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0203 	and.w	r2, r3, #3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d10d      	bne.n	8006b2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
       ||
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b1a:	4b61      	ldr	r3, [pc, #388]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	091b      	lsrs	r3, r3, #4
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
       ||
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d047      	beq.n	8006bbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	e044      	b.n	8006bbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d018      	beq.n	8006b6e <RCCEx_PLLSAI2_Config+0x86>
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d825      	bhi.n	8006b8c <RCCEx_PLLSAI2_Config+0xa4>
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d002      	beq.n	8006b4a <RCCEx_PLLSAI2_Config+0x62>
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d009      	beq.n	8006b5c <RCCEx_PLLSAI2_Config+0x74>
 8006b48:	e020      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b4a:	4b55      	ldr	r3, [pc, #340]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d11d      	bne.n	8006b92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b5a:	e01a      	b.n	8006b92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b5c:	4b50      	ldr	r3, [pc, #320]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d116      	bne.n	8006b96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b6c:	e013      	b.n	8006b96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b6e:	4b4c      	ldr	r3, [pc, #304]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10f      	bne.n	8006b9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b7a:	4b49      	ldr	r3, [pc, #292]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b8a:	e006      	b.n	8006b9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b90:	e004      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b92:	bf00      	nop
 8006b94:	e002      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b96:	bf00      	nop
 8006b98:	e000      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10d      	bne.n	8006bbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006ba2:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6819      	ldr	r1, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	4939      	ldr	r1, [pc, #228]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d167      	bne.n	8006c94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bc4:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a35      	ldr	r2, [pc, #212]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd0:	f7fd fc80 	bl	80044d4 <HAL_GetTick>
 8006bd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bd6:	e009      	b.n	8006bec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bd8:	f7fd fc7c 	bl	80044d4 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d902      	bls.n	8006bec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	73fb      	strb	r3, [r7, #15]
        break;
 8006bea:	e005      	b.n	8006bf8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bec:	4b2c      	ldr	r3, [pc, #176]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ef      	bne.n	8006bd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d14a      	bne.n	8006c94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d111      	bne.n	8006c28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c04:	4b26      	ldr	r3, [pc, #152]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6892      	ldr	r2, [r2, #8]
 8006c14:	0211      	lsls	r1, r2, #8
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68d2      	ldr	r2, [r2, #12]
 8006c1a:	0912      	lsrs	r2, r2, #4
 8006c1c:	0452      	lsls	r2, r2, #17
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	491f      	ldr	r1, [pc, #124]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	614b      	str	r3, [r1, #20]
 8006c26:	e011      	b.n	8006c4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6892      	ldr	r2, [r2, #8]
 8006c38:	0211      	lsls	r1, r2, #8
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6912      	ldr	r2, [r2, #16]
 8006c3e:	0852      	lsrs	r2, r2, #1
 8006c40:	3a01      	subs	r2, #1
 8006c42:	0652      	lsls	r2, r2, #25
 8006c44:	430a      	orrs	r2, r1
 8006c46:	4916      	ldr	r1, [pc, #88]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c58:	f7fd fc3c 	bl	80044d4 <HAL_GetTick>
 8006c5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c5e:	e009      	b.n	8006c74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c60:	f7fd fc38 	bl	80044d4 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d902      	bls.n	8006c74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	73fb      	strb	r3, [r7, #15]
          break;
 8006c72:	e005      	b.n	8006c80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0ef      	beq.n	8006c60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c86:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	4904      	ldr	r1, [pc, #16]	; (8006ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40021000 	.word	0x40021000

08006ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0be      	b.n	8006e34 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc6:	d009      	beq.n	8006cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	61da      	str	r2, [r3, #28]
 8006cce:	e005      	b.n	8006cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8cb 	bl	8006e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d16:	d902      	bls.n	8006d1e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e002      	b.n	8006d24 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006d2c:	d007      	beq.n	8006d3e <HAL_SPI_Init+0x9a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d36:	d002      	beq.n	8006d3e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d80:	ea42 0103 	orr.w	r1, r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9c:	d11b      	bne.n	8006dd6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dae:	d903      	bls.n	8006db8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
 8006db6:	e002      	b.n	8006dbe <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d107      	bne.n	8006dd6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	0c1b      	lsrs	r3, r3, #16
 8006ddc:	f003 0204 	and.w	r2, r3, #4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	f003 0310 	and.w	r3, r3, #16
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006dfc:	ea42 0103 	orr.w	r1, r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e16:	d105      	bne.n	8006e24 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	b292      	uxth	r2, r2
 8006e22:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e01a      	b.n	8006e84 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f81a 	bl	8006ea0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed4:	d112      	bne.n	8006efc <HAL_SPI_Receive+0x48>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10e      	bne.n	8006efc <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 f9bb 	bl	800726e <HAL_SPI_TransmitReceive>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	e1b4      	b.n	8007266 <HAL_SPI_Receive+0x3b2>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <HAL_SPI_Receive+0x56>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e1ad      	b.n	8007266 <HAL_SPI_Receive+0x3b2>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f12:	f7fd fadf 	bl	80044d4 <HAL_GetTick>
 8006f16:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d002      	beq.n	8006f2a <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
 8006f26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f28:	e194      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_SPI_Receive+0x82>
 8006f30:	88fb      	ldrh	r3, [r7, #6]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f3a:	e18b      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f86:	d118      	bne.n	8006fba <HAL_SPI_Receive+0x106>
  {
    SPI_RESET_CRC(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fa6:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fc2:	d908      	bls.n	8006fd6 <HAL_SPI_Receive+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	e007      	b.n	8006fe6 <HAL_SPI_Receive+0x132>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fe4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fee:	d10f      	bne.n	8007010 <HAL_SPI_Receive+0x15c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800700e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d007      	beq.n	800702e <HAL_SPI_Receive+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800702c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007036:	d867      	bhi.n	8007108 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007038:	e030      	b.n	800709c <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b01      	cmp	r3, #1
 8007046:	d117      	bne.n	8007078 <HAL_SPI_Receive+0x1c4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f103 020c 	add.w	r2, r3, #12
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007076:	e011      	b.n	800709c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007078:	f7fd fa2c 	bl	80044d4 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d803      	bhi.n	8007090 <HAL_SPI_Receive+0x1dc>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d102      	bne.n	8007096 <HAL_SPI_Receive+0x1e2>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	77fb      	strb	r3, [r7, #31]
          goto error;
 800709a:	e0db      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
    while (hspi->RxXferCount > 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1c8      	bne.n	800703a <HAL_SPI_Receive+0x186>
 80070a8:	e034      	b.n	8007114 <HAL_SPI_Receive+0x260>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d115      	bne.n	80070e4 <HAL_SPI_Receive+0x230>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	b292      	uxth	r2, r2
 80070c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	1c9a      	adds	r2, r3, #2
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80070e2:	e011      	b.n	8007108 <HAL_SPI_Receive+0x254>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070e4:	f7fd f9f6 	bl	80044d4 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d803      	bhi.n	80070fc <HAL_SPI_Receive+0x248>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fa:	d102      	bne.n	8007102 <HAL_SPI_Receive+0x24e>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <HAL_SPI_Receive+0x254>
        {
          errorcode = HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007106:	e0a5      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
    while (hspi->RxXferCount > 0U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1ca      	bne.n	80070aa <HAL_SPI_Receive+0x1f6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711c:	d175      	bne.n	800720a <HAL_SPI_Receive+0x356>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800712c:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2201      	movs	r2, #1
 8007136:	2101      	movs	r1, #1
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f001 f9af 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_SPI_Receive+0x296>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	77fb      	strb	r3, [r7, #31]
      goto error;
 8007148:	e084      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007152:	d907      	bls.n	8007164 <HAL_SPI_Receive+0x2b0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	b292      	uxth	r2, r2
 8007160:	801a      	strh	r2, [r3, #0]
 8007162:	e008      	b.n	8007176 <HAL_SPI_Receive+0x2c2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f103 020c 	add.w	r2, r3, #12
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2201      	movs	r2, #1
 800717e:	2101      	movs	r1, #1
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f001 f98b 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_SPI_Receive+0x2ea>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007190:	f043 0202 	orr.w	r2, r3, #2
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	77fb      	strb	r3, [r7, #31]
      goto error;
 800719c:	e05a      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071a6:	d105      	bne.n	80071b4 <HAL_SPI_Receive+0x300>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	e02a      	b.n	800720a <HAL_SPI_Receive+0x356>
    }
    else
    {
      /* Read 8bit CRC */
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80071c0:	697b      	ldr	r3, [r7, #20]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071ca:	d11e      	bne.n	800720a <HAL_SPI_Receive+0x356>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d11a      	bne.n	800720a <HAL_SPI_Receive+0x356>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2201      	movs	r2, #1
 80071dc:	2101      	movs	r1, #1
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f001 f95c 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d008      	beq.n	80071fc <HAL_SPI_Receive+0x348>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ee:	f043 0202 	orr.w	r2, r3, #2
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071fa:	e02b      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	617b      	str	r3, [r7, #20]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 8007208:	697b      	ldr	r3, [r7, #20]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f001 fa5e 	bl	80086d0 <SPI_EndRxTransaction>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_SPI_Receive+0x36c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f003 0310 	and.w	r3, r3, #16
 800722a:	2b10      	cmp	r3, #16
 800722c:	d10a      	bne.n	8007244 <HAL_SPI_Receive+0x390>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007232:	f043 0202 	orr.w	r2, r3, #2
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007242:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_SPI_Receive+0x39e>
  {
    errorcode = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e000      	b.n	8007254 <HAL_SPI_Receive+0x3a0>
  }

error :
 8007252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007264:	7ffb      	ldrb	r3, [r7, #31]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3720      	adds	r7, #32
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b090      	sub	sp, #64	; 0x40
 8007272:	af02      	add	r7, sp, #8
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007280:	2301      	movs	r3, #1
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_SPI_TransmitReceive+0x2a>
 8007294:	2302      	movs	r3, #2
 8007296:	e2c8      	b.n	800782a <HAL_SPI_TransmitReceive+0x5bc>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072a0:	f7fd f918 	bl	80044d4 <HAL_GetTick>
 80072a4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  tmp_mode            = hspi->Init.Mode;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
  initial_TxXferCount = Size;
 80072b6:	887b      	ldrh	r3, [r7, #2]
 80072b8:	847b      	strh	r3, [r7, #34]	; 0x22
  initial_RxXferCount = Size;
 80072ba:	887b      	ldrh	r3, [r7, #2]
 80072bc:	843b      	strh	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	61fb      	str	r3, [r7, #28]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	61bb      	str	r3, [r7, #24]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d00f      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x88>
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072dc:	d107      	bne.n	80072ee <HAL_SPI_TransmitReceive+0x80>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <HAL_SPI_TransmitReceive+0x80>
 80072e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d003      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 80072ee:	2302      	movs	r3, #2
 80072f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    goto error;
 80072f4:	e28f      	b.n	8007816 <HAL_SPI_TransmitReceive+0x5a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_SPI_TransmitReceive+0x9a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_SPI_TransmitReceive+0x9a>
 8007302:	887b      	ldrh	r3, [r7, #2]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    goto error;
 800730e:	e282      	b.n	8007816 <HAL_SPI_TransmitReceive+0x5a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b04      	cmp	r3, #4
 800731a:	d003      	beq.n	8007324 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2205      	movs	r2, #5
 8007320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	887a      	ldrh	r2, [r7, #2]
 8007334:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	887a      	ldrh	r2, [r7, #2]
 800733c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	887a      	ldrh	r2, [r7, #2]
 800734a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	887a      	ldrh	r2, [r7, #2]
 8007350:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007366:	d10f      	bne.n	8007388 <HAL_SPI_TransmitReceive+0x11a>
  {
    SPI_RESET_CRC(hspi);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007386:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007390:	d802      	bhi.n	8007398 <HAL_SPI_TransmitReceive+0x12a>
 8007392:	8c3b      	ldrh	r3, [r7, #32]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d908      	bls.n	80073aa <HAL_SPI_TransmitReceive+0x13c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	e007      	b.n	80073ba <HAL_SPI_TransmitReceive+0x14c>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b40      	cmp	r3, #64	; 0x40
 80073c6:	d007      	beq.n	80073d8 <HAL_SPI_TransmitReceive+0x16a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073e0:	f240 80a4 	bls.w	800752c <HAL_SPI_TransmitReceive+0x2be>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_SPI_TransmitReceive+0x186>
 80073ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	f040 808e 	bne.w	8007510 <HAL_SPI_TransmitReceive+0x2a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	881a      	ldrh	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007404:	1c9a      	adds	r2, r3, #2
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007418:	e07a      	b.n	8007510 <HAL_SPI_TransmitReceive+0x2a2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b02      	cmp	r3, #2
 8007426:	d13f      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x23a>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d03a      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x23a>
 8007432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007434:	2b01      	cmp	r3, #1
 8007436:	d137      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x23a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	881a      	ldrh	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	1c9a      	adds	r2, r3, #2
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	637b      	str	r3, [r7, #52]	; 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d11e      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x23a>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007472:	d119      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x23a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10c      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x22a>
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x22a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007496:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074a6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d11c      	bne.n	80074f0 <HAL_SPI_TransmitReceive+0x282>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <HAL_SPI_TransmitReceive+0x282>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074cc:	b292      	uxth	r2, r2
 80074ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	1c9a      	adds	r2, r3, #2
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074ec:	2301      	movs	r3, #1
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074f0:	f7fc fff0 	bl	80044d4 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d807      	bhi.n	8007510 <HAL_SPI_TransmitReceive+0x2a2>
 8007500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d003      	beq.n	8007510 <HAL_SPI_TransmitReceive+0x2a2>
      {
        errorcode = HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        goto error;
 800750e:	e182      	b.n	8007816 <HAL_SPI_TransmitReceive+0x5a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	f47f af7f 	bne.w	800741a <HAL_SPI_TransmitReceive+0x1ac>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	f47f af78 	bne.w	800741a <HAL_SPI_TransmitReceive+0x1ac>
 800752a:	e103      	b.n	8007734 <HAL_SPI_TransmitReceive+0x4c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_SPI_TransmitReceive+0x2ce>
 8007534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007536:	2b01      	cmp	r3, #1
 8007538:	f040 80ef 	bne.w	800771a <HAL_SPI_TransmitReceive+0x4ac>
    {
      if (hspi->TxXferCount > 1U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d912      	bls.n	800756c <HAL_SPI_TransmitReceive+0x2fe>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	881a      	ldrh	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	1c9a      	adds	r2, r3, #2
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b02      	subs	r3, #2
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	87da      	strh	r2, [r3, #62]	; 0x3e
 800756a:	e0d6      	b.n	800771a <HAL_SPI_TransmitReceive+0x4ac>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	7812      	ldrb	r2, [r2, #0]
 8007578:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007588:	b29b      	uxth	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007592:	e0c2      	b.n	800771a <HAL_SPI_TransmitReceive+0x4ac>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d158      	bne.n	8007654 <HAL_SPI_TransmitReceive+0x3e6>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d053      	beq.n	8007654 <HAL_SPI_TransmitReceive+0x3e6>
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d150      	bne.n	8007654 <HAL_SPI_TransmitReceive+0x3e6>
      {
        if (hspi->TxXferCount > 1U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d912      	bls.n	80075e2 <HAL_SPI_TransmitReceive+0x374>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	881a      	ldrh	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	1c9a      	adds	r2, r3, #2
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b02      	subs	r3, #2
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075e0:	e012      	b.n	8007608 <HAL_SPI_TransmitReceive+0x39a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	330c      	adds	r3, #12
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	637b      	str	r3, [r7, #52]	; 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d11e      	bne.n	8007654 <HAL_SPI_TransmitReceive+0x3e6>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761e:	d119      	bne.n	8007654 <HAL_SPI_TransmitReceive+0x3e6>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10c      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x3d6>
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f003 0308 	and.w	r3, r3, #8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x3d6>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007642:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007652:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b01      	cmp	r3, #1
 8007660:	d148      	bne.n	80076f4 <HAL_SPI_TransmitReceive+0x486>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d042      	beq.n	80076f4 <HAL_SPI_TransmitReceive+0x486>
      {
        if (hspi->RxXferCount > 1U)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	d923      	bls.n	80076c2 <HAL_SPI_TransmitReceive+0x454>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	b292      	uxth	r2, r2
 8007686:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b02      	subs	r3, #2
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d81f      	bhi.n	80076f0 <HAL_SPI_TransmitReceive+0x482>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	e016      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x482>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f103 020c 	add.w	r2, r3, #12
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076f0:	2301      	movs	r3, #1
 80076f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076f4:	f7fc feee 	bl	80044d4 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007700:	429a      	cmp	r2, r3
 8007702:	d803      	bhi.n	800770c <HAL_SPI_TransmitReceive+0x49e>
 8007704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d102      	bne.n	8007712 <HAL_SPI_TransmitReceive+0x4a4>
 800770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <HAL_SPI_TransmitReceive+0x4ac>
      {
        errorcode = HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        goto error;
 8007718:	e07d      	b.n	8007816 <HAL_SPI_TransmitReceive+0x5a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	f47f af37 	bne.w	8007594 <HAL_SPI_TransmitReceive+0x326>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	f47f af30 	bne.w	8007594 <HAL_SPI_TransmitReceive+0x326>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773c:	d146      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x55e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007744:	2201      	movs	r2, #1
 8007746:	2101      	movs	r1, #1
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fea7 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d009      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x4fa>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007758:	f043 0202 	orr.w	r2, r3, #2
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      goto error;
 8007766:	e056      	b.n	8007816 <HAL_SPI_TransmitReceive+0x5a8>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007770:	d105      	bne.n	800777e <HAL_SPI_TransmitReceive+0x510>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	e026      	b.n	80077cc <HAL_SPI_TransmitReceive+0x55e>
    }
    else
    {
      /* Read 8bit CRC */
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	330c      	adds	r3, #12
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800778a:	697b      	ldr	r3, [r7, #20]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	2b02      	cmp	r3, #2
 8007792:	d11b      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x55e>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779a:	2201      	movs	r2, #1
 800779c:	2101      	movs	r1, #1
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fe7c 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_SPI_TransmitReceive+0x550>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ae:	f043 0202 	orr.w	r2, r3, #2
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
          goto error;
 80077bc:	e02b      	b.n	8007816 <HAL_SPI_TransmitReceive+0x5a8>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	617b      	str	r3, [r7, #20]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 80077ca:	697b      	ldr	r3, [r7, #20]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d10d      	bne.n	80077f6 <HAL_SPI_TransmitReceive+0x588>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077de:	f043 0202 	orr.w	r2, r3, #2
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80077ee:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 ffc0 	bl	8008780 <SPI_EndRxTxTransaction>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d006      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x5a6>
  {
    errorcode = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2220      	movs	r2, #32
 8007810:	661a      	str	r2, [r3, #96]	; 0x60
 8007812:	e000      	b.n	8007816 <HAL_SPI_TransmitReceive+0x5a8>
  }

error :
 8007814:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800782a:	4618      	mov	r0, r3
 800782c:	3738      	adds	r7, #56	; 0x38
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_SPI_Transmit_IT+0x20>
 8007850:	2302      	movs	r3, #2
 8007852:	e087      	b.n	8007964 <HAL_SPI_Transmit_IT+0x130>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_SPI_Transmit_IT+0x34>
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800786c:	e075      	b.n	800795a <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b01      	cmp	r3, #1
 8007878:	d002      	beq.n	8007880 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800787a:	2302      	movs	r3, #2
 800787c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800787e:	e06c      	b.n	800795a <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2203      	movs	r2, #3
 8007884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	88fa      	ldrh	r2, [r7, #6]
 800789e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078c4:	d903      	bls.n	80078ce <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a29      	ldr	r2, [pc, #164]	; (8007970 <HAL_SPI_Transmit_IT+0x13c>)
 80078ca:	651a      	str	r2, [r3, #80]	; 0x50
 80078cc:	e002      	b.n	80078d4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4a28      	ldr	r2, [pc, #160]	; (8007974 <HAL_SPI_Transmit_IT+0x140>)
 80078d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078dc:	d10f      	bne.n	80078fe <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078fc:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007906:	d10f      	bne.n	8007928 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007926:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8007936:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d008      	beq.n	8007958 <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e000      	b.n	800795a <HAL_SPI_Transmit_IT+0x126>
  }

error :
 8007958:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
}
 8007964:	4618      	mov	r0, r3
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	0800843d 	.word	0x0800843d
 8007974:	080083dd 	.word	0x080083dd

08007978 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d110      	bne.n	80079b4 <HAL_SPI_Receive_IT+0x3c>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800799a:	d10b      	bne.n	80079b4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2204      	movs	r2, #4
 80079a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f8bc 	bl	8007b28 <HAL_SPI_TransmitReceive_IT>
 80079b0:	4603      	mov	r3, r0
 80079b2:	e0b1      	b.n	8007b18 <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_SPI_Receive_IT+0x4a>
 80079be:	2302      	movs	r3, #2
 80079c0:	e0aa      	b.n	8007b18 <HAL_SPI_Receive_IT+0x1a0>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d002      	beq.n	80079dc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80079d6:	2302      	movs	r3, #2
 80079d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079da:	e098      	b.n	8007b0e <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <HAL_SPI_Receive_IT+0x70>
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079ec:	e08f      	b.n	8007b0e <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2204      	movs	r2, #4
 80079f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	88fa      	ldrh	r2, [r7, #6]
 8007a0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a32:	d90b      	bls.n	8007a4c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a42:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4a36      	ldr	r2, [pc, #216]	; (8007b20 <HAL_SPI_Receive_IT+0x1a8>)
 8007a48:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a4a:	e00a      	b.n	8007a62 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a5a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a31      	ldr	r2, [pc, #196]	; (8007b24 <HAL_SPI_Receive_IT+0x1ac>)
 8007a60:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a6a:	d10f      	bne.n	8007a8c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a8a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a94:	d11f      	bne.n	8007ad6 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007aa4:	d806      	bhi.n	8007ab4 <HAL_SPI_Receive_IT+0x13c>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d102      	bne.n	8007ab4 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e002      	b.n	8007adc <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007aea:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d008      	beq.n	8007b0c <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	e000      	b.n	8007b0e <HAL_SPI_Receive_IT+0x196>
  }

error :
 8007b0c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	08008355 	.word	0x08008355
 8007b24:	08008295 	.word	0x08008295

08007b28 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_SPI_TransmitReceive_IT+0x20>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e0b9      	b.n	8007cbc <HAL_SPI_TransmitReceive_IT+0x194>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b56:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b5e:	7dbb      	ldrb	r3, [r7, #22]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d00d      	beq.n	8007b80 <HAL_SPI_TransmitReceive_IT+0x58>
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6a:	d106      	bne.n	8007b7a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <HAL_SPI_TransmitReceive_IT+0x52>
 8007b74:	7dbb      	ldrb	r3, [r7, #22]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d002      	beq.n	8007b80 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b7e:	e098      	b.n	8007cb2 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d102      	bne.n	8007b98 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b96:	e08c      	b.n	8007cb2 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d003      	beq.n	8007bac <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2205      	movs	r2, #5
 8007ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	887a      	ldrh	r2, [r7, #2]
 8007bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	887a      	ldrh	r2, [r7, #2]
 8007bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	887a      	ldrh	r2, [r7, #2]
 8007bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	887a      	ldrh	r2, [r7, #2]
 8007bd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007be2:	d906      	bls.n	8007bf2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a38      	ldr	r2, [pc, #224]	; (8007cc8 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8007be8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4a37      	ldr	r2, [pc, #220]	; (8007ccc <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8007bee:	651a      	str	r2, [r3, #80]	; 0x50
 8007bf0:	e005      	b.n	8007bfe <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4a36      	ldr	r2, [pc, #216]	; (8007cd0 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8007bf6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4a36      	ldr	r2, [pc, #216]	; (8007cd4 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 8007bfc:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c06:	d11f      	bne.n	8007c48 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c16:	d806      	bhi.n	8007c26 <HAL_SPI_TransmitReceive_IT+0xfe>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d102      	bne.n	8007c26 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2202      	movs	r2, #2
 8007c24:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c56:	d802      	bhi.n	8007c5e <HAL_SPI_TransmitReceive_IT+0x136>
 8007c58:	887b      	ldrh	r3, [r7, #2]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d908      	bls.n	8007c70 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e007      	b.n	8007c80 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c7e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007c8e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b40      	cmp	r3, #64	; 0x40
 8007c9c:	d008      	beq.n	8007cb0 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e000      	b.n	8007cb2 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 8007cb0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	08008121 	.word	0x08008121
 8007ccc:	080081d1 	.word	0x080081d1
 8007cd0:	08007f2d 	.word	0x08007f2d
 8007cd4:	08008065 	.word	0x08008065

08007cd8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	099b      	lsrs	r3, r3, #6
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10f      	bne.n	8007d1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	099b      	lsrs	r3, r3, #6
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d004      	beq.n	8007d1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
    return;
 8007d1a:	e0d7      	b.n	8007ecc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_SPI_IRQHandler+0x66>
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	09db      	lsrs	r3, r3, #7
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
    return;
 8007d3c:	e0c6      	b.n	8007ecc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	095b      	lsrs	r3, r3, #5
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <HAL_SPI_IRQHandler+0x8c>
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	099b      	lsrs	r3, r3, #6
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 80b4 	beq.w	8007ecc <HAL_SPI_IRQHandler+0x1f4>
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80ad 	beq.w	8007ecc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	099b      	lsrs	r3, r3, #6
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d023      	beq.n	8007dc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d011      	beq.n	8007dae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8e:	f043 0204 	orr.w	r2, r3, #4
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d96:	2300      	movs	r3, #0
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	617b      	str	r3, [r7, #20]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	e00b      	b.n	8007dc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	693b      	ldr	r3, [r7, #16]
        return;
 8007dc4:	e082      	b.n	8007ecc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	095b      	lsrs	r3, r3, #5
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d014      	beq.n	8007dfc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd6:	f043 0201 	orr.w	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00c      	beq.n	8007e22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0c:	f043 0208 	orr.w	r2, r3, #8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e14:	2300      	movs	r3, #0
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	60bb      	str	r3, [r7, #8]
 8007e20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d04f      	beq.n	8007eca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_SPI_IRQHandler+0x17e>
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d034      	beq.n	8007ec0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0203 	bic.w	r2, r2, #3
 8007e64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d011      	beq.n	8007e92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	4a18      	ldr	r2, [pc, #96]	; (8007ed4 <HAL_SPI_IRQHandler+0x1fc>)
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fc fc6b 	bl	8004756 <HAL_DMA_Abort_IT>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	4a0d      	ldr	r2, [pc, #52]	; (8007ed4 <HAL_SPI_IRQHandler+0x1fc>)
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fc fc55 	bl	8004756 <HAL_DMA_Abort_IT>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ebe:	e003      	b.n	8007ec8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f813 	bl	8007eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ec6:	e000      	b.n	8007eca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007ec8:	bf00      	nop
    return;
 8007eca:	bf00      	nop
  }
}
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	08007f01 	.word	0x08007f01

08007ed8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff ffe5 	bl	8007eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d923      	bls.n	8007f88 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	1c9a      	adds	r2, r3, #2
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b02      	subs	r3, #2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d11f      	bne.n	8007fb6 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f84:	605a      	str	r2, [r3, #4]
 8007f86:	e016      	b.n	8007fb6 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f103 020c 	add.w	r2, r3, #12
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	7812      	ldrb	r2, [r2, #0]
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d120      	bne.n	8008004 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fca:	d10b      	bne.n	8007fe4 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fda:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a0b      	ldr	r2, [pc, #44]	; (800800c <SPI_2linesRxISR_8BIT+0xe0>)
 8007fe0:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8007fe2:	e00f      	b.n	8008004 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ff2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fc04 	bl	800880c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	08008011 	.word	0x08008011

08008010 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

  /* Read 8bit CRC to flush Data Register */
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	b2db      	uxtb	r3, r3
 8008026:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8008028:	68fb      	ldr	r3, [r7, #12]

  hspi->CRCSize--;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800802e:	1e5a      	subs	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10f      	bne.n	800805c <SPI_2linesRxISR_8BITCRC+0x4c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800804a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <SPI_2linesRxISR_8BITCRC+0x4c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fbd8 	bl	800880c <SPI_CloseRxTx_ISR>
    }
  }
}
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b01      	cmp	r3, #1
 8008074:	d912      	bls.n	800809c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	881a      	ldrh	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008086:	1c9a      	adds	r2, r3, #2
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b02      	subs	r3, #2
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	87da      	strh	r2, [r3, #62]	; 0x3e
 800809a:	e012      	b.n	80080c2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	330c      	adds	r3, #12
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d126      	bne.n	800811a <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d4:	d110      	bne.n	80080f8 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080e4:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080f4:	605a      	str	r2, [r3, #4]
      return;
 80080f6:	e010      	b.n	800811a <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008106:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800810e:	b29b      	uxth	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d102      	bne.n	800811a <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fb79 	bl	800880c <SPI_CloseRxTx_ISR>
    }
  }
}
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	b292      	uxth	r2, r2
 8008134:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	1c9a      	adds	r2, r3, #2
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d118      	bne.n	8008190 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008166:	d103      	bne.n	8008170 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a0b      	ldr	r2, [pc, #44]	; (8008198 <SPI_2linesRxISR_16BIT+0x78>)
 800816c:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800816e:	e00f      	b.n	8008190 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800817e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d102      	bne.n	8008190 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fb3e 	bl	800880c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	0800819d 	.word	0x0800819d

0800819c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80081b0:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081c0:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fb22 	bl	800880c <SPI_CloseRxTx_ISR>
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	881a      	ldrh	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	1c9a      	adds	r2, r3, #2
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008200:	b29b      	uxth	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d126      	bne.n	8008254 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800820e:	d110      	bne.n	8008232 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800821e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800822e:	605a      	str	r2, [r3, #4]
      return;
 8008230:	e010      	b.n	8008254 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008240:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fadc 	bl	800880c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]

  /* Read 8bit CRC to flush Data Register */
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8008272:	68fb      	ldr	r3, [r7, #12]

  hspi->CRCSize--;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008278:	1e5a      	subs	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008282:	2b00      	cmp	r3, #0
 8008284:	d102      	bne.n	800828c <SPI_RxISR_8BITCRC+0x32>
  {
    SPI_CloseRx_ISR(hspi);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fb1c 	bl	80088c4 <SPI_CloseRx_ISR>
  }
}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f103 020c 	add.w	r2, r3, #12
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	7812      	ldrb	r2, [r2, #0]
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d10c      	bne.n	80082f0 <SPI_RxISR_8BIT+0x5c>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082de:	d107      	bne.n	80082f0 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082ee:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008304:	d103      	bne.n	800830e <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a04      	ldr	r2, [pc, #16]	; (800831c <SPI_RxISR_8BIT+0x88>)
 800830a:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800830c:	e002      	b.n	8008314 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fad8 	bl	80088c4 <SPI_CloseRx_ISR>
  }
}
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	0800825b 	.word	0x0800825b

08008320 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8008334:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008344:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fabc 	bl	80088c4 <SPI_CloseRx_ISR>
}
 800834c:	bf00      	nop
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	b292      	uxth	r2, r2
 8008368:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	1c9a      	adds	r2, r3, #2
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800837a:	b29b      	uxth	r3, r3
 800837c:	3b01      	subs	r3, #1
 800837e:	b29a      	uxth	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800838c:	b29b      	uxth	r3, r3
 800838e:	2b01      	cmp	r3, #1
 8008390:	d10c      	bne.n	80083ac <SPI_RxISR_16BIT+0x58>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800839a:	d107      	bne.n	80083ac <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083aa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c0:	d103      	bne.n	80083ca <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a04      	ldr	r2, [pc, #16]	; (80083d8 <SPI_RxISR_16BIT+0x84>)
 80083c6:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80083c8:	e002      	b.n	80083d0 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa7a 	bl	80088c4 <SPI_CloseRx_ISR>
  }
}
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	08008321 	.word	0x08008321

080083dc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	330c      	adds	r3, #12
 80083ee:	7812      	ldrb	r2, [r2, #0]
 80083f0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800840e:	b29b      	uxth	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10f      	bne.n	8008434 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800841c:	d107      	bne.n	800842e <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800842c:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa8e 	bl	8008950 <SPI_CloseTx_ISR>
  }
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	881a      	ldrh	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	1c9a      	adds	r2, r3, #2
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10f      	bne.n	8008492 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847a:	d107      	bne.n	800848c <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800848a:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa5f 	bl	8008950 <SPI_CloseTx_ISR>
  }
}
 8008492:	bf00      	nop
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	4613      	mov	r3, r2
 80084aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084ac:	f7fc f812 	bl	80044d4 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	1a9b      	subs	r3, r3, r2
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	4413      	add	r3, r2
 80084ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084bc:	f7fc f80a 	bl	80044d4 <HAL_GetTick>
 80084c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084c2:	4b39      	ldr	r3, [pc, #228]	; (80085a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	015b      	lsls	r3, r3, #5
 80084c8:	0d1b      	lsrs	r3, r3, #20
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	fb02 f303 	mul.w	r3, r2, r3
 80084d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084d2:	e054      	b.n	800857e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d050      	beq.n	800857e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084dc:	f7fb fffa 	bl	80044d4 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d902      	bls.n	80084f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d13d      	bne.n	800856e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800850a:	d111      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008514:	d004      	beq.n	8008520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851e:	d107      	bne.n	8008530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800852e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008538:	d10f      	bne.n	800855a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e017      	b.n	800859e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3b01      	subs	r3, #1
 800857c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4013      	ands	r3, r2
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	429a      	cmp	r2, r3
 800858c:	bf0c      	ite	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	2300      	movne	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	429a      	cmp	r2, r3
 800859a:	d19b      	bne.n	80084d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3720      	adds	r7, #32
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	2000000c 	.word	0x2000000c

080085ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80085ba:	f7fb ff8b 	bl	80044d4 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	4413      	add	r3, r2
 80085c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085ca:	f7fb ff83 	bl	80044d4 <HAL_GetTick>
 80085ce:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80085d0:	4b3e      	ldr	r3, [pc, #248]	; (80086cc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	00da      	lsls	r2, r3, #3
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	0d1b      	lsrs	r3, r3, #20
 80085e0:	69fa      	ldr	r2, [r7, #28]
 80085e2:	fb02 f303 	mul.w	r3, r2, r3
 80085e6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80085e8:	e062      	b.n	80086b0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80085f0:	d109      	bne.n	8008606 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	330c      	adds	r3, #12
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008604:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860c:	d050      	beq.n	80086b0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800860e:	f7fb ff61 	bl	80044d4 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	429a      	cmp	r2, r3
 800861c:	d902      	bls.n	8008624 <SPI_WaitFifoStateUntilTimeout+0x78>
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d13d      	bne.n	80086a0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008632:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800863c:	d111      	bne.n	8008662 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008646:	d004      	beq.n	8008652 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008650:	d107      	bne.n	8008662 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008660:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800866a:	d10f      	bne.n	800868c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800868a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e010      	b.n	80086c2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689a      	ldr	r2, [r3, #8]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4013      	ands	r3, r2
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d194      	bne.n	80085ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	2000000c 	.word	0x2000000c

080086d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086e4:	d111      	bne.n	800870a <SPI_EndRxTransaction+0x3a>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ee:	d004      	beq.n	80086fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f8:	d107      	bne.n	800870a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008708:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2200      	movs	r2, #0
 8008712:	2180      	movs	r1, #128	; 0x80
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f7ff fec1 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d007      	beq.n	8008730 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008724:	f043 0220 	orr.w	r2, r3, #32
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e023      	b.n	8008778 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008738:	d11d      	bne.n	8008776 <SPI_EndRxTransaction+0xa6>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008742:	d004      	beq.n	800874e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800874c:	d113      	bne.n	8008776 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff ff26 	bl	80085ac <SPI_WaitFifoStateUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876a:	f043 0220 	orr.w	r2, r3, #32
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e000      	b.n	8008778 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f7ff ff07 	bl	80085ac <SPI_WaitFifoStateUntilTimeout>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a8:	f043 0220 	orr.w	r2, r3, #32
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e027      	b.n	8008804 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2200      	movs	r2, #0
 80087bc:	2180      	movs	r1, #128	; 0x80
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fe6c 	bl	800849c <SPI_WaitFlagStateUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ce:	f043 0220 	orr.w	r2, r3, #32
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e014      	b.n	8008804 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f7ff fee0 	bl	80085ac <SPI_WaitFifoStateUntilTimeout>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f6:	f043 0220 	orr.w	r2, r3, #32
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e000      	b.n	8008804 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008814:	f7fb fe5e 	bl	80044d4 <HAL_GetTick>
 8008818:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0220 	bic.w	r2, r2, #32
 8008828:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	2164      	movs	r1, #100	; 0x64
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff ffa6 	bl	8008780 <SPI_EndRxTxTransaction>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883e:	f043 0220 	orr.w	r2, r3, #32
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f003 0310 	and.w	r3, r3, #16
 8008850:	2b10      	cmp	r3, #16
 8008852:	d112      	bne.n	800887a <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008860:	f043 0202 	orr.w	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008870:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fb3a 	bl	8007eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008878:	e020      	b.n	80088bc <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887e:	2b00      	cmp	r3, #0
 8008880:	d115      	bne.n	80088ae <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b04      	cmp	r3, #4
 800888c:	d107      	bne.n	800889e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f9 fc82 	bl	80021a0 <HAL_SPI_RxCpltCallback>
}
 800889c:	e00e      	b.n	80088bc <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fb16 	bl	8007ed8 <HAL_SPI_TxRxCpltCallback>
}
 80088ac:	e006      	b.n	80088bc <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fb18 	bl	8007eec <HAL_SPI_ErrorCallback>
}
 80088bc:	bf00      	nop
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80088da:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80088dc:	f7fb fdfa 	bl	80044d4 <HAL_GetTick>
 80088e0:	4603      	mov	r3, r0
 80088e2:	461a      	mov	r2, r3
 80088e4:	2164      	movs	r1, #100	; 0x64
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff fef2 	bl	80086d0 <SPI_EndRxTransaction>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d005      	beq.n	80088fe <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f6:	f043 0220 	orr.w	r2, r3, #32
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	2b10      	cmp	r3, #16
 8008912:	d10e      	bne.n	8008932 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008918:	f043 0202 	orr.w	r2, r3, #2
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008928:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fade 	bl	8007eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008930:	e00a      	b.n	8008948 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7f9 fc30 	bl	80021a0 <HAL_SPI_RxCpltCallback>
}
 8008940:	e002      	b.n	8008948 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff fad2 	bl	8007eec <HAL_SPI_ErrorCallback>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008958:	f7fb fdbc 	bl	80044d4 <HAL_GetTick>
 800895c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800896c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	2164      	movs	r1, #100	; 0x64
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff ff04 	bl	8008780 <SPI_EndRxTxTransaction>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008982:	f043 0220 	orr.w	r2, r3, #32
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008992:	2300      	movs	r3, #0
 8008994:	60bb      	str	r3, [r7, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	60bb      	str	r3, [r7, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff fa97 	bl	8007eec <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80089be:	e002      	b.n	80089c6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7f9 fc01 	bl	80021c8 <HAL_SPI_TxCpltCallback>
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e049      	b.n	8008a74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d106      	bne.n	80089fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7fa fd91 	bl	800351c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2202      	movs	r2, #2
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f000 fd2d 	bl	800946c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d001      	beq.n	8008a94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e047      	b.n	8008b24 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a23      	ldr	r2, [pc, #140]	; (8008b30 <HAL_TIM_Base_Start+0xb4>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d01d      	beq.n	8008ae2 <HAL_TIM_Base_Start+0x66>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aae:	d018      	beq.n	8008ae2 <HAL_TIM_Base_Start+0x66>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1f      	ldr	r2, [pc, #124]	; (8008b34 <HAL_TIM_Base_Start+0xb8>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d013      	beq.n	8008ae2 <HAL_TIM_Base_Start+0x66>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <HAL_TIM_Base_Start+0xbc>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d00e      	beq.n	8008ae2 <HAL_TIM_Base_Start+0x66>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1c      	ldr	r2, [pc, #112]	; (8008b3c <HAL_TIM_Base_Start+0xc0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d009      	beq.n	8008ae2 <HAL_TIM_Base_Start+0x66>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a1b      	ldr	r2, [pc, #108]	; (8008b40 <HAL_TIM_Base_Start+0xc4>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d004      	beq.n	8008ae2 <HAL_TIM_Base_Start+0x66>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a19      	ldr	r2, [pc, #100]	; (8008b44 <HAL_TIM_Base_Start+0xc8>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d115      	bne.n	8008b0e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	4b17      	ldr	r3, [pc, #92]	; (8008b48 <HAL_TIM_Base_Start+0xcc>)
 8008aea:	4013      	ands	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b06      	cmp	r3, #6
 8008af2:	d015      	beq.n	8008b20 <HAL_TIM_Base_Start+0xa4>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afa:	d011      	beq.n	8008b20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0c:	e008      	b.n	8008b20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0201 	orr.w	r2, r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	e000      	b.n	8008b22 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	40012c00 	.word	0x40012c00
 8008b34:	40000400 	.word	0x40000400
 8008b38:	40000800 	.word	0x40000800
 8008b3c:	40000c00 	.word	0x40000c00
 8008b40:	40013400 	.word	0x40013400
 8008b44:	40014000 	.word	0x40014000
 8008b48:	00010007 	.word	0x00010007

08008b4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e049      	b.n	8008bf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d106      	bne.n	8008b78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f841 	bl	8008bfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f000 fc6e 	bl	800946c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_TIM_PWM_Start+0x24>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	bf14      	ite	ne
 8008c2c:	2301      	movne	r3, #1
 8008c2e:	2300      	moveq	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	e03c      	b.n	8008cae <HAL_TIM_PWM_Start+0x9e>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d109      	bne.n	8008c4e <HAL_TIM_PWM_Start+0x3e>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	bf14      	ite	ne
 8008c46:	2301      	movne	r3, #1
 8008c48:	2300      	moveq	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	e02f      	b.n	8008cae <HAL_TIM_PWM_Start+0x9e>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d109      	bne.n	8008c68 <HAL_TIM_PWM_Start+0x58>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	bf14      	ite	ne
 8008c60:	2301      	movne	r3, #1
 8008c62:	2300      	moveq	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	e022      	b.n	8008cae <HAL_TIM_PWM_Start+0x9e>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b0c      	cmp	r3, #12
 8008c6c:	d109      	bne.n	8008c82 <HAL_TIM_PWM_Start+0x72>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	bf14      	ite	ne
 8008c7a:	2301      	movne	r3, #1
 8008c7c:	2300      	moveq	r3, #0
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	e015      	b.n	8008cae <HAL_TIM_PWM_Start+0x9e>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b10      	cmp	r3, #16
 8008c86:	d109      	bne.n	8008c9c <HAL_TIM_PWM_Start+0x8c>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	bf14      	ite	ne
 8008c94:	2301      	movne	r3, #1
 8008c96:	2300      	moveq	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	e008      	b.n	8008cae <HAL_TIM_PWM_Start+0x9e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	bf14      	ite	ne
 8008ca8:	2301      	movne	r3, #1
 8008caa:	2300      	moveq	r3, #0
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e09c      	b.n	8008df0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <HAL_TIM_PWM_Start+0xb6>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cc4:	e023      	b.n	8008d0e <HAL_TIM_PWM_Start+0xfe>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d104      	bne.n	8008cd6 <HAL_TIM_PWM_Start+0xc6>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd4:	e01b      	b.n	8008d0e <HAL_TIM_PWM_Start+0xfe>
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d104      	bne.n	8008ce6 <HAL_TIM_PWM_Start+0xd6>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce4:	e013      	b.n	8008d0e <HAL_TIM_PWM_Start+0xfe>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b0c      	cmp	r3, #12
 8008cea:	d104      	bne.n	8008cf6 <HAL_TIM_PWM_Start+0xe6>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cf4:	e00b      	b.n	8008d0e <HAL_TIM_PWM_Start+0xfe>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_PWM_Start+0xf6>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d04:	e003      	b.n	8008d0e <HAL_TIM_PWM_Start+0xfe>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2201      	movs	r2, #1
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 ffb2 	bl	8009c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a35      	ldr	r2, [pc, #212]	; (8008df8 <HAL_TIM_PWM_Start+0x1e8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d013      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x13e>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a34      	ldr	r2, [pc, #208]	; (8008dfc <HAL_TIM_PWM_Start+0x1ec>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00e      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x13e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a32      	ldr	r2, [pc, #200]	; (8008e00 <HAL_TIM_PWM_Start+0x1f0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d009      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x13e>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a31      	ldr	r2, [pc, #196]	; (8008e04 <HAL_TIM_PWM_Start+0x1f4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d004      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x13e>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a2f      	ldr	r2, [pc, #188]	; (8008e08 <HAL_TIM_PWM_Start+0x1f8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d101      	bne.n	8008d52 <HAL_TIM_PWM_Start+0x142>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <HAL_TIM_PWM_Start+0x144>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d007      	beq.n	8008d68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <HAL_TIM_PWM_Start+0x1e8>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d01d      	beq.n	8008dae <HAL_TIM_PWM_Start+0x19e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7a:	d018      	beq.n	8008dae <HAL_TIM_PWM_Start+0x19e>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a22      	ldr	r2, [pc, #136]	; (8008e0c <HAL_TIM_PWM_Start+0x1fc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d013      	beq.n	8008dae <HAL_TIM_PWM_Start+0x19e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a21      	ldr	r2, [pc, #132]	; (8008e10 <HAL_TIM_PWM_Start+0x200>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00e      	beq.n	8008dae <HAL_TIM_PWM_Start+0x19e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1f      	ldr	r2, [pc, #124]	; (8008e14 <HAL_TIM_PWM_Start+0x204>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d009      	beq.n	8008dae <HAL_TIM_PWM_Start+0x19e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <HAL_TIM_PWM_Start+0x1ec>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d004      	beq.n	8008dae <HAL_TIM_PWM_Start+0x19e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a15      	ldr	r2, [pc, #84]	; (8008e00 <HAL_TIM_PWM_Start+0x1f0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d115      	bne.n	8008dda <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	4b18      	ldr	r3, [pc, #96]	; (8008e18 <HAL_TIM_PWM_Start+0x208>)
 8008db6:	4013      	ands	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2b06      	cmp	r3, #6
 8008dbe:	d015      	beq.n	8008dec <HAL_TIM_PWM_Start+0x1dc>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc6:	d011      	beq.n	8008dec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0201 	orr.w	r2, r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd8:	e008      	b.n	8008dec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f042 0201 	orr.w	r2, r2, #1
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	e000      	b.n	8008dee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	40012c00 	.word	0x40012c00
 8008dfc:	40013400 	.word	0x40013400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400
 8008e08:	40014800 	.word	0x40014800
 8008e0c:	40000400 	.word	0x40000400
 8008e10:	40000800 	.word	0x40000800
 8008e14:	40000c00 	.word	0x40000c00
 8008e18:	00010007 	.word	0x00010007

08008e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d122      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d11b      	bne.n	8008e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0202 	mvn.w	r2, #2
 8008e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fae6 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fad8 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fae9 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0304 	and.w	r3, r3, #4
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d122      	bne.n	8008ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d11b      	bne.n	8008ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0204 	mvn.w	r2, #4
 8008e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fabc 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8008eb8:	e005      	b.n	8008ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 faae 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fabf 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d122      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d11b      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f06f 0208 	mvn.w	r2, #8
 8008ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2204      	movs	r2, #4
 8008ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa92 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8008f0c:	e005      	b.n	8008f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa84 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa95 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 0310 	and.w	r3, r3, #16
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d122      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b10      	cmp	r3, #16
 8008f3a:	d11b      	bne.n	8008f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f06f 0210 	mvn.w	r2, #16
 8008f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2208      	movs	r2, #8
 8008f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa68 	bl	8009430 <HAL_TIM_IC_CaptureCallback>
 8008f60:	e005      	b.n	8008f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa5a 	bl	800941c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fa6b 	bl	8009444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d10e      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d107      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f06f 0201 	mvn.w	r2, #1
 8008f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fa34 	bl	8009408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008faa:	2b80      	cmp	r3, #128	; 0x80
 8008fac:	d10e      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb8:	2b80      	cmp	r3, #128	; 0x80
 8008fba:	d107      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 ff12 	bl	8009df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fda:	d10e      	bne.n	8008ffa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe6:	2b80      	cmp	r3, #128	; 0x80
 8008fe8:	d107      	bne.n	8008ffa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 ff05 	bl	8009e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b40      	cmp	r3, #64	; 0x40
 8009006:	d10e      	bne.n	8009026 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009012:	2b40      	cmp	r3, #64	; 0x40
 8009014:	d107      	bne.n	8009026 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800901e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa19 	bl	8009458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b20      	cmp	r3, #32
 8009032:	d10e      	bne.n	8009052 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b20      	cmp	r3, #32
 8009040:	d107      	bne.n	8009052 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f06f 0220 	mvn.w	r2, #32
 800904a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fec5 	bl	8009ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800906e:	2b01      	cmp	r3, #1
 8009070:	d101      	bne.n	8009076 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009072:	2302      	movs	r3, #2
 8009074:	e0fd      	b.n	8009272 <HAL_TIM_PWM_ConfigChannel+0x216>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b14      	cmp	r3, #20
 8009082:	f200 80f0 	bhi.w	8009266 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009086:	a201      	add	r2, pc, #4	; (adr r2, 800908c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090e1 	.word	0x080090e1
 8009090:	08009267 	.word	0x08009267
 8009094:	08009267 	.word	0x08009267
 8009098:	08009267 	.word	0x08009267
 800909c:	08009121 	.word	0x08009121
 80090a0:	08009267 	.word	0x08009267
 80090a4:	08009267 	.word	0x08009267
 80090a8:	08009267 	.word	0x08009267
 80090ac:	08009163 	.word	0x08009163
 80090b0:	08009267 	.word	0x08009267
 80090b4:	08009267 	.word	0x08009267
 80090b8:	08009267 	.word	0x08009267
 80090bc:	080091a3 	.word	0x080091a3
 80090c0:	08009267 	.word	0x08009267
 80090c4:	08009267 	.word	0x08009267
 80090c8:	08009267 	.word	0x08009267
 80090cc:	080091e5 	.word	0x080091e5
 80090d0:	08009267 	.word	0x08009267
 80090d4:	08009267 	.word	0x08009267
 80090d8:	08009267 	.word	0x08009267
 80090dc:	08009225 	.word	0x08009225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68b9      	ldr	r1, [r7, #8]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fa5a 	bl	80095a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0208 	orr.w	r2, r2, #8
 80090fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 0204 	bic.w	r2, r2, #4
 800910a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6999      	ldr	r1, [r3, #24]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	691a      	ldr	r2, [r3, #16]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	619a      	str	r2, [r3, #24]
      break;
 800911e:	e0a3      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 faca 	bl	80096c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699a      	ldr	r2, [r3, #24]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800913a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800914a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6999      	ldr	r1, [r3, #24]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	021a      	lsls	r2, r3, #8
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	619a      	str	r2, [r3, #24]
      break;
 8009160:	e082      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fb33 	bl	80097d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69da      	ldr	r2, [r3, #28]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0208 	orr.w	r2, r2, #8
 800917c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0204 	bic.w	r2, r2, #4
 800918c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69d9      	ldr	r1, [r3, #28]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	61da      	str	r2, [r3, #28]
      break;
 80091a0:	e062      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fb9b 	bl	80098e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69d9      	ldr	r1, [r3, #28]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	021a      	lsls	r2, r3, #8
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	61da      	str	r2, [r3, #28]
      break;
 80091e2:	e041      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fbe4 	bl	80099b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0208 	orr.w	r2, r2, #8
 80091fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f022 0204 	bic.w	r2, r2, #4
 800920e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	691a      	ldr	r2, [r3, #16]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009222:	e021      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fc28 	bl	8009a80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	021a      	lsls	r2, r3, #8
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009264:	e000      	b.n	8009268 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop

0800927c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800928c:	2b01      	cmp	r3, #1
 800928e:	d101      	bne.n	8009294 <HAL_TIM_ConfigClockSource+0x18>
 8009290:	2302      	movs	r3, #2
 8009292:	e0b5      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x184>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092d0:	d03e      	beq.n	8009350 <HAL_TIM_ConfigClockSource+0xd4>
 80092d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092d6:	f200 8087 	bhi.w	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 80092da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092de:	f000 8085 	beq.w	80093ec <HAL_TIM_ConfigClockSource+0x170>
 80092e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e6:	d87f      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 80092e8:	2b70      	cmp	r3, #112	; 0x70
 80092ea:	d01a      	beq.n	8009322 <HAL_TIM_ConfigClockSource+0xa6>
 80092ec:	2b70      	cmp	r3, #112	; 0x70
 80092ee:	d87b      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 80092f0:	2b60      	cmp	r3, #96	; 0x60
 80092f2:	d050      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x11a>
 80092f4:	2b60      	cmp	r3, #96	; 0x60
 80092f6:	d877      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 80092f8:	2b50      	cmp	r3, #80	; 0x50
 80092fa:	d03c      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0xfa>
 80092fc:	2b50      	cmp	r3, #80	; 0x50
 80092fe:	d873      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	d058      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x13a>
 8009304:	2b40      	cmp	r3, #64	; 0x40
 8009306:	d86f      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009308:	2b30      	cmp	r3, #48	; 0x30
 800930a:	d064      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x15a>
 800930c:	2b30      	cmp	r3, #48	; 0x30
 800930e:	d86b      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009310:	2b20      	cmp	r3, #32
 8009312:	d060      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x15a>
 8009314:	2b20      	cmp	r3, #32
 8009316:	d867      	bhi.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d05c      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x15a>
 800931c:	2b10      	cmp	r3, #16
 800931e:	d05a      	beq.n	80093d6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009320:	e062      	b.n	80093e8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6899      	ldr	r1, [r3, #8]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f000 fc85 	bl	8009c40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009344:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	609a      	str	r2, [r3, #8]
      break;
 800934e:	e04e      	b.n	80093ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	6899      	ldr	r1, [r3, #8]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f000 fc6e 	bl	8009c40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009372:	609a      	str	r2, [r3, #8]
      break;
 8009374:	e03b      	b.n	80093ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6859      	ldr	r1, [r3, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	461a      	mov	r2, r3
 8009384:	f000 fbe2 	bl	8009b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2150      	movs	r1, #80	; 0x50
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fc3b 	bl	8009c0a <TIM_ITRx_SetConfig>
      break;
 8009394:	e02b      	b.n	80093ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	6859      	ldr	r1, [r3, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f000 fc01 	bl	8009baa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2160      	movs	r1, #96	; 0x60
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fc2b 	bl	8009c0a <TIM_ITRx_SetConfig>
      break;
 80093b4:	e01b      	b.n	80093ee <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	6859      	ldr	r1, [r3, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	461a      	mov	r2, r3
 80093c4:	f000 fbc2 	bl	8009b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2140      	movs	r1, #64	; 0x40
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fc1b 	bl	8009c0a <TIM_ITRx_SetConfig>
      break;
 80093d4:	e00b      	b.n	80093ee <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f000 fc12 	bl	8009c0a <TIM_ITRx_SetConfig>
        break;
 80093e6:	e002      	b.n	80093ee <HAL_TIM_ConfigClockSource+0x172>
      break;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <HAL_TIM_ConfigClockSource+0x172>
      break;
 80093ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a40      	ldr	r2, [pc, #256]	; (8009580 <TIM_Base_SetConfig+0x114>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d013      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800948a:	d00f      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a3d      	ldr	r2, [pc, #244]	; (8009584 <TIM_Base_SetConfig+0x118>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00b      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a3c      	ldr	r2, [pc, #240]	; (8009588 <TIM_Base_SetConfig+0x11c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d007      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a3b      	ldr	r2, [pc, #236]	; (800958c <TIM_Base_SetConfig+0x120>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <TIM_Base_SetConfig+0x40>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a3a      	ldr	r2, [pc, #232]	; (8009590 <TIM_Base_SetConfig+0x124>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d108      	bne.n	80094be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2f      	ldr	r2, [pc, #188]	; (8009580 <TIM_Base_SetConfig+0x114>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01f      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094cc:	d01b      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a2c      	ldr	r2, [pc, #176]	; (8009584 <TIM_Base_SetConfig+0x118>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d017      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a2b      	ldr	r2, [pc, #172]	; (8009588 <TIM_Base_SetConfig+0x11c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d013      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a2a      	ldr	r2, [pc, #168]	; (800958c <TIM_Base_SetConfig+0x120>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00f      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a29      	ldr	r2, [pc, #164]	; (8009590 <TIM_Base_SetConfig+0x124>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d00b      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a28      	ldr	r2, [pc, #160]	; (8009594 <TIM_Base_SetConfig+0x128>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d007      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a27      	ldr	r2, [pc, #156]	; (8009598 <TIM_Base_SetConfig+0x12c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d003      	beq.n	8009506 <TIM_Base_SetConfig+0x9a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a26      	ldr	r2, [pc, #152]	; (800959c <TIM_Base_SetConfig+0x130>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d108      	bne.n	8009518 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800950c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4313      	orrs	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	689a      	ldr	r2, [r3, #8]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a10      	ldr	r2, [pc, #64]	; (8009580 <TIM_Base_SetConfig+0x114>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d00f      	beq.n	8009564 <TIM_Base_SetConfig+0xf8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a12      	ldr	r2, [pc, #72]	; (8009590 <TIM_Base_SetConfig+0x124>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00b      	beq.n	8009564 <TIM_Base_SetConfig+0xf8>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a11      	ldr	r2, [pc, #68]	; (8009594 <TIM_Base_SetConfig+0x128>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d007      	beq.n	8009564 <TIM_Base_SetConfig+0xf8>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a10      	ldr	r2, [pc, #64]	; (8009598 <TIM_Base_SetConfig+0x12c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d003      	beq.n	8009564 <TIM_Base_SetConfig+0xf8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a0f      	ldr	r2, [pc, #60]	; (800959c <TIM_Base_SetConfig+0x130>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d103      	bne.n	800956c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	691a      	ldr	r2, [r3, #16]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	615a      	str	r2, [r3, #20]
}
 8009572:	bf00      	nop
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	40012c00 	.word	0x40012c00
 8009584:	40000400 	.word	0x40000400
 8009588:	40000800 	.word	0x40000800
 800958c:	40000c00 	.word	0x40000c00
 8009590:	40013400 	.word	0x40013400
 8009594:	40014000 	.word	0x40014000
 8009598:	40014400 	.word	0x40014400
 800959c:	40014800 	.word	0x40014800

080095a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	f023 0201 	bic.w	r2, r3, #1
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0303 	bic.w	r3, r3, #3
 80095da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f023 0302 	bic.w	r3, r3, #2
 80095ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a2c      	ldr	r2, [pc, #176]	; (80096ac <TIM_OC1_SetConfig+0x10c>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00f      	beq.n	8009620 <TIM_OC1_SetConfig+0x80>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a2b      	ldr	r2, [pc, #172]	; (80096b0 <TIM_OC1_SetConfig+0x110>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d00b      	beq.n	8009620 <TIM_OC1_SetConfig+0x80>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a2a      	ldr	r2, [pc, #168]	; (80096b4 <TIM_OC1_SetConfig+0x114>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d007      	beq.n	8009620 <TIM_OC1_SetConfig+0x80>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a29      	ldr	r2, [pc, #164]	; (80096b8 <TIM_OC1_SetConfig+0x118>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d003      	beq.n	8009620 <TIM_OC1_SetConfig+0x80>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a28      	ldr	r2, [pc, #160]	; (80096bc <TIM_OC1_SetConfig+0x11c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d10c      	bne.n	800963a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f023 0308 	bic.w	r3, r3, #8
 8009626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	4313      	orrs	r3, r2
 8009630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f023 0304 	bic.w	r3, r3, #4
 8009638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a1b      	ldr	r2, [pc, #108]	; (80096ac <TIM_OC1_SetConfig+0x10c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00f      	beq.n	8009662 <TIM_OC1_SetConfig+0xc2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a1a      	ldr	r2, [pc, #104]	; (80096b0 <TIM_OC1_SetConfig+0x110>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00b      	beq.n	8009662 <TIM_OC1_SetConfig+0xc2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a19      	ldr	r2, [pc, #100]	; (80096b4 <TIM_OC1_SetConfig+0x114>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d007      	beq.n	8009662 <TIM_OC1_SetConfig+0xc2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a18      	ldr	r2, [pc, #96]	; (80096b8 <TIM_OC1_SetConfig+0x118>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d003      	beq.n	8009662 <TIM_OC1_SetConfig+0xc2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a17      	ldr	r2, [pc, #92]	; (80096bc <TIM_OC1_SetConfig+0x11c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d111      	bne.n	8009686 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	4313      	orrs	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	4313      	orrs	r3, r2
 8009684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	621a      	str	r2, [r3, #32]
}
 80096a0:	bf00      	nop
 80096a2:	371c      	adds	r7, #28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	40012c00 	.word	0x40012c00
 80096b0:	40013400 	.word	0x40013400
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40014400 	.word	0x40014400
 80096bc:	40014800 	.word	0x40014800

080096c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f023 0210 	bic.w	r2, r3, #16
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	021b      	lsls	r3, r3, #8
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4313      	orrs	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f023 0320 	bic.w	r3, r3, #32
 800970e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	4313      	orrs	r3, r2
 800971a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a28      	ldr	r2, [pc, #160]	; (80097c0 <TIM_OC2_SetConfig+0x100>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d003      	beq.n	800972c <TIM_OC2_SetConfig+0x6c>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a27      	ldr	r2, [pc, #156]	; (80097c4 <TIM_OC2_SetConfig+0x104>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d10d      	bne.n	8009748 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	011b      	lsls	r3, r3, #4
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a1d      	ldr	r2, [pc, #116]	; (80097c0 <TIM_OC2_SetConfig+0x100>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00f      	beq.n	8009770 <TIM_OC2_SetConfig+0xb0>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a1c      	ldr	r2, [pc, #112]	; (80097c4 <TIM_OC2_SetConfig+0x104>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d00b      	beq.n	8009770 <TIM_OC2_SetConfig+0xb0>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a1b      	ldr	r2, [pc, #108]	; (80097c8 <TIM_OC2_SetConfig+0x108>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d007      	beq.n	8009770 <TIM_OC2_SetConfig+0xb0>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a1a      	ldr	r2, [pc, #104]	; (80097cc <TIM_OC2_SetConfig+0x10c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d003      	beq.n	8009770 <TIM_OC2_SetConfig+0xb0>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a19      	ldr	r2, [pc, #100]	; (80097d0 <TIM_OC2_SetConfig+0x110>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d113      	bne.n	8009798 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800977e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	4313      	orrs	r3, r2
 800978a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	621a      	str	r2, [r3, #32]
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	40012c00 	.word	0x40012c00
 80097c4:	40013400 	.word	0x40013400
 80097c8:	40014000 	.word	0x40014000
 80097cc:	40014400 	.word	0x40014400
 80097d0:	40014800 	.word	0x40014800

080097d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b087      	sub	sp, #28
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f023 0303 	bic.w	r3, r3, #3
 800980e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	4313      	orrs	r3, r2
 8009818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	4313      	orrs	r3, r2
 800982c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a27      	ldr	r2, [pc, #156]	; (80098d0 <TIM_OC3_SetConfig+0xfc>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d003      	beq.n	800983e <TIM_OC3_SetConfig+0x6a>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a26      	ldr	r2, [pc, #152]	; (80098d4 <TIM_OC3_SetConfig+0x100>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d10d      	bne.n	800985a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a1c      	ldr	r2, [pc, #112]	; (80098d0 <TIM_OC3_SetConfig+0xfc>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00f      	beq.n	8009882 <TIM_OC3_SetConfig+0xae>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a1b      	ldr	r2, [pc, #108]	; (80098d4 <TIM_OC3_SetConfig+0x100>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00b      	beq.n	8009882 <TIM_OC3_SetConfig+0xae>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a1a      	ldr	r2, [pc, #104]	; (80098d8 <TIM_OC3_SetConfig+0x104>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d007      	beq.n	8009882 <TIM_OC3_SetConfig+0xae>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a19      	ldr	r2, [pc, #100]	; (80098dc <TIM_OC3_SetConfig+0x108>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d003      	beq.n	8009882 <TIM_OC3_SetConfig+0xae>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a18      	ldr	r2, [pc, #96]	; (80098e0 <TIM_OC3_SetConfig+0x10c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d113      	bne.n	80098aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	011b      	lsls	r3, r3, #4
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4313      	orrs	r3, r2
 800989c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	621a      	str	r2, [r3, #32]
}
 80098c4:	bf00      	nop
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	40012c00 	.word	0x40012c00
 80098d4:	40013400 	.word	0x40013400
 80098d8:	40014000 	.word	0x40014000
 80098dc:	40014400 	.word	0x40014400
 80098e0:	40014800 	.word	0x40014800

080098e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800991e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	031b      	lsls	r3, r3, #12
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	4313      	orrs	r3, r2
 800993e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a18      	ldr	r2, [pc, #96]	; (80099a4 <TIM_OC4_SetConfig+0xc0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00f      	beq.n	8009968 <TIM_OC4_SetConfig+0x84>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a17      	ldr	r2, [pc, #92]	; (80099a8 <TIM_OC4_SetConfig+0xc4>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d00b      	beq.n	8009968 <TIM_OC4_SetConfig+0x84>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a16      	ldr	r2, [pc, #88]	; (80099ac <TIM_OC4_SetConfig+0xc8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d007      	beq.n	8009968 <TIM_OC4_SetConfig+0x84>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a15      	ldr	r2, [pc, #84]	; (80099b0 <TIM_OC4_SetConfig+0xcc>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d003      	beq.n	8009968 <TIM_OC4_SetConfig+0x84>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a14      	ldr	r2, [pc, #80]	; (80099b4 <TIM_OC4_SetConfig+0xd0>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d109      	bne.n	800997c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800996e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	019b      	lsls	r3, r3, #6
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	4313      	orrs	r3, r2
 800997a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	621a      	str	r2, [r3, #32]
}
 8009996:	bf00      	nop
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40012c00 	.word	0x40012c00
 80099a8:	40013400 	.word	0x40013400
 80099ac:	40014000 	.word	0x40014000
 80099b0:	40014400 	.word	0x40014400
 80099b4:	40014800 	.word	0x40014800

080099b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80099fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	041b      	lsls	r3, r3, #16
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a17      	ldr	r2, [pc, #92]	; (8009a6c <TIM_OC5_SetConfig+0xb4>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d00f      	beq.n	8009a32 <TIM_OC5_SetConfig+0x7a>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a16      	ldr	r2, [pc, #88]	; (8009a70 <TIM_OC5_SetConfig+0xb8>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00b      	beq.n	8009a32 <TIM_OC5_SetConfig+0x7a>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a15      	ldr	r2, [pc, #84]	; (8009a74 <TIM_OC5_SetConfig+0xbc>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d007      	beq.n	8009a32 <TIM_OC5_SetConfig+0x7a>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a14      	ldr	r2, [pc, #80]	; (8009a78 <TIM_OC5_SetConfig+0xc0>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d003      	beq.n	8009a32 <TIM_OC5_SetConfig+0x7a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a13      	ldr	r2, [pc, #76]	; (8009a7c <TIM_OC5_SetConfig+0xc4>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d109      	bne.n	8009a46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	021b      	lsls	r3, r3, #8
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	621a      	str	r2, [r3, #32]
}
 8009a60:	bf00      	nop
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	40012c00 	.word	0x40012c00
 8009a70:	40013400 	.word	0x40013400
 8009a74:	40014000 	.word	0x40014000
 8009a78:	40014400 	.word	0x40014400
 8009a7c:	40014800 	.word	0x40014800

08009a80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	021b      	lsls	r3, r3, #8
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	051b      	lsls	r3, r3, #20
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a18      	ldr	r2, [pc, #96]	; (8009b38 <TIM_OC6_SetConfig+0xb8>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00f      	beq.n	8009afc <TIM_OC6_SetConfig+0x7c>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a17      	ldr	r2, [pc, #92]	; (8009b3c <TIM_OC6_SetConfig+0xbc>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00b      	beq.n	8009afc <TIM_OC6_SetConfig+0x7c>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a16      	ldr	r2, [pc, #88]	; (8009b40 <TIM_OC6_SetConfig+0xc0>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d007      	beq.n	8009afc <TIM_OC6_SetConfig+0x7c>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a15      	ldr	r2, [pc, #84]	; (8009b44 <TIM_OC6_SetConfig+0xc4>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_OC6_SetConfig+0x7c>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a14      	ldr	r2, [pc, #80]	; (8009b48 <TIM_OC6_SetConfig+0xc8>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d109      	bne.n	8009b10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	695b      	ldr	r3, [r3, #20]
 8009b08:	029b      	lsls	r3, r3, #10
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	621a      	str	r2, [r3, #32]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	40012c00 	.word	0x40012c00
 8009b3c:	40013400 	.word	0x40013400
 8009b40:	40014000 	.word	0x40014000
 8009b44:	40014400 	.word	0x40014400
 8009b48:	40014800 	.word	0x40014800

08009b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	f023 0201 	bic.w	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f023 030a 	bic.w	r3, r3, #10
 8009b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	621a      	str	r2, [r3, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b087      	sub	sp, #28
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	f023 0210 	bic.w	r2, r3, #16
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	031b      	lsls	r3, r3, #12
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	011b      	lsls	r3, r3, #4
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	621a      	str	r2, [r3, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f043 0307 	orr.w	r3, r3, #7
 8009c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	609a      	str	r2, [r3, #8]
}
 8009c34:	bf00      	nop
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	021a      	lsls	r2, r3, #8
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	431a      	orrs	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	609a      	str	r2, [r3, #8]
}
 8009c74:	bf00      	nop
 8009c76:	371c      	adds	r7, #28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f003 031f 	and.w	r3, r3, #31
 8009c92:	2201      	movs	r2, #1
 8009c94:	fa02 f303 	lsl.w	r3, r2, r3
 8009c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a1a      	ldr	r2, [r3, #32]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a1a      	ldr	r2, [r3, #32]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f003 031f 	and.w	r3, r3, #31
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	621a      	str	r2, [r3, #32]
}
 8009cbe:	bf00      	nop
 8009cc0:	371c      	adds	r7, #28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
	...

08009ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d101      	bne.n	8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e068      	b.n	8009db6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a2e      	ldr	r2, [pc, #184]	; (8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a2d      	ldr	r2, [pc, #180]	; (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d108      	bne.n	8009d2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a1e      	ldr	r2, [pc, #120]	; (8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d01d      	beq.n	8009d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d56:	d018      	beq.n	8009d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a1b      	ldr	r2, [pc, #108]	; (8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d013      	beq.n	8009d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a1a      	ldr	r2, [pc, #104]	; (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d00e      	beq.n	8009d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a18      	ldr	r2, [pc, #96]	; (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d009      	beq.n	8009d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a13      	ldr	r2, [pc, #76]	; (8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d004      	beq.n	8009d8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a14      	ldr	r2, [pc, #80]	; (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d10c      	bne.n	8009da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40012c00 	.word	0x40012c00
 8009dc8:	40013400 	.word	0x40013400
 8009dcc:	40000400 	.word	0x40000400
 8009dd0:	40000800 	.word	0x40000800
 8009dd4:	40000c00 	.word	0x40000c00
 8009dd8:	40014000 	.word	0x40014000

08009ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e040      	b.n	8009eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7f9 fbda 	bl	80035f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2224      	movs	r2, #36	; 0x24
 8009e44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0201 	bic.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fabc 	bl	800a3d4 <UART_SetConfig>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e022      	b.n	8009eac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d002      	beq.n	8009e74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fd3a 	bl	800a8e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689a      	ldr	r2, [r3, #8]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0201 	orr.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fdc1 	bl	800aa2c <UART_CheckIdleState>
 8009eaa:	4603      	mov	r3, r0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08a      	sub	sp, #40	; 0x28
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	f040 8081 	bne.w	8009fd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <HAL_UART_Transmit+0x26>
 8009ed4:	88fb      	ldrh	r3, [r7, #6]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	e079      	b.n	8009fd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_UART_Transmit+0x38>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e072      	b.n	8009fd2 <HAL_UART_Transmit+0x11e>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2221      	movs	r2, #33	; 0x21
 8009efe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009f00:	f7fa fae8 	bl	80044d4 <HAL_GetTick>
 8009f04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	88fa      	ldrh	r2, [r7, #6]
 8009f0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	88fa      	ldrh	r2, [r7, #6]
 8009f12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f1e:	d108      	bne.n	8009f32 <HAL_UART_Transmit+0x7e>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	61bb      	str	r3, [r7, #24]
 8009f30:	e003      	b.n	8009f3a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009f42:	e02d      	b.n	8009fa0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2180      	movs	r1, #128	; 0x80
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 fdb1 	bl	800aab6 <UART_WaitOnFlagUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e039      	b.n	8009fd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10b      	bne.n	8009f7c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	881a      	ldrh	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f70:	b292      	uxth	r2, r2
 8009f72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	3302      	adds	r3, #2
 8009f78:	61bb      	str	r3, [r7, #24]
 8009f7a:	e008      	b.n	8009f8e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	781a      	ldrb	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	b292      	uxth	r2, r2
 8009f86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1cb      	bne.n	8009f44 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2140      	movs	r1, #64	; 0x40
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f000 fd7d 	bl	800aab6 <UART_WaitOnFlagUntilTimeout>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e005      	b.n	8009fd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e000      	b.n	8009fd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009fd0:	2302      	movs	r3, #2
  }
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	f040 808a 	bne.w	800a108 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <HAL_UART_Receive_IT+0x24>
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e082      	b.n	800a10a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_UART_Receive_IT+0x36>
 800a00e:	2302      	movs	r3, #2
 800a010:	e07b      	b.n	800a10a <HAL_UART_Receive_IT+0x12e>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	88fa      	ldrh	r2, [r7, #6]
 800a024:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a03e:	d10e      	bne.n	800a05e <HAL_UART_Receive_IT+0x82>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d105      	bne.n	800a054 <HAL_UART_Receive_IT+0x78>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a04e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a052:	e02d      	b.n	800a0b0 <HAL_UART_Receive_IT+0xd4>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	22ff      	movs	r2, #255	; 0xff
 800a058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a05c:	e028      	b.n	800a0b0 <HAL_UART_Receive_IT+0xd4>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10d      	bne.n	800a082 <HAL_UART_Receive_IT+0xa6>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d104      	bne.n	800a078 <HAL_UART_Receive_IT+0x9c>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	22ff      	movs	r2, #255	; 0xff
 800a072:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a076:	e01b      	b.n	800a0b0 <HAL_UART_Receive_IT+0xd4>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	227f      	movs	r2, #127	; 0x7f
 800a07c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a080:	e016      	b.n	800a0b0 <HAL_UART_Receive_IT+0xd4>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a08a:	d10d      	bne.n	800a0a8 <HAL_UART_Receive_IT+0xcc>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <HAL_UART_Receive_IT+0xc2>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	227f      	movs	r2, #127	; 0x7f
 800a098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a09c:	e008      	b.n	800a0b0 <HAL_UART_Receive_IT+0xd4>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	223f      	movs	r2, #63	; 0x3f
 800a0a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a0a6:	e003      	b.n	800a0b0 <HAL_UART_Receive_IT+0xd4>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2222      	movs	r2, #34	; 0x22
 800a0ba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689a      	ldr	r2, [r3, #8]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d4:	d107      	bne.n	800a0e6 <HAL_UART_Receive_IT+0x10a>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	4a0d      	ldr	r2, [pc, #52]	; (800a118 <HAL_UART_Receive_IT+0x13c>)
 800a0e2:	661a      	str	r2, [r3, #96]	; 0x60
 800a0e4:	e002      	b.n	800a0ec <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4a0c      	ldr	r2, [pc, #48]	; (800a11c <HAL_UART_Receive_IT+0x140>)
 800a0ea:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a102:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	e000      	b.n	800a10a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a108:	2302      	movs	r3, #2
  }
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	0800acf5 	.word	0x0800acf5
 800a11c:	0800ac4b 	.word	0x0800ac4b

0800a120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	f640 030f 	movw	r3, #2063	; 0x80f
 800a146:	4013      	ands	r3, r2
 800a148:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d113      	bne.n	800a178 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00e      	beq.n	800a178 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	f003 0320 	and.w	r3, r3, #32
 800a160:	2b00      	cmp	r3, #0
 800a162:	d009      	beq.n	800a178 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 8113 	beq.w	800a394 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	4798      	blx	r3
      }
      return;
 800a176:	e10d      	b.n	800a394 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 80d6 	beq.w	800a32c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d105      	bne.n	800a196 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	4b85      	ldr	r3, [pc, #532]	; (800a3a4 <HAL_UART_IRQHandler+0x284>)
 800a18e:	4013      	ands	r3, r2
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 80cb 	beq.w	800a32c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00e      	beq.n	800a1be <HAL_UART_IRQHandler+0x9e>
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d009      	beq.n	800a1be <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1b6:	f043 0201 	orr.w	r2, r3, #1
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	f003 0302 	and.w	r3, r3, #2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00e      	beq.n	800a1e6 <HAL_UART_IRQHandler+0xc6>
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d009      	beq.n	800a1e6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1de:	f043 0204 	orr.w	r2, r3, #4
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	f003 0304 	and.w	r3, r3, #4
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00e      	beq.n	800a20e <HAL_UART_IRQHandler+0xee>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f003 0301 	and.w	r3, r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2204      	movs	r2, #4
 800a200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a206:	f043 0202 	orr.w	r2, r3, #2
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b00      	cmp	r3, #0
 800a216:	d013      	beq.n	800a240 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d104      	bne.n	800a22c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d009      	beq.n	800a240 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2208      	movs	r2, #8
 800a232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a238:	f043 0208 	orr.w	r2, r3, #8
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00f      	beq.n	800a26a <HAL_UART_IRQHandler+0x14a>
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00a      	beq.n	800a26a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a25c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a262:	f043 0220 	orr.w	r2, r3, #32
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 8092 	beq.w	800a398 <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d007      	beq.n	800a298 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a29c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a8:	2b40      	cmp	r3, #64	; 0x40
 800a2aa:	d004      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d031      	beq.n	800a31a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fc78 	bl	800abac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c6:	2b40      	cmp	r3, #64	; 0x40
 800a2c8:	d123      	bne.n	800a312 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2d8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d013      	beq.n	800a30a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e6:	4a30      	ldr	r2, [pc, #192]	; (800a3a8 <HAL_UART_IRQHandler+0x288>)
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fa fa31 	bl	8004756 <HAL_DMA_Abort_IT>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d016      	beq.n	800a328 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a304:	4610      	mov	r0, r2
 800a306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a308:	e00e      	b.n	800a328 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f858 	bl	800a3c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a310:	e00a      	b.n	800a328 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f854 	bl	800a3c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a318:	e006      	b.n	800a328 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f850 	bl	800a3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a326:	e037      	b.n	800a398 <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a328:	bf00      	nop
    return;
 800a32a:	e035      	b.n	800a398 <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00d      	beq.n	800a352 <HAL_UART_IRQHandler+0x232>
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d008      	beq.n	800a352 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fd27 	bl	800ad9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a350:	e025      	b.n	800a39e <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00d      	beq.n	800a378 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a362:	2b00      	cmp	r3, #0
 800a364:	d008      	beq.n	800a378 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d016      	beq.n	800a39c <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	4798      	blx	r3
    }
    return;
 800a376:	e011      	b.n	800a39c <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00d      	beq.n	800a39e <HAL_UART_IRQHandler+0x27e>
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d008      	beq.n	800a39e <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fc43 	bl	800ac18 <UART_EndTransmit_IT>
    return;
 800a392:	e004      	b.n	800a39e <HAL_UART_IRQHandler+0x27e>
      return;
 800a394:	bf00      	nop
 800a396:	e002      	b.n	800a39e <HAL_UART_IRQHandler+0x27e>
    return;
 800a398:	bf00      	nop
 800a39a:	e000      	b.n	800a39e <HAL_UART_IRQHandler+0x27e>
    return;
 800a39c:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	04000120 	.word	0x04000120
 800a3a8:	0800abed 	.word	0x0800abed

0800a3ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3d4:	b5b0      	push	{r4, r5, r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4bad      	ldr	r3, [pc, #692]	; (800a6b4 <UART_SetConfig+0x2e0>)
 800a400:	4013      	ands	r3, r2
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	69f9      	ldr	r1, [r7, #28]
 800a408:	430b      	orrs	r3, r1
 800a40a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4aa2      	ldr	r2, [pc, #648]	; (800a6b8 <UART_SetConfig+0x2e4>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d004      	beq.n	800a43c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	4313      	orrs	r3, r2
 800a43a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	69fa      	ldr	r2, [r7, #28]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a99      	ldr	r2, [pc, #612]	; (800a6bc <UART_SetConfig+0x2e8>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d121      	bne.n	800a49e <UART_SetConfig+0xca>
 800a45a:	4b99      	ldr	r3, [pc, #612]	; (800a6c0 <UART_SetConfig+0x2ec>)
 800a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a460:	f003 0303 	and.w	r3, r3, #3
 800a464:	2b03      	cmp	r3, #3
 800a466:	d817      	bhi.n	800a498 <UART_SetConfig+0xc4>
 800a468:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <UART_SetConfig+0x9c>)
 800a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46e:	bf00      	nop
 800a470:	0800a481 	.word	0x0800a481
 800a474:	0800a48d 	.word	0x0800a48d
 800a478:	0800a487 	.word	0x0800a487
 800a47c:	0800a493 	.word	0x0800a493
 800a480:	2301      	movs	r3, #1
 800a482:	76fb      	strb	r3, [r7, #27]
 800a484:	e0e7      	b.n	800a656 <UART_SetConfig+0x282>
 800a486:	2302      	movs	r3, #2
 800a488:	76fb      	strb	r3, [r7, #27]
 800a48a:	e0e4      	b.n	800a656 <UART_SetConfig+0x282>
 800a48c:	2304      	movs	r3, #4
 800a48e:	76fb      	strb	r3, [r7, #27]
 800a490:	e0e1      	b.n	800a656 <UART_SetConfig+0x282>
 800a492:	2308      	movs	r3, #8
 800a494:	76fb      	strb	r3, [r7, #27]
 800a496:	e0de      	b.n	800a656 <UART_SetConfig+0x282>
 800a498:	2310      	movs	r3, #16
 800a49a:	76fb      	strb	r3, [r7, #27]
 800a49c:	e0db      	b.n	800a656 <UART_SetConfig+0x282>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a88      	ldr	r2, [pc, #544]	; (800a6c4 <UART_SetConfig+0x2f0>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d132      	bne.n	800a50e <UART_SetConfig+0x13a>
 800a4a8:	4b85      	ldr	r3, [pc, #532]	; (800a6c0 <UART_SetConfig+0x2ec>)
 800a4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ae:	f003 030c 	and.w	r3, r3, #12
 800a4b2:	2b0c      	cmp	r3, #12
 800a4b4:	d828      	bhi.n	800a508 <UART_SetConfig+0x134>
 800a4b6:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <UART_SetConfig+0xe8>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a4f1 	.word	0x0800a4f1
 800a4c0:	0800a509 	.word	0x0800a509
 800a4c4:	0800a509 	.word	0x0800a509
 800a4c8:	0800a509 	.word	0x0800a509
 800a4cc:	0800a4fd 	.word	0x0800a4fd
 800a4d0:	0800a509 	.word	0x0800a509
 800a4d4:	0800a509 	.word	0x0800a509
 800a4d8:	0800a509 	.word	0x0800a509
 800a4dc:	0800a4f7 	.word	0x0800a4f7
 800a4e0:	0800a509 	.word	0x0800a509
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a509 	.word	0x0800a509
 800a4ec:	0800a503 	.word	0x0800a503
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	76fb      	strb	r3, [r7, #27]
 800a4f4:	e0af      	b.n	800a656 <UART_SetConfig+0x282>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	76fb      	strb	r3, [r7, #27]
 800a4fa:	e0ac      	b.n	800a656 <UART_SetConfig+0x282>
 800a4fc:	2304      	movs	r3, #4
 800a4fe:	76fb      	strb	r3, [r7, #27]
 800a500:	e0a9      	b.n	800a656 <UART_SetConfig+0x282>
 800a502:	2308      	movs	r3, #8
 800a504:	76fb      	strb	r3, [r7, #27]
 800a506:	e0a6      	b.n	800a656 <UART_SetConfig+0x282>
 800a508:	2310      	movs	r3, #16
 800a50a:	76fb      	strb	r3, [r7, #27]
 800a50c:	e0a3      	b.n	800a656 <UART_SetConfig+0x282>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a6d      	ldr	r2, [pc, #436]	; (800a6c8 <UART_SetConfig+0x2f4>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d120      	bne.n	800a55a <UART_SetConfig+0x186>
 800a518:	4b69      	ldr	r3, [pc, #420]	; (800a6c0 <UART_SetConfig+0x2ec>)
 800a51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a522:	2b30      	cmp	r3, #48	; 0x30
 800a524:	d013      	beq.n	800a54e <UART_SetConfig+0x17a>
 800a526:	2b30      	cmp	r3, #48	; 0x30
 800a528:	d814      	bhi.n	800a554 <UART_SetConfig+0x180>
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d009      	beq.n	800a542 <UART_SetConfig+0x16e>
 800a52e:	2b20      	cmp	r3, #32
 800a530:	d810      	bhi.n	800a554 <UART_SetConfig+0x180>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <UART_SetConfig+0x168>
 800a536:	2b10      	cmp	r3, #16
 800a538:	d006      	beq.n	800a548 <UART_SetConfig+0x174>
 800a53a:	e00b      	b.n	800a554 <UART_SetConfig+0x180>
 800a53c:	2300      	movs	r3, #0
 800a53e:	76fb      	strb	r3, [r7, #27]
 800a540:	e089      	b.n	800a656 <UART_SetConfig+0x282>
 800a542:	2302      	movs	r3, #2
 800a544:	76fb      	strb	r3, [r7, #27]
 800a546:	e086      	b.n	800a656 <UART_SetConfig+0x282>
 800a548:	2304      	movs	r3, #4
 800a54a:	76fb      	strb	r3, [r7, #27]
 800a54c:	e083      	b.n	800a656 <UART_SetConfig+0x282>
 800a54e:	2308      	movs	r3, #8
 800a550:	76fb      	strb	r3, [r7, #27]
 800a552:	e080      	b.n	800a656 <UART_SetConfig+0x282>
 800a554:	2310      	movs	r3, #16
 800a556:	76fb      	strb	r3, [r7, #27]
 800a558:	e07d      	b.n	800a656 <UART_SetConfig+0x282>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a5b      	ldr	r2, [pc, #364]	; (800a6cc <UART_SetConfig+0x2f8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d120      	bne.n	800a5a6 <UART_SetConfig+0x1d2>
 800a564:	4b56      	ldr	r3, [pc, #344]	; (800a6c0 <UART_SetConfig+0x2ec>)
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a56e:	2bc0      	cmp	r3, #192	; 0xc0
 800a570:	d013      	beq.n	800a59a <UART_SetConfig+0x1c6>
 800a572:	2bc0      	cmp	r3, #192	; 0xc0
 800a574:	d814      	bhi.n	800a5a0 <UART_SetConfig+0x1cc>
 800a576:	2b80      	cmp	r3, #128	; 0x80
 800a578:	d009      	beq.n	800a58e <UART_SetConfig+0x1ba>
 800a57a:	2b80      	cmp	r3, #128	; 0x80
 800a57c:	d810      	bhi.n	800a5a0 <UART_SetConfig+0x1cc>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <UART_SetConfig+0x1b4>
 800a582:	2b40      	cmp	r3, #64	; 0x40
 800a584:	d006      	beq.n	800a594 <UART_SetConfig+0x1c0>
 800a586:	e00b      	b.n	800a5a0 <UART_SetConfig+0x1cc>
 800a588:	2300      	movs	r3, #0
 800a58a:	76fb      	strb	r3, [r7, #27]
 800a58c:	e063      	b.n	800a656 <UART_SetConfig+0x282>
 800a58e:	2302      	movs	r3, #2
 800a590:	76fb      	strb	r3, [r7, #27]
 800a592:	e060      	b.n	800a656 <UART_SetConfig+0x282>
 800a594:	2304      	movs	r3, #4
 800a596:	76fb      	strb	r3, [r7, #27]
 800a598:	e05d      	b.n	800a656 <UART_SetConfig+0x282>
 800a59a:	2308      	movs	r3, #8
 800a59c:	76fb      	strb	r3, [r7, #27]
 800a59e:	e05a      	b.n	800a656 <UART_SetConfig+0x282>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	76fb      	strb	r3, [r7, #27]
 800a5a4:	e057      	b.n	800a656 <UART_SetConfig+0x282>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a49      	ldr	r2, [pc, #292]	; (800a6d0 <UART_SetConfig+0x2fc>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d125      	bne.n	800a5fc <UART_SetConfig+0x228>
 800a5b0:	4b43      	ldr	r3, [pc, #268]	; (800a6c0 <UART_SetConfig+0x2ec>)
 800a5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5be:	d017      	beq.n	800a5f0 <UART_SetConfig+0x21c>
 800a5c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5c4:	d817      	bhi.n	800a5f6 <UART_SetConfig+0x222>
 800a5c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ca:	d00b      	beq.n	800a5e4 <UART_SetConfig+0x210>
 800a5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5d0:	d811      	bhi.n	800a5f6 <UART_SetConfig+0x222>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <UART_SetConfig+0x20a>
 800a5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5da:	d006      	beq.n	800a5ea <UART_SetConfig+0x216>
 800a5dc:	e00b      	b.n	800a5f6 <UART_SetConfig+0x222>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	76fb      	strb	r3, [r7, #27]
 800a5e2:	e038      	b.n	800a656 <UART_SetConfig+0x282>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	76fb      	strb	r3, [r7, #27]
 800a5e8:	e035      	b.n	800a656 <UART_SetConfig+0x282>
 800a5ea:	2304      	movs	r3, #4
 800a5ec:	76fb      	strb	r3, [r7, #27]
 800a5ee:	e032      	b.n	800a656 <UART_SetConfig+0x282>
 800a5f0:	2308      	movs	r3, #8
 800a5f2:	76fb      	strb	r3, [r7, #27]
 800a5f4:	e02f      	b.n	800a656 <UART_SetConfig+0x282>
 800a5f6:	2310      	movs	r3, #16
 800a5f8:	76fb      	strb	r3, [r7, #27]
 800a5fa:	e02c      	b.n	800a656 <UART_SetConfig+0x282>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a2d      	ldr	r2, [pc, #180]	; (800a6b8 <UART_SetConfig+0x2e4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d125      	bne.n	800a652 <UART_SetConfig+0x27e>
 800a606:	4b2e      	ldr	r3, [pc, #184]	; (800a6c0 <UART_SetConfig+0x2ec>)
 800a608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a614:	d017      	beq.n	800a646 <UART_SetConfig+0x272>
 800a616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a61a:	d817      	bhi.n	800a64c <UART_SetConfig+0x278>
 800a61c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a620:	d00b      	beq.n	800a63a <UART_SetConfig+0x266>
 800a622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a626:	d811      	bhi.n	800a64c <UART_SetConfig+0x278>
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <UART_SetConfig+0x260>
 800a62c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a630:	d006      	beq.n	800a640 <UART_SetConfig+0x26c>
 800a632:	e00b      	b.n	800a64c <UART_SetConfig+0x278>
 800a634:	2300      	movs	r3, #0
 800a636:	76fb      	strb	r3, [r7, #27]
 800a638:	e00d      	b.n	800a656 <UART_SetConfig+0x282>
 800a63a:	2302      	movs	r3, #2
 800a63c:	76fb      	strb	r3, [r7, #27]
 800a63e:	e00a      	b.n	800a656 <UART_SetConfig+0x282>
 800a640:	2304      	movs	r3, #4
 800a642:	76fb      	strb	r3, [r7, #27]
 800a644:	e007      	b.n	800a656 <UART_SetConfig+0x282>
 800a646:	2308      	movs	r3, #8
 800a648:	76fb      	strb	r3, [r7, #27]
 800a64a:	e004      	b.n	800a656 <UART_SetConfig+0x282>
 800a64c:	2310      	movs	r3, #16
 800a64e:	76fb      	strb	r3, [r7, #27]
 800a650:	e001      	b.n	800a656 <UART_SetConfig+0x282>
 800a652:	2310      	movs	r3, #16
 800a654:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <UART_SetConfig+0x2e4>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	f040 8087 	bne.w	800a770 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a662:	7efb      	ldrb	r3, [r7, #27]
 800a664:	2b08      	cmp	r3, #8
 800a666:	d837      	bhi.n	800a6d8 <UART_SetConfig+0x304>
 800a668:	a201      	add	r2, pc, #4	; (adr r2, 800a670 <UART_SetConfig+0x29c>)
 800a66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66e:	bf00      	nop
 800a670:	0800a695 	.word	0x0800a695
 800a674:	0800a6d9 	.word	0x0800a6d9
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6d9 	.word	0x0800a6d9
 800a680:	0800a6a3 	.word	0x0800a6a3
 800a684:	0800a6d9 	.word	0x0800a6d9
 800a688:	0800a6d9 	.word	0x0800a6d9
 800a68c:	0800a6d9 	.word	0x0800a6d9
 800a690:	0800a6ab 	.word	0x0800a6ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a694:	f7fb fdbe 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 800a698:	6178      	str	r0, [r7, #20]
        break;
 800a69a:	e022      	b.n	800a6e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a69c:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <UART_SetConfig+0x300>)
 800a69e:	617b      	str	r3, [r7, #20]
        break;
 800a6a0:	e01f      	b.n	800a6e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6a2:	f7fb fd1f 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 800a6a6:	6178      	str	r0, [r7, #20]
        break;
 800a6a8:	e01b      	b.n	800a6e2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ae:	617b      	str	r3, [r7, #20]
        break;
 800a6b0:	e017      	b.n	800a6e2 <UART_SetConfig+0x30e>
 800a6b2:	bf00      	nop
 800a6b4:	efff69f3 	.word	0xefff69f3
 800a6b8:	40008000 	.word	0x40008000
 800a6bc:	40013800 	.word	0x40013800
 800a6c0:	40021000 	.word	0x40021000
 800a6c4:	40004400 	.word	0x40004400
 800a6c8:	40004800 	.word	0x40004800
 800a6cc:	40004c00 	.word	0x40004c00
 800a6d0:	40005000 	.word	0x40005000
 800a6d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	76bb      	strb	r3, [r7, #26]
        break;
 800a6e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 80f1 	beq.w	800a8cc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	4413      	add	r3, r2
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d305      	bcc.n	800a706 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	429a      	cmp	r2, r3
 800a704:	d902      	bls.n	800a70c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	76bb      	strb	r3, [r7, #26]
 800a70a:	e0df      	b.n	800a8cc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	4618      	mov	r0, r3
 800a710:	f04f 0100 	mov.w	r1, #0
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	f04f 0300 	mov.w	r3, #0
 800a71c:	020b      	lsls	r3, r1, #8
 800a71e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a722:	0202      	lsls	r2, r0, #8
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	6849      	ldr	r1, [r1, #4]
 800a728:	0849      	lsrs	r1, r1, #1
 800a72a:	4608      	mov	r0, r1
 800a72c:	f04f 0100 	mov.w	r1, #0
 800a730:	1814      	adds	r4, r2, r0
 800a732:	eb43 0501 	adc.w	r5, r3, r1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	461a      	mov	r2, r3
 800a73c:	f04f 0300 	mov.w	r3, #0
 800a740:	4620      	mov	r0, r4
 800a742:	4629      	mov	r1, r5
 800a744:	f7f6 fa30 	bl	8000ba8 <__aeabi_uldivmod>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4613      	mov	r3, r2
 800a74e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a756:	d308      	bcc.n	800a76a <UART_SetConfig+0x396>
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a75e:	d204      	bcs.n	800a76a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	60da      	str	r2, [r3, #12]
 800a768:	e0b0      	b.n	800a8cc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	76bb      	strb	r3, [r7, #26]
 800a76e:	e0ad      	b.n	800a8cc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a778:	d15c      	bne.n	800a834 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a77a:	7efb      	ldrb	r3, [r7, #27]
 800a77c:	2b08      	cmp	r3, #8
 800a77e:	d828      	bhi.n	800a7d2 <UART_SetConfig+0x3fe>
 800a780:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <UART_SetConfig+0x3b4>)
 800a782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a786:	bf00      	nop
 800a788:	0800a7ad 	.word	0x0800a7ad
 800a78c:	0800a7b5 	.word	0x0800a7b5
 800a790:	0800a7bd 	.word	0x0800a7bd
 800a794:	0800a7d3 	.word	0x0800a7d3
 800a798:	0800a7c3 	.word	0x0800a7c3
 800a79c:	0800a7d3 	.word	0x0800a7d3
 800a7a0:	0800a7d3 	.word	0x0800a7d3
 800a7a4:	0800a7d3 	.word	0x0800a7d3
 800a7a8:	0800a7cb 	.word	0x0800a7cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7ac:	f7fb fd32 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 800a7b0:	6178      	str	r0, [r7, #20]
        break;
 800a7b2:	e013      	b.n	800a7dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7b4:	f7fb fd44 	bl	8006240 <HAL_RCC_GetPCLK2Freq>
 800a7b8:	6178      	str	r0, [r7, #20]
        break;
 800a7ba:	e00f      	b.n	800a7dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7bc:	4b49      	ldr	r3, [pc, #292]	; (800a8e4 <UART_SetConfig+0x510>)
 800a7be:	617b      	str	r3, [r7, #20]
        break;
 800a7c0:	e00c      	b.n	800a7dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7c2:	f7fb fc8f 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 800a7c6:	6178      	str	r0, [r7, #20]
        break;
 800a7c8:	e008      	b.n	800a7dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ce:	617b      	str	r3, [r7, #20]
        break;
 800a7d0:	e004      	b.n	800a7dc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	76bb      	strb	r3, [r7, #26]
        break;
 800a7da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d074      	beq.n	800a8cc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	005a      	lsls	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	2b0f      	cmp	r3, #15
 800a7fe:	d916      	bls.n	800a82e <UART_SetConfig+0x45a>
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a806:	d212      	bcs.n	800a82e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	f023 030f 	bic.w	r3, r3, #15
 800a810:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	085b      	lsrs	r3, r3, #1
 800a816:	b29b      	uxth	r3, r3
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	89fb      	ldrh	r3, [r7, #14]
 800a820:	4313      	orrs	r3, r2
 800a822:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	89fa      	ldrh	r2, [r7, #14]
 800a82a:	60da      	str	r2, [r3, #12]
 800a82c:	e04e      	b.n	800a8cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	76bb      	strb	r3, [r7, #26]
 800a832:	e04b      	b.n	800a8cc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a834:	7efb      	ldrb	r3, [r7, #27]
 800a836:	2b08      	cmp	r3, #8
 800a838:	d827      	bhi.n	800a88a <UART_SetConfig+0x4b6>
 800a83a:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <UART_SetConfig+0x46c>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a86d 	.word	0x0800a86d
 800a848:	0800a875 	.word	0x0800a875
 800a84c:	0800a88b 	.word	0x0800a88b
 800a850:	0800a87b 	.word	0x0800a87b
 800a854:	0800a88b 	.word	0x0800a88b
 800a858:	0800a88b 	.word	0x0800a88b
 800a85c:	0800a88b 	.word	0x0800a88b
 800a860:	0800a883 	.word	0x0800a883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a864:	f7fb fcd6 	bl	8006214 <HAL_RCC_GetPCLK1Freq>
 800a868:	6178      	str	r0, [r7, #20]
        break;
 800a86a:	e013      	b.n	800a894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a86c:	f7fb fce8 	bl	8006240 <HAL_RCC_GetPCLK2Freq>
 800a870:	6178      	str	r0, [r7, #20]
        break;
 800a872:	e00f      	b.n	800a894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a874:	4b1b      	ldr	r3, [pc, #108]	; (800a8e4 <UART_SetConfig+0x510>)
 800a876:	617b      	str	r3, [r7, #20]
        break;
 800a878:	e00c      	b.n	800a894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a87a:	f7fb fc33 	bl	80060e4 <HAL_RCC_GetSysClockFreq>
 800a87e:	6178      	str	r0, [r7, #20]
        break;
 800a880:	e008      	b.n	800a894 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a886:	617b      	str	r3, [r7, #20]
        break;
 800a888:	e004      	b.n	800a894 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	76bb      	strb	r3, [r7, #26]
        break;
 800a892:	bf00      	nop
    }

    if (pclk != 0U)
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d018      	beq.n	800a8cc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	085a      	lsrs	r2, r3, #1
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	441a      	add	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b0f      	cmp	r3, #15
 800a8b4:	d908      	bls.n	800a8c8 <UART_SetConfig+0x4f4>
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8bc:	d204      	bcs.n	800a8c8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	60da      	str	r2, [r3, #12]
 800a8c6:	e001      	b.n	800a8cc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a8d8:	7ebb      	ldrb	r3, [r7, #26]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3720      	adds	r7, #32
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	00f42400 	.word	0x00f42400

0800a8e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00a      	beq.n	800a912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	430a      	orrs	r2, r1
 800a910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00a      	beq.n	800a934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00a      	beq.n	800a956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95a:	f003 0308 	and.w	r3, r3, #8
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00a      	beq.n	800a978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	430a      	orrs	r2, r1
 800a976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	f003 0310 	and.w	r3, r3, #16
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	f003 0320 	and.w	r3, r3, #32
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01a      	beq.n	800a9fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9e6:	d10a      	bne.n	800a9fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00a      	beq.n	800aa20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	605a      	str	r2, [r3, #4]
  }
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af02      	add	r7, sp, #8
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aa3a:	f7f9 fd4b 	bl	80044d4 <HAL_GetTick>
 800aa3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b08      	cmp	r3, #8
 800aa4c:	d10e      	bne.n	800aa6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f82a 	bl	800aab6 <UART_WaitOnFlagUntilTimeout>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e020      	b.n	800aaae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0304 	and.w	r3, r3, #4
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d10e      	bne.n	800aa98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f814 	bl	800aab6 <UART_WaitOnFlagUntilTimeout>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e00a      	b.n	800aaae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	603b      	str	r3, [r7, #0]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aac6:	e05d      	b.n	800ab84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aace:	d059      	beq.n	800ab84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aad0:	f7f9 fd00 	bl	80044d4 <HAL_GetTick>
 800aad4:	4602      	mov	r2, r0
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d302      	bcc.n	800aae6 <UART_WaitOnFlagUntilTimeout+0x30>
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d11b      	bne.n	800ab1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aaf4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	689a      	ldr	r2, [r3, #8]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0201 	bic.w	r2, r2, #1
 800ab04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2220      	movs	r2, #32
 800ab0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2220      	movs	r2, #32
 800ab10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e042      	b.n	800aba4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0304 	and.w	r3, r3, #4
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d02b      	beq.n	800ab84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab3a:	d123      	bne.n	800ab84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	689a      	ldr	r2, [r3, #8]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f022 0201 	bic.w	r2, r2, #1
 800ab64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2220      	movs	r2, #32
 800ab76:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e00f      	b.n	800aba4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	69da      	ldr	r2, [r3, #28]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	bf0c      	ite	eq
 800ab94:	2301      	moveq	r3, #1
 800ab96:	2300      	movne	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d092      	beq.n	800aac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0201 	bic.w	r2, r2, #1
 800abd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2220      	movs	r2, #32
 800abd8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	661a      	str	r2, [r3, #96]	; 0x60
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff fbd8 	bl	800a3c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac10:	bf00      	nop
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac2e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2220      	movs	r2, #32
 800ac34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff fbb5 	bl	800a3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac58:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac5e:	2b22      	cmp	r3, #34	; 0x22
 800ac60:	d13a      	bne.n	800acd8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac68:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ac6a:	89bb      	ldrh	r3, [r7, #12]
 800ac6c:	b2d9      	uxtb	r1, r3
 800ac6e:	89fb      	ldrh	r3, [r7, #14]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac76:	400a      	ands	r2, r1
 800ac78:	b2d2      	uxtb	r2, r2
 800ac7a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d123      	bne.n	800acec <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800acb2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689a      	ldr	r2, [r3, #8]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0201 	bic.w	r2, r2, #1
 800acc2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2220      	movs	r2, #32
 800acc8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7f7 fbad 	bl	8002430 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acd6:	e009      	b.n	800acec <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	8b1b      	ldrh	r3, [r3, #24]
 800acde:	b29a      	uxth	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f042 0208 	orr.w	r2, r2, #8
 800ace8:	b292      	uxth	r2, r2
 800acea:	831a      	strh	r2, [r3, #24]
}
 800acec:	bf00      	nop
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad02:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad08:	2b22      	cmp	r3, #34	; 0x22
 800ad0a:	d13a      	bne.n	800ad82 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ad12:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad18:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ad1a:	89ba      	ldrh	r2, [r7, #12]
 800ad1c:	89fb      	ldrh	r3, [r7, #14]
 800ad1e:	4013      	ands	r3, r2
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad2a:	1c9a      	adds	r2, r3, #2
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d123      	bne.n	800ad96 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f022 0201 	bic.w	r2, r2, #1
 800ad6c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2220      	movs	r2, #32
 800ad72:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7f7 fb58 	bl	8002430 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad80:	e009      	b.n	800ad96 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	8b1b      	ldrh	r3, [r3, #24]
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0208 	orr.w	r2, r2, #8
 800ad92:	b292      	uxth	r2, r2
 800ad94:	831a      	strh	r2, [r3, #24]
}
 800ad96:	bf00      	nop
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	4603      	mov	r3, r0
 800adba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800adc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800adc4:	2b84      	cmp	r3, #132	; 0x84
 800adc6:	d005      	beq.n	800add4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800adc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	3303      	adds	r3, #3
 800add2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800add4:	68fb      	ldr	r3, [r7, #12]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ade8:	f3ef 8305 	mrs	r3, IPSR
 800adec:	607b      	str	r3, [r7, #4]
  return(result);
 800adee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bf14      	ite	ne
 800adf4:	2301      	movne	r3, #1
 800adf6:	2300      	moveq	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ae0a:	f001 fb69 	bl	800c4e0 <vTaskStartScheduler>
  
  return osOK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ae14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae16:	b089      	sub	sp, #36	; 0x24
 800ae18:	af04      	add	r7, sp, #16
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d020      	beq.n	800ae68 <osThreadCreate+0x54>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d01c      	beq.n	800ae68 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685c      	ldr	r4, [r3, #4]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681d      	ldr	r5, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691e      	ldr	r6, [r3, #16]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7ff ffb6 	bl	800adb2 <makeFreeRtosPriority>
 800ae46:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae50:	9202      	str	r2, [sp, #8]
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	9100      	str	r1, [sp, #0]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f001 f977 	bl	800c150 <xTaskCreateStatic>
 800ae62:	4603      	mov	r3, r0
 800ae64:	60fb      	str	r3, [r7, #12]
 800ae66:	e01c      	b.n	800aea2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	685c      	ldr	r4, [r3, #4]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae74:	b29e      	uxth	r6, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff ff98 	bl	800adb2 <makeFreeRtosPriority>
 800ae82:	4602      	mov	r2, r0
 800ae84:	f107 030c 	add.w	r3, r7, #12
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	9200      	str	r2, [sp, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	4632      	mov	r2, r6
 800ae90:	4629      	mov	r1, r5
 800ae92:	4620      	mov	r0, r4
 800ae94:	f001 f9b9 	bl	800c20a <xTaskCreate>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d001      	beq.n	800aea2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e000      	b.n	800aea4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aea2:	68fb      	ldr	r3, [r7, #12]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aeac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <osDelay+0x16>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	e000      	b.n	800aec4 <osDelay+0x18>
 800aec2:	2301      	movs	r3, #1
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 fad7 	bl	800c478 <vTaskDelay>
  
  return osOK;
 800aeca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af02      	add	r7, sp, #8
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00f      	beq.n	800af06 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d10a      	bne.n	800af02 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	2203      	movs	r2, #3
 800aef2:	9200      	str	r2, [sp, #0]
 800aef4:	2200      	movs	r2, #0
 800aef6:	2100      	movs	r1, #0
 800aef8:	2001      	movs	r0, #1
 800aefa:	f000 fa99 	bl	800b430 <xQueueGenericCreateStatic>
 800aefe:	4603      	mov	r3, r0
 800af00:	e016      	b.n	800af30 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	e014      	b.n	800af30 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d110      	bne.n	800af2e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800af0c:	2203      	movs	r2, #3
 800af0e:	2100      	movs	r1, #0
 800af10:	2001      	movs	r0, #1
 800af12:	f000 fb05 	bl	800b520 <xQueueGenericCreate>
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <osSemaphoreCreate+0x56>
 800af1e:	2300      	movs	r3, #0
 800af20:	2200      	movs	r2, #0
 800af22:	2100      	movs	r1, #0
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fb5b 	bl	800b5e0 <xQueueGenericSend>
      return sema;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	e000      	b.n	800af30 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800af2e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800af42:	2300      	movs	r3, #0
 800af44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800af4c:	2380      	movs	r3, #128	; 0x80
 800af4e:	e03a      	b.n	800afc6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5a:	d103      	bne.n	800af64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800af5c:	f04f 33ff 	mov.w	r3, #4294967295
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e009      	b.n	800af78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d006      	beq.n	800af78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <osSemaphoreWait+0x40>
      ticks = 1;
 800af74:	2301      	movs	r3, #1
 800af76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800af78:	f7ff ff33 	bl	800ade2 <inHandlerMode>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d017      	beq.n	800afb2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800af82:	f107 0308 	add.w	r3, r7, #8
 800af86:	461a      	mov	r2, r3
 800af88:	2100      	movs	r1, #0
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 ff38 	bl	800be00 <xQueueReceiveFromISR>
 800af90:	4603      	mov	r3, r0
 800af92:	2b01      	cmp	r3, #1
 800af94:	d001      	beq.n	800af9a <osSemaphoreWait+0x62>
      return osErrorOS;
 800af96:	23ff      	movs	r3, #255	; 0xff
 800af98:	e015      	b.n	800afc6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d011      	beq.n	800afc4 <osSemaphoreWait+0x8c>
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <osSemaphoreWait+0x98>)
 800afa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	e008      	b.n	800afc4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fe17 	bl	800bbe8 <xQueueSemaphoreTake>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d001      	beq.n	800afc4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800afc0:	23ff      	movs	r3, #255	; 0xff
 800afc2:	e000      	b.n	800afc6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800afdc:	2300      	movs	r3, #0
 800afde:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800afe0:	2300      	movs	r3, #0
 800afe2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800afe4:	f7ff fefd 	bl	800ade2 <inHandlerMode>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d016      	beq.n	800b01c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800afee:	f107 0308 	add.w	r3, r7, #8
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fc89 	bl	800b90c <xQueueGiveFromISR>
 800affa:	4603      	mov	r3, r0
 800affc:	2b01      	cmp	r3, #1
 800affe:	d001      	beq.n	800b004 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b000:	23ff      	movs	r3, #255	; 0xff
 800b002:	e017      	b.n	800b034 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d013      	beq.n	800b032 <osSemaphoreRelease+0x5e>
 800b00a:	4b0c      	ldr	r3, [pc, #48]	; (800b03c <osSemaphoreRelease+0x68>)
 800b00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b010:	601a      	str	r2, [r3, #0]
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	e00a      	b.n	800b032 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b01c:	2300      	movs	r3, #0
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fadc 	bl	800b5e0 <xQueueGenericSend>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d001      	beq.n	800b032 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b02e:	23ff      	movs	r3, #255	; 0xff
 800b030:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b032:	68fb      	ldr	r3, [r7, #12]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b040:	b590      	push	{r4, r7, lr}
 800b042:	b085      	sub	sp, #20
 800b044:	af02      	add	r7, sp, #8
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d011      	beq.n	800b076 <osMessageCreate+0x36>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00d      	beq.n	800b076 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6859      	ldr	r1, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	689a      	ldr	r2, [r3, #8]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	2400      	movs	r4, #0
 800b06c:	9400      	str	r4, [sp, #0]
 800b06e:	f000 f9df 	bl	800b430 <xQueueGenericCreateStatic>
 800b072:	4603      	mov	r3, r0
 800b074:	e008      	b.n	800b088 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	4619      	mov	r1, r3
 800b082:	f000 fa4d 	bl	800b520 <xQueueGenericCreate>
 800b086:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd90      	pop	{r4, r7, pc}

0800b090 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b09c:	2300      	movs	r3, #0
 800b09e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <osMessagePut+0x1e>
    ticks = 1;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b0ae:	f7ff fe98 	bl	800ade2 <inHandlerMode>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d018      	beq.n	800b0ea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b0b8:	f107 0210 	add.w	r2, r7, #16
 800b0bc:	f107 0108 	add.w	r1, r7, #8
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 fb8a 	bl	800b7dc <xQueueGenericSendFromISR>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d001      	beq.n	800b0d2 <osMessagePut+0x42>
      return osErrorOS;
 800b0ce:	23ff      	movs	r3, #255	; 0xff
 800b0d0:	e018      	b.n	800b104 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d014      	beq.n	800b102 <osMessagePut+0x72>
 800b0d8:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <osMessagePut+0x7c>)
 800b0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	e00b      	b.n	800b102 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b0ea:	f107 0108 	add.w	r1, r7, #8
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fa74 	bl	800b5e0 <xQueueGenericSend>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d001      	beq.n	800b102 <osMessagePut+0x72>
      return osErrorOS;
 800b0fe:	23ff      	movs	r3, #255	; 0xff
 800b100:	e000      	b.n	800b104 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	e000ed04 	.word	0xe000ed04

0800b110 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b110:	b590      	push	{r4, r7, lr}
 800b112:	b08b      	sub	sp, #44	; 0x2c
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10a      	bne.n	800b140 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b12a:	2380      	movs	r3, #128	; 0x80
 800b12c:	617b      	str	r3, [r7, #20]
    return event;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	461c      	mov	r4, r3
 800b132:	f107 0314 	add.w	r3, r7, #20
 800b136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b13a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b13e:	e054      	b.n	800b1ea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b140:	2300      	movs	r3, #0
 800b142:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14e:	d103      	bne.n	800b158 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b150:	f04f 33ff 	mov.w	r3, #4294967295
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
 800b156:	e009      	b.n	800b16c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d006      	beq.n	800b16c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <osMessageGet+0x5c>
      ticks = 1;
 800b168:	2301      	movs	r3, #1
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b16c:	f7ff fe39 	bl	800ade2 <inHandlerMode>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d01c      	beq.n	800b1b0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b176:	f107 0220 	add.w	r2, r7, #32
 800b17a:	f107 0314 	add.w	r3, r7, #20
 800b17e:	3304      	adds	r3, #4
 800b180:	4619      	mov	r1, r3
 800b182:	68b8      	ldr	r0, [r7, #8]
 800b184:	f000 fe3c 	bl	800be00 <xQueueReceiveFromISR>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d102      	bne.n	800b194 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b18e:	2310      	movs	r3, #16
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	e001      	b.n	800b198 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b194:	2300      	movs	r3, #0
 800b196:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d01d      	beq.n	800b1da <osMessageGet+0xca>
 800b19e:	4b15      	ldr	r3, [pc, #84]	; (800b1f4 <osMessageGet+0xe4>)
 800b1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	e014      	b.n	800b1da <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b1b0:	f107 0314 	add.w	r3, r7, #20
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	68b8      	ldr	r0, [r7, #8]
 800b1bc:	f000 fc34 	bl	800ba28 <xQueueReceive>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d102      	bne.n	800b1cc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b1c6:	2310      	movs	r3, #16
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	e006      	b.n	800b1da <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <osMessageGet+0xc6>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e000      	b.n	800b1d8 <osMessageGet+0xc8>
 800b1d6:	2340      	movs	r3, #64	; 0x40
 800b1d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	461c      	mov	r4, r3
 800b1de:	f107 0314 	add.w	r3, r7, #20
 800b1e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b1e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	372c      	adds	r7, #44	; 0x2c
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd90      	pop	{r4, r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	e000ed04 	.word	0xe000ed04

0800b1f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f103 0208 	add.w	r2, r3, #8
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f04f 32ff 	mov.w	r2, #4294967295
 800b210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f103 0208 	add.w	r2, r3, #8
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f103 0208 	add.w	r2, r3, #8
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b246:	bf00      	nop
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b252:	b480      	push	{r7}
 800b254:	b085      	sub	sp, #20
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	601a      	str	r2, [r3, #0]
}
 800b28e:	bf00      	nop
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b29a:	b480      	push	{r7}
 800b29c:	b085      	sub	sp, #20
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b0:	d103      	bne.n	800b2ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	e00c      	b.n	800b2d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	3308      	adds	r3, #8
 800b2be:	60fb      	str	r3, [r7, #12]
 800b2c0:	e002      	b.n	800b2c8 <vListInsert+0x2e>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d2f6      	bcs.n	800b2c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	601a      	str	r2, [r3, #0]
}
 800b300:	bf00      	nop
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	6892      	ldr	r2, [r2, #8]
 800b322:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	6852      	ldr	r2, [r2, #4]
 800b32c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	429a      	cmp	r2, r3
 800b336:	d103      	bne.n	800b340 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	1e5a      	subs	r2, r3, #1
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10a      	bne.n	800b38a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b38a:	f002 f80b 	bl	800d3a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b39a:	fb01 f303 	mul.w	r3, r1, r3
 800b39e:	441a      	add	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	68f9      	ldr	r1, [r7, #12]
 800b3be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3c0:	fb01 f303 	mul.w	r3, r1, r3
 800b3c4:	441a      	add	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	22ff      	movs	r2, #255	; 0xff
 800b3ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	22ff      	movs	r2, #255	; 0xff
 800b3d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d114      	bne.n	800b40a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d01a      	beq.n	800b41e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3310      	adds	r3, #16
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f001 fab9 	bl	800c964 <xTaskRemoveFromEventList>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d012      	beq.n	800b41e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	; (800b42c <xQueueGenericReset+0xcc>)
 800b3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	e009      	b.n	800b41e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3310      	adds	r3, #16
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff fef2 	bl	800b1f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3324      	adds	r3, #36	; 0x24
 800b418:	4618      	mov	r0, r3
 800b41a:	f7ff feed 	bl	800b1f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b41e:	f001 fff1 	bl	800d404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b422:	2301      	movs	r3, #1
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	e000ed04 	.word	0xe000ed04

0800b430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08e      	sub	sp, #56	; 0x38
 800b434:	af02      	add	r7, sp, #8
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b456:	bf00      	nop
 800b458:	e7fe      	b.n	800b458 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <xQueueGenericCreateStatic+0x52>
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <xQueueGenericCreateStatic+0x56>
 800b482:	2301      	movs	r3, #1
 800b484:	e000      	b.n	800b488 <xQueueGenericCreateStatic+0x58>
 800b486:	2300      	movs	r3, #0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10a      	bne.n	800b4a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	623b      	str	r3, [r7, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	e7fe      	b.n	800b4a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <xQueueGenericCreateStatic+0x7e>
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <xQueueGenericCreateStatic+0x82>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <xQueueGenericCreateStatic+0x84>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	61fb      	str	r3, [r7, #28]
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4ce:	2348      	movs	r3, #72	; 0x48
 800b4d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b48      	cmp	r3, #72	; 0x48
 800b4d6:	d00a      	beq.n	800b4ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	61bb      	str	r3, [r7, #24]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b4ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00d      	beq.n	800b516 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b502:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	4613      	mov	r3, r2
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 f845 	bl	800b5a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b518:	4618      	mov	r0, r3
 800b51a:	3730      	adds	r7, #48	; 0x30
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08a      	sub	sp, #40	; 0x28
 800b524:	af02      	add	r7, sp, #8
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	613b      	str	r3, [r7, #16]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d102      	bne.n	800b556 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b550:	2300      	movs	r3, #0
 800b552:	61fb      	str	r3, [r7, #28]
 800b554:	e004      	b.n	800b560 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	68ba      	ldr	r2, [r7, #8]
 800b55a:	fb02 f303 	mul.w	r3, r2, r3
 800b55e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	3348      	adds	r3, #72	; 0x48
 800b564:	4618      	mov	r0, r3
 800b566:	f002 f83f 	bl	800d5e8 <pvPortMalloc>
 800b56a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d011      	beq.n	800b596 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	3348      	adds	r3, #72	; 0x48
 800b57a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b584:	79fa      	ldrb	r2, [r7, #7]
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	4613      	mov	r3, r2
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f805 	bl	800b5a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b596:	69bb      	ldr	r3, [r7, #24]
	}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d103      	bne.n	800b5bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	e002      	b.n	800b5c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	69b8      	ldr	r0, [r7, #24]
 800b5d2:	f7ff fec5 	bl	800b360 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5d6:	bf00      	nop
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08e      	sub	sp, #56	; 0x38
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10a      	bne.n	800b612 <xQueueGenericSend+0x32>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d103      	bne.n	800b620 <xQueueGenericSend+0x40>
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <xQueueGenericSend+0x44>
 800b620:	2301      	movs	r3, #1
 800b622:	e000      	b.n	800b626 <xQueueGenericSend+0x46>
 800b624:	2300      	movs	r3, #0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <xQueueGenericSend+0x60>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d103      	bne.n	800b64e <xQueueGenericSend+0x6e>
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d101      	bne.n	800b652 <xQueueGenericSend+0x72>
 800b64e:	2301      	movs	r3, #1
 800b650:	e000      	b.n	800b654 <xQueueGenericSend+0x74>
 800b652:	2300      	movs	r3, #0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <xQueueGenericSend+0x8e>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	623b      	str	r3, [r7, #32]
}
 800b66a:	bf00      	nop
 800b66c:	e7fe      	b.n	800b66c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b66e:	f001 fb35 	bl	800ccdc <xTaskGetSchedulerState>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <xQueueGenericSend+0x9e>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <xQueueGenericSend+0xa2>
 800b67e:	2301      	movs	r3, #1
 800b680:	e000      	b.n	800b684 <xQueueGenericSend+0xa4>
 800b682:	2300      	movs	r3, #0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10a      	bne.n	800b69e <xQueueGenericSend+0xbe>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	61fb      	str	r3, [r7, #28]
}
 800b69a:	bf00      	nop
 800b69c:	e7fe      	b.n	800b69c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b69e:	f001 fe81 	bl	800d3a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d302      	bcc.n	800b6b4 <xQueueGenericSend+0xd4>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d129      	bne.n	800b708 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	68b9      	ldr	r1, [r7, #8]
 800b6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6ba:	f000 fc39 	bl	800bf30 <prvCopyDataToQueue>
 800b6be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d010      	beq.n	800b6ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	3324      	adds	r3, #36	; 0x24
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f001 f949 	bl	800c964 <xTaskRemoveFromEventList>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d013      	beq.n	800b700 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6d8:	4b3f      	ldr	r3, [pc, #252]	; (800b7d8 <xQueueGenericSend+0x1f8>)
 800b6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	e00a      	b.n	800b700 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6f0:	4b39      	ldr	r3, [pc, #228]	; (800b7d8 <xQueueGenericSend+0x1f8>)
 800b6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b700:	f001 fe80 	bl	800d404 <vPortExitCritical>
				return pdPASS;
 800b704:	2301      	movs	r3, #1
 800b706:	e063      	b.n	800b7d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d103      	bne.n	800b716 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b70e:	f001 fe79 	bl	800d404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b712:	2300      	movs	r3, #0
 800b714:	e05c      	b.n	800b7d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d106      	bne.n	800b72a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b71c:	f107 0314 	add.w	r3, r7, #20
 800b720:	4618      	mov	r0, r3
 800b722:	f001 f981 	bl	800ca28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b726:	2301      	movs	r3, #1
 800b728:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b72a:	f001 fe6b 	bl	800d404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b72e:	f000 ff37 	bl	800c5a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b732:	f001 fe37 	bl	800d3a4 <vPortEnterCritical>
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b73c:	b25b      	sxtb	r3, r3
 800b73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b742:	d103      	bne.n	800b74c <xQueueGenericSend+0x16c>
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b752:	b25b      	sxtb	r3, r3
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d103      	bne.n	800b762 <xQueueGenericSend+0x182>
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b762:	f001 fe4f 	bl	800d404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b766:	1d3a      	adds	r2, r7, #4
 800b768:	f107 0314 	add.w	r3, r7, #20
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f001 f970 	bl	800ca54 <xTaskCheckForTimeOut>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d124      	bne.n	800b7c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b77c:	f000 fcd0 	bl	800c120 <prvIsQueueFull>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d018      	beq.n	800b7b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	3310      	adds	r3, #16
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f001 f8c4 	bl	800c91c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b796:	f000 fc5b 	bl	800c050 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b79a:	f000 ff0f 	bl	800c5bc <xTaskResumeAll>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f47f af7c 	bne.w	800b69e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b7a6:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <xQueueGenericSend+0x1f8>)
 800b7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ac:	601a      	str	r2, [r3, #0]
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	e772      	b.n	800b69e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b7b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7ba:	f000 fc49 	bl	800c050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7be:	f000 fefd 	bl	800c5bc <xTaskResumeAll>
 800b7c2:	e76c      	b.n	800b69e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7c6:	f000 fc43 	bl	800c050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7ca:	f000 fef7 	bl	800c5bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b7ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3738      	adds	r7, #56	; 0x38
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	e000ed04 	.word	0xe000ed04

0800b7dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08e      	sub	sp, #56	; 0x38
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10a      	bne.n	800b80a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d103      	bne.n	800b818 <xQueueGenericSendFromISR+0x3c>
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b814:	2b00      	cmp	r3, #0
 800b816:	d101      	bne.n	800b81c <xQueueGenericSendFromISR+0x40>
 800b818:	2301      	movs	r3, #1
 800b81a:	e000      	b.n	800b81e <xQueueGenericSendFromISR+0x42>
 800b81c:	2300      	movs	r3, #0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	623b      	str	r3, [r7, #32]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d103      	bne.n	800b846 <xQueueGenericSendFromISR+0x6a>
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b842:	2b01      	cmp	r3, #1
 800b844:	d101      	bne.n	800b84a <xQueueGenericSendFromISR+0x6e>
 800b846:	2301      	movs	r3, #1
 800b848:	e000      	b.n	800b84c <xQueueGenericSendFromISR+0x70>
 800b84a:	2300      	movs	r3, #0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	61fb      	str	r3, [r7, #28]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b866:	f001 fe7f 	bl	800d568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b86a:	f3ef 8211 	mrs	r2, BASEPRI
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	61ba      	str	r2, [r7, #24]
 800b880:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b882:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b884:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88e:	429a      	cmp	r2, r3
 800b890:	d302      	bcc.n	800b898 <xQueueGenericSendFromISR+0xbc>
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b02      	cmp	r3, #2
 800b896:	d12c      	bne.n	800b8f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	68b9      	ldr	r1, [r7, #8]
 800b8a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8a8:	f000 fb42 	bl	800bf30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b8ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d112      	bne.n	800b8dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d016      	beq.n	800b8ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	3324      	adds	r3, #36	; 0x24
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 f84e 	bl	800c964 <xTaskRemoveFromEventList>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00e      	beq.n	800b8ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00b      	beq.n	800b8ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	e007      	b.n	800b8ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b8dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	b25a      	sxtb	r2, r3
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b8f0:	e001      	b.n	800b8f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b900:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b904:	4618      	mov	r0, r3
 800b906:	3738      	adds	r7, #56	; 0x38
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08e      	sub	sp, #56	; 0x38
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10a      	bne.n	800b936 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	623b      	str	r3, [r7, #32]
}
 800b932:	bf00      	nop
 800b934:	e7fe      	b.n	800b934 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00a      	beq.n	800b954 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	61fb      	str	r3, [r7, #28]
}
 800b950:	bf00      	nop
 800b952:	e7fe      	b.n	800b952 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d103      	bne.n	800b964 <xQueueGiveFromISR+0x58>
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <xQueueGiveFromISR+0x5c>
 800b964:	2301      	movs	r3, #1
 800b966:	e000      	b.n	800b96a <xQueueGiveFromISR+0x5e>
 800b968:	2300      	movs	r3, #0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10a      	bne.n	800b984 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	61bb      	str	r3, [r7, #24]
}
 800b980:	bf00      	nop
 800b982:	e7fe      	b.n	800b982 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b984:	f001 fdf0 	bl	800d568 <vPortValidateInterruptPriority>
	__asm volatile
 800b988:	f3ef 8211 	mrs	r2, BASEPRI
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	617a      	str	r2, [r7, #20]
 800b99e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b9a0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d22b      	bcs.n	800ba0c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b9c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ce:	d112      	bne.n	800b9f6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d016      	beq.n	800ba06 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	3324      	adds	r3, #36	; 0x24
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 ffc1 	bl	800c964 <xTaskRemoveFromEventList>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00e      	beq.n	800ba06 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00b      	beq.n	800ba06 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	e007      	b.n	800ba06 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	b25a      	sxtb	r2, r3
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ba06:	2301      	movs	r3, #1
 800ba08:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0a:	e001      	b.n	800ba10 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba12:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f383 8811 	msr	BASEPRI, r3
}
 800ba1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3738      	adds	r7, #56	; 0x38
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08c      	sub	sp, #48	; 0x30
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10a      	bne.n	800ba58 <xQueueReceive+0x30>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	623b      	str	r3, [r7, #32]
}
 800ba54:	bf00      	nop
 800ba56:	e7fe      	b.n	800ba56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d103      	bne.n	800ba66 <xQueueReceive+0x3e>
 800ba5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <xQueueReceive+0x42>
 800ba66:	2301      	movs	r3, #1
 800ba68:	e000      	b.n	800ba6c <xQueueReceive+0x44>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <xQueueReceive+0x5e>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	61fb      	str	r3, [r7, #28]
}
 800ba82:	bf00      	nop
 800ba84:	e7fe      	b.n	800ba84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba86:	f001 f929 	bl	800ccdc <xTaskGetSchedulerState>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <xQueueReceive+0x6e>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <xQueueReceive+0x72>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e000      	b.n	800ba9c <xQueueReceive+0x74>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xQueueReceive+0x8e>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	61bb      	str	r3, [r7, #24]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bab6:	f001 fc75 	bl	800d3a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d01f      	beq.n	800bb06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baca:	f000 fa9b 	bl	800c004 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	1e5a      	subs	r2, r3, #1
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00f      	beq.n	800bafe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	3310      	adds	r3, #16
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 ff3e 	bl	800c964 <xTaskRemoveFromEventList>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800baee:	4b3d      	ldr	r3, [pc, #244]	; (800bbe4 <xQueueReceive+0x1bc>)
 800baf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bafe:	f001 fc81 	bl	800d404 <vPortExitCritical>
				return pdPASS;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e069      	b.n	800bbda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d103      	bne.n	800bb14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb0c:	f001 fc7a 	bl	800d404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb10:	2300      	movs	r3, #0
 800bb12:	e062      	b.n	800bbda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d106      	bne.n	800bb28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb1a:	f107 0310 	add.w	r3, r7, #16
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 ff82 	bl	800ca28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb24:	2301      	movs	r3, #1
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb28:	f001 fc6c 	bl	800d404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb2c:	f000 fd38 	bl	800c5a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb30:	f001 fc38 	bl	800d3a4 <vPortEnterCritical>
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb3a:	b25b      	sxtb	r3, r3
 800bb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb40:	d103      	bne.n	800bb4a <xQueueReceive+0x122>
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb50:	b25b      	sxtb	r3, r3
 800bb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb56:	d103      	bne.n	800bb60 <xQueueReceive+0x138>
 800bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb60:	f001 fc50 	bl	800d404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb64:	1d3a      	adds	r2, r7, #4
 800bb66:	f107 0310 	add.w	r3, r7, #16
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 ff71 	bl	800ca54 <xTaskCheckForTimeOut>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d123      	bne.n	800bbc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb7a:	f000 fabb 	bl	800c0f4 <prvIsQueueEmpty>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d017      	beq.n	800bbb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	3324      	adds	r3, #36	; 0x24
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 fec5 	bl	800c91c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb94:	f000 fa5c 	bl	800c050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb98:	f000 fd10 	bl	800c5bc <xTaskResumeAll>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d189      	bne.n	800bab6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bba2:	4b10      	ldr	r3, [pc, #64]	; (800bbe4 <xQueueReceive+0x1bc>)
 800bba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	e780      	b.n	800bab6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bbb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbb6:	f000 fa4b 	bl	800c050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbba:	f000 fcff 	bl	800c5bc <xTaskResumeAll>
 800bbbe:	e77a      	b.n	800bab6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bbc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbc2:	f000 fa45 	bl	800c050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbc6:	f000 fcf9 	bl	800c5bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbcc:	f000 fa92 	bl	800c0f4 <prvIsQueueEmpty>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f43f af6f 	beq.w	800bab6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bbd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3730      	adds	r7, #48	; 0x30
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	e000ed04 	.word	0xe000ed04

0800bbe8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08e      	sub	sp, #56	; 0x38
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	623b      	str	r3, [r7, #32]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00a      	beq.n	800bc38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	61fb      	str	r3, [r7, #28]
}
 800bc34:	bf00      	nop
 800bc36:	e7fe      	b.n	800bc36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc38:	f001 f850 	bl	800ccdc <xTaskGetSchedulerState>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <xQueueSemaphoreTake+0x60>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <xQueueSemaphoreTake+0x64>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e000      	b.n	800bc4e <xQueueSemaphoreTake+0x66>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	61bb      	str	r3, [r7, #24]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc68:	f001 fb9c 	bl	800d3a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d024      	beq.n	800bcc2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7a:	1e5a      	subs	r2, r3, #1
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d104      	bne.n	800bc92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bc88:	f001 f9e6 	bl	800d058 <pvTaskIncrementMutexHeldCount>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00f      	beq.n	800bcba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9c:	3310      	adds	r3, #16
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fe60 	bl	800c964 <xTaskRemoveFromEventList>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d007      	beq.n	800bcba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcaa:	4b54      	ldr	r3, [pc, #336]	; (800bdfc <xQueueSemaphoreTake+0x214>)
 800bcac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bcba:	f001 fba3 	bl	800d404 <vPortExitCritical>
				return pdPASS;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e097      	b.n	800bdf2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d111      	bne.n	800bcec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	617b      	str	r3, [r7, #20]
}
 800bce0:	bf00      	nop
 800bce2:	e7fe      	b.n	800bce2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bce4:	f001 fb8e 	bl	800d404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bce8:	2300      	movs	r3, #0
 800bcea:	e082      	b.n	800bdf2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d106      	bne.n	800bd00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcf2:	f107 030c 	add.w	r3, r7, #12
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 fe96 	bl	800ca28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd00:	f001 fb80 	bl	800d404 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd04:	f000 fc4c 	bl	800c5a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd08:	f001 fb4c 	bl	800d3a4 <vPortEnterCritical>
 800bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd12:	b25b      	sxtb	r3, r3
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d103      	bne.n	800bd22 <xQueueSemaphoreTake+0x13a>
 800bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd28:	b25b      	sxtb	r3, r3
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2e:	d103      	bne.n	800bd38 <xQueueSemaphoreTake+0x150>
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd38:	f001 fb64 	bl	800d404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd3c:	463a      	mov	r2, r7
 800bd3e:	f107 030c 	add.w	r3, r7, #12
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fe85 	bl	800ca54 <xTaskCheckForTimeOut>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d132      	bne.n	800bdb6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd52:	f000 f9cf 	bl	800c0f4 <prvIsQueueEmpty>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d026      	beq.n	800bdaa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d109      	bne.n	800bd78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bd64:	f001 fb1e 	bl	800d3a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 ffd3 	bl	800cd18 <xTaskPriorityInherit>
 800bd72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bd74:	f001 fb46 	bl	800d404 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7a:	3324      	adds	r3, #36	; 0x24
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 fdcb 	bl	800c91c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd88:	f000 f962 	bl	800c050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd8c:	f000 fc16 	bl	800c5bc <xTaskResumeAll>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f47f af68 	bne.w	800bc68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bd98:	4b18      	ldr	r3, [pc, #96]	; (800bdfc <xQueueSemaphoreTake+0x214>)
 800bd9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd9e:	601a      	str	r2, [r3, #0]
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	e75e      	b.n	800bc68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bdaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdac:	f000 f950 	bl	800c050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdb0:	f000 fc04 	bl	800c5bc <xTaskResumeAll>
 800bdb4:	e758      	b.n	800bc68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bdb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdb8:	f000 f94a 	bl	800c050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdbc:	f000 fbfe 	bl	800c5bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdc2:	f000 f997 	bl	800c0f4 <prvIsQueueEmpty>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f43f af4d 	beq.w	800bc68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00d      	beq.n	800bdf0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bdd4:	f001 fae6 	bl	800d3a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bdd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bdda:	f000 f891 	bl	800bf00 <prvGetDisinheritPriorityAfterTimeout>
 800bdde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 f89c 	bl	800cf24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bdec:	f001 fb0a 	bl	800d404 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3738      	adds	r7, #56	; 0x38
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	e000ed04 	.word	0xe000ed04

0800be00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08e      	sub	sp, #56	; 0x38
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10a      	bne.n	800be2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800be16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	623b      	str	r3, [r7, #32]
}
 800be28:	bf00      	nop
 800be2a:	e7fe      	b.n	800be2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d103      	bne.n	800be3a <xQueueReceiveFromISR+0x3a>
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <xQueueReceiveFromISR+0x3e>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e000      	b.n	800be40 <xQueueReceiveFromISR+0x40>
 800be3e:	2300      	movs	r3, #0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10a      	bne.n	800be5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	61fb      	str	r3, [r7, #28]
}
 800be56:	bf00      	nop
 800be58:	e7fe      	b.n	800be58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be5a:	f001 fb85 	bl	800d568 <vPortValidateInterruptPriority>
	__asm volatile
 800be5e:	f3ef 8211 	mrs	r2, BASEPRI
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	f383 8811 	msr	BASEPRI, r3
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	61ba      	str	r2, [r7, #24]
 800be74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	2b00      	cmp	r3, #0
 800be84:	d02f      	beq.n	800bee6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be90:	68b9      	ldr	r1, [r7, #8]
 800be92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be94:	f000 f8b6 	bl	800c004 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	1e5a      	subs	r2, r3, #1
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea8:	d112      	bne.n	800bed0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d016      	beq.n	800bee0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	3310      	adds	r3, #16
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 fd54 	bl	800c964 <xTaskRemoveFromEventList>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00e      	beq.n	800bee0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00b      	beq.n	800bee0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	e007      	b.n	800bee0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bed4:	3301      	adds	r3, #1
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	b25a      	sxtb	r2, r3
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bee0:	2301      	movs	r3, #1
 800bee2:	637b      	str	r3, [r7, #52]	; 0x34
 800bee4:	e001      	b.n	800beea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bee6:	2300      	movs	r3, #0
 800bee8:	637b      	str	r3, [r7, #52]	; 0x34
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	f383 8811 	msr	BASEPRI, r3
}
 800bef4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3738      	adds	r7, #56	; 0x38
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d006      	beq.n	800bf1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f1c3 0307 	rsb	r3, r3, #7
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	e001      	b.n	800bf22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bf22:	68fb      	ldr	r3, [r7, #12]
	}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10d      	bne.n	800bf6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d14d      	bne.n	800bff2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 ff5c 	bl	800ce18 <xTaskPriorityDisinherit>
 800bf60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	609a      	str	r2, [r3, #8]
 800bf68:	e043      	b.n	800bff2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d119      	bne.n	800bfa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6858      	ldr	r0, [r3, #4]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf78:	461a      	mov	r2, r3
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	f001 fd38 	bl	800d9f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf88:	441a      	add	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d32b      	bcc.n	800bff2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	605a      	str	r2, [r3, #4]
 800bfa2:	e026      	b.n	800bff2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68d8      	ldr	r0, [r3, #12]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfac:	461a      	mov	r2, r3
 800bfae:	68b9      	ldr	r1, [r7, #8]
 800bfb0:	f001 fd1e 	bl	800d9f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbc:	425b      	negs	r3, r3
 800bfbe:	441a      	add	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d207      	bcs.n	800bfe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	689a      	ldr	r2, [r3, #8]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd8:	425b      	negs	r3, r3
 800bfda:	441a      	add	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d105      	bne.n	800bff2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	1c5a      	adds	r2, r3, #1
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bffa:	697b      	ldr	r3, [r7, #20]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c012:	2b00      	cmp	r3, #0
 800c014:	d018      	beq.n	800c048 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68da      	ldr	r2, [r3, #12]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01e:	441a      	add	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68da      	ldr	r2, [r3, #12]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d303      	bcc.n	800c038 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68d9      	ldr	r1, [r3, #12]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c040:	461a      	mov	r2, r3
 800c042:	6838      	ldr	r0, [r7, #0]
 800c044:	f001 fcd4 	bl	800d9f0 <memcpy>
	}
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c058:	f001 f9a4 	bl	800d3a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c062:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c064:	e011      	b.n	800c08a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d012      	beq.n	800c094 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3324      	adds	r3, #36	; 0x24
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fc76 	bl	800c964 <xTaskRemoveFromEventList>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c07e:	f000 fd4b 	bl	800cb18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	3b01      	subs	r3, #1
 800c086:	b2db      	uxtb	r3, r3
 800c088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dce9      	bgt.n	800c066 <prvUnlockQueue+0x16>
 800c092:	e000      	b.n	800c096 <prvUnlockQueue+0x46>
					break;
 800c094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	22ff      	movs	r2, #255	; 0xff
 800c09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c09e:	f001 f9b1 	bl	800d404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0a2:	f001 f97f 	bl	800d3a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0ae:	e011      	b.n	800c0d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d012      	beq.n	800c0de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	3310      	adds	r3, #16
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f000 fc51 	bl	800c964 <xTaskRemoveFromEventList>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0c8:	f000 fd26 	bl	800cb18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	dce9      	bgt.n	800c0b0 <prvUnlockQueue+0x60>
 800c0dc:	e000      	b.n	800c0e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	22ff      	movs	r2, #255	; 0xff
 800c0e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0e8:	f001 f98c 	bl	800d404 <vPortExitCritical>
}
 800c0ec:	bf00      	nop
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0fc:	f001 f952 	bl	800d3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c104:	2b00      	cmp	r3, #0
 800c106:	d102      	bne.n	800c10e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c108:	2301      	movs	r3, #1
 800c10a:	60fb      	str	r3, [r7, #12]
 800c10c:	e001      	b.n	800c112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c112:	f001 f977 	bl	800d404 <vPortExitCritical>

	return xReturn;
 800c116:	68fb      	ldr	r3, [r7, #12]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c128:	f001 f93c 	bl	800d3a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c134:	429a      	cmp	r2, r3
 800c136:	d102      	bne.n	800c13e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c138:	2301      	movs	r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	e001      	b.n	800c142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c142:	f001 f95f 	bl	800d404 <vPortExitCritical>

	return xReturn;
 800c146:	68fb      	ldr	r3, [r7, #12]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08e      	sub	sp, #56	; 0x38
 800c154:	af04      	add	r7, sp, #16
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	623b      	str	r3, [r7, #32]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xTaskCreateStatic+0x46>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	61fb      	str	r3, [r7, #28]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c196:	2354      	movs	r3, #84	; 0x54
 800c198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2b54      	cmp	r3, #84	; 0x54
 800c19e:	d00a      	beq.n	800c1b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	61bb      	str	r3, [r7, #24]
}
 800c1b2:	bf00      	nop
 800c1b4:	e7fe      	b.n	800c1b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01e      	beq.n	800c1fc <xTaskCreateStatic+0xac>
 800c1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d01b      	beq.n	800c1fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	9303      	str	r3, [sp, #12]
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	9302      	str	r3, [sp, #8]
 800c1de:	f107 0314 	add.w	r3, r7, #20
 800c1e2:	9301      	str	r3, [sp, #4]
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 f850 	bl	800c294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1f6:	f000 f8d5 	bl	800c3a4 <prvAddNewTaskToReadyList>
 800c1fa:	e001      	b.n	800c200 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c200:	697b      	ldr	r3, [r7, #20]
	}
 800c202:	4618      	mov	r0, r3
 800c204:	3728      	adds	r7, #40	; 0x28
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b08c      	sub	sp, #48	; 0x30
 800c20e:	af04      	add	r7, sp, #16
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	603b      	str	r3, [r7, #0]
 800c216:	4613      	mov	r3, r2
 800c218:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c21a:	88fb      	ldrh	r3, [r7, #6]
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 f9e2 	bl	800d5e8 <pvPortMalloc>
 800c224:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00e      	beq.n	800c24a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c22c:	2054      	movs	r0, #84	; 0x54
 800c22e:	f001 f9db 	bl	800d5e8 <pvPortMalloc>
 800c232:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	631a      	str	r2, [r3, #48]	; 0x30
 800c240:	e005      	b.n	800c24e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c242:	6978      	ldr	r0, [r7, #20]
 800c244:	f001 fa94 	bl	800d770 <vPortFree>
 800c248:	e001      	b.n	800c24e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d017      	beq.n	800c284 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c25c:	88fa      	ldrh	r2, [r7, #6]
 800c25e:	2300      	movs	r3, #0
 800c260:	9303      	str	r3, [sp, #12]
 800c262:	69fb      	ldr	r3, [r7, #28]
 800c264:	9302      	str	r3, [sp, #8]
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	9301      	str	r3, [sp, #4]
 800c26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	68b9      	ldr	r1, [r7, #8]
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f000 f80e 	bl	800c294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c278:	69f8      	ldr	r0, [r7, #28]
 800c27a:	f000 f893 	bl	800c3a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c27e:	2301      	movs	r3, #1
 800c280:	61bb      	str	r3, [r7, #24]
 800c282:	e002      	b.n	800c28a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c284:	f04f 33ff 	mov.w	r3, #4294967295
 800c288:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c28a:	69bb      	ldr	r3, [r7, #24]
	}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3720      	adds	r7, #32
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <prvInitialiseNewTask+0x48>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	617b      	str	r3, [r7, #20]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01f      	beq.n	800c322 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61fb      	str	r3, [r7, #28]
 800c2e6:	e012      	b.n	800c30e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	7819      	ldrb	r1, [r3, #0]
 800c2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	3334      	adds	r3, #52	; 0x34
 800c2f8:	460a      	mov	r2, r1
 800c2fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	4413      	add	r3, r2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d006      	beq.n	800c316 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	3301      	adds	r3, #1
 800c30c:	61fb      	str	r3, [r7, #28]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	2b0f      	cmp	r3, #15
 800c312:	d9e9      	bls.n	800c2e8 <prvInitialiseNewTask+0x54>
 800c314:	e000      	b.n	800c318 <prvInitialiseNewTask+0x84>
			{
				break;
 800c316:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c320:	e003      	b.n	800c32a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32c:	2b06      	cmp	r3, #6
 800c32e:	d901      	bls.n	800c334 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c330:	2306      	movs	r3, #6
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c338:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c33e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	2200      	movs	r2, #0
 800c344:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe ff74 	bl	800b238 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	3318      	adds	r3, #24
 800c354:	4618      	mov	r0, r3
 800c356:	f7fe ff6f 	bl	800b238 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f1c3 0207 	rsb	r2, r3, #7
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c36e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	2200      	movs	r2, #0
 800c374:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	68f9      	ldr	r1, [r7, #12]
 800c382:	69b8      	ldr	r0, [r7, #24]
 800c384:	f000 fee2 	bl	800d14c <pxPortInitialiseStack>
 800c388:	4602      	mov	r2, r0
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c398:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c39a:	bf00      	nop
 800c39c:	3720      	adds	r7, #32
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3ac:	f000 fffa 	bl	800d3a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3b0:	4b2a      	ldr	r3, [pc, #168]	; (800c45c <prvAddNewTaskToReadyList+0xb8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	4a29      	ldr	r2, [pc, #164]	; (800c45c <prvAddNewTaskToReadyList+0xb8>)
 800c3b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3ba:	4b29      	ldr	r3, [pc, #164]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d109      	bne.n	800c3d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3c2:	4a27      	ldr	r2, [pc, #156]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3c8:	4b24      	ldr	r3, [pc, #144]	; (800c45c <prvAddNewTaskToReadyList+0xb8>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d110      	bne.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3d0:	f000 fbc6 	bl	800cb60 <prvInitialiseTaskLists>
 800c3d4:	e00d      	b.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3d6:	4b23      	ldr	r3, [pc, #140]	; (800c464 <prvAddNewTaskToReadyList+0xc0>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d109      	bne.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3de:	4b20      	ldr	r3, [pc, #128]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d802      	bhi.n	800c3f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3ec:	4a1c      	ldr	r2, [pc, #112]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3f2:	4b1d      	ldr	r3, [pc, #116]	; (800c468 <prvAddNewTaskToReadyList+0xc4>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	4a1b      	ldr	r2, [pc, #108]	; (800c468 <prvAddNewTaskToReadyList+0xc4>)
 800c3fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c400:	2201      	movs	r2, #1
 800c402:	409a      	lsls	r2, r3
 800c404:	4b19      	ldr	r3, [pc, #100]	; (800c46c <prvAddNewTaskToReadyList+0xc8>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4313      	orrs	r3, r2
 800c40a:	4a18      	ldr	r2, [pc, #96]	; (800c46c <prvAddNewTaskToReadyList+0xc8>)
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4a15      	ldr	r2, [pc, #84]	; (800c470 <prvAddNewTaskToReadyList+0xcc>)
 800c41c:	441a      	add	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3304      	adds	r3, #4
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7fe ff14 	bl	800b252 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c42a:	f000 ffeb 	bl	800d404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c42e:	4b0d      	ldr	r3, [pc, #52]	; (800c464 <prvAddNewTaskToReadyList+0xc0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00e      	beq.n	800c454 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c436:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvAddNewTaskToReadyList+0xbc>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	429a      	cmp	r2, r3
 800c442:	d207      	bcs.n	800c454 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c444:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <prvAddNewTaskToReadyList+0xd0>)
 800c446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c454:	bf00      	nop
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	200005e4 	.word	0x200005e4
 800c460:	200004e4 	.word	0x200004e4
 800c464:	200005f0 	.word	0x200005f0
 800c468:	20000600 	.word	0x20000600
 800c46c:	200005ec 	.word	0x200005ec
 800c470:	200004e8 	.word	0x200004e8
 800c474:	e000ed04 	.word	0xe000ed04

0800c478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c480:	2300      	movs	r3, #0
 800c482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d017      	beq.n	800c4ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c48a:	4b13      	ldr	r3, [pc, #76]	; (800c4d8 <vTaskDelay+0x60>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00a      	beq.n	800c4a8 <vTaskDelay+0x30>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	60bb      	str	r3, [r7, #8]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c4a8:	f000 f87a 	bl	800c5a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fde6 	bl	800d080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4b4:	f000 f882 	bl	800c5bc <xTaskResumeAll>
 800c4b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d107      	bne.n	800c4d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c4c0:	4b06      	ldr	r3, [pc, #24]	; (800c4dc <vTaskDelay+0x64>)
 800c4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	f3bf 8f4f 	dsb	sy
 800c4cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	2000060c 	.word	0x2000060c
 800c4dc:	e000ed04 	.word	0xe000ed04

0800c4e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b08a      	sub	sp, #40	; 0x28
 800c4e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4ee:	463a      	mov	r2, r7
 800c4f0:	1d39      	adds	r1, r7, #4
 800c4f2:	f107 0308 	add.w	r3, r7, #8
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7f5 ff66 	bl	80023c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	9202      	str	r2, [sp, #8]
 800c504:	9301      	str	r3, [sp, #4]
 800c506:	2300      	movs	r3, #0
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	2300      	movs	r3, #0
 800c50c:	460a      	mov	r2, r1
 800c50e:	491e      	ldr	r1, [pc, #120]	; (800c588 <vTaskStartScheduler+0xa8>)
 800c510:	481e      	ldr	r0, [pc, #120]	; (800c58c <vTaskStartScheduler+0xac>)
 800c512:	f7ff fe1d 	bl	800c150 <xTaskCreateStatic>
 800c516:	4603      	mov	r3, r0
 800c518:	4a1d      	ldr	r2, [pc, #116]	; (800c590 <vTaskStartScheduler+0xb0>)
 800c51a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c51c:	4b1c      	ldr	r3, [pc, #112]	; (800c590 <vTaskStartScheduler+0xb0>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c524:	2301      	movs	r3, #1
 800c526:	617b      	str	r3, [r7, #20]
 800c528:	e001      	b.n	800c52e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d116      	bne.n	800c562 <vTaskStartScheduler+0x82>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	613b      	str	r3, [r7, #16]
}
 800c546:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c548:	4b12      	ldr	r3, [pc, #72]	; (800c594 <vTaskStartScheduler+0xb4>)
 800c54a:	f04f 32ff 	mov.w	r2, #4294967295
 800c54e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c550:	4b11      	ldr	r3, [pc, #68]	; (800c598 <vTaskStartScheduler+0xb8>)
 800c552:	2201      	movs	r2, #1
 800c554:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c556:	4b11      	ldr	r3, [pc, #68]	; (800c59c <vTaskStartScheduler+0xbc>)
 800c558:	2200      	movs	r2, #0
 800c55a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c55c:	f000 fe80 	bl	800d260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c560:	e00e      	b.n	800c580 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c568:	d10a      	bne.n	800c580 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	60fb      	str	r3, [r7, #12]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <vTaskStartScheduler+0x9e>
}
 800c580:	bf00      	nop
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	080111ac 	.word	0x080111ac
 800c58c:	0800cb31 	.word	0x0800cb31
 800c590:	20000608 	.word	0x20000608
 800c594:	20000604 	.word	0x20000604
 800c598:	200005f0 	.word	0x200005f0
 800c59c:	200005e8 	.word	0x200005e8

0800c5a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c5a4:	4b04      	ldr	r3, [pc, #16]	; (800c5b8 <vTaskSuspendAll+0x18>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	4a03      	ldr	r2, [pc, #12]	; (800c5b8 <vTaskSuspendAll+0x18>)
 800c5ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c5ae:	bf00      	nop
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	2000060c 	.word	0x2000060c

0800c5bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5ca:	4b41      	ldr	r3, [pc, #260]	; (800c6d0 <xTaskResumeAll+0x114>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10a      	bne.n	800c5e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	603b      	str	r3, [r7, #0]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5e8:	f000 fedc 	bl	800d3a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5ec:	4b38      	ldr	r3, [pc, #224]	; (800c6d0 <xTaskResumeAll+0x114>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	4a37      	ldr	r2, [pc, #220]	; (800c6d0 <xTaskResumeAll+0x114>)
 800c5f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5f6:	4b36      	ldr	r3, [pc, #216]	; (800c6d0 <xTaskResumeAll+0x114>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d161      	bne.n	800c6c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5fe:	4b35      	ldr	r3, [pc, #212]	; (800c6d4 <xTaskResumeAll+0x118>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d05d      	beq.n	800c6c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c606:	e02e      	b.n	800c666 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c608:	4b33      	ldr	r3, [pc, #204]	; (800c6d8 <xTaskResumeAll+0x11c>)
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	3318      	adds	r3, #24
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe fe79 	bl	800b30c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3304      	adds	r3, #4
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe fe74 	bl	800b30c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c628:	2201      	movs	r2, #1
 800c62a:	409a      	lsls	r2, r3
 800c62c:	4b2b      	ldr	r3, [pc, #172]	; (800c6dc <xTaskResumeAll+0x120>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4313      	orrs	r3, r2
 800c632:	4a2a      	ldr	r2, [pc, #168]	; (800c6dc <xTaskResumeAll+0x120>)
 800c634:	6013      	str	r3, [r2, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63a:	4613      	mov	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4413      	add	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4a27      	ldr	r2, [pc, #156]	; (800c6e0 <xTaskResumeAll+0x124>)
 800c644:	441a      	add	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f7fe fe00 	bl	800b252 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c656:	4b23      	ldr	r3, [pc, #140]	; (800c6e4 <xTaskResumeAll+0x128>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d302      	bcc.n	800c666 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c660:	4b21      	ldr	r3, [pc, #132]	; (800c6e8 <xTaskResumeAll+0x12c>)
 800c662:	2201      	movs	r2, #1
 800c664:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c666:	4b1c      	ldr	r3, [pc, #112]	; (800c6d8 <xTaskResumeAll+0x11c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1cc      	bne.n	800c608 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c674:	f000 fb12 	bl	800cc9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c678:	4b1c      	ldr	r3, [pc, #112]	; (800c6ec <xTaskResumeAll+0x130>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d010      	beq.n	800c6a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c684:	f000 f836 	bl	800c6f4 <xTaskIncrementTick>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c68e:	4b16      	ldr	r3, [pc, #88]	; (800c6e8 <xTaskResumeAll+0x12c>)
 800c690:	2201      	movs	r2, #1
 800c692:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3b01      	subs	r3, #1
 800c698:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1f1      	bne.n	800c684 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c6a0:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <xTaskResumeAll+0x130>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6a6:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <xTaskResumeAll+0x12c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d009      	beq.n	800c6c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6b2:	4b0f      	ldr	r3, [pc, #60]	; (800c6f0 <xTaskResumeAll+0x134>)
 800c6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6c2:	f000 fe9f 	bl	800d404 <vPortExitCritical>

	return xAlreadyYielded;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	2000060c 	.word	0x2000060c
 800c6d4:	200005e4 	.word	0x200005e4
 800c6d8:	200005a4 	.word	0x200005a4
 800c6dc:	200005ec 	.word	0x200005ec
 800c6e0:	200004e8 	.word	0x200004e8
 800c6e4:	200004e4 	.word	0x200004e4
 800c6e8:	200005f8 	.word	0x200005f8
 800c6ec:	200005f4 	.word	0x200005f4
 800c6f0:	e000ed04 	.word	0xe000ed04

0800c6f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6fe:	4b4e      	ldr	r3, [pc, #312]	; (800c838 <xTaskIncrementTick+0x144>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	f040 8088 	bne.w	800c818 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c708:	4b4c      	ldr	r3, [pc, #304]	; (800c83c <xTaskIncrementTick+0x148>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3301      	adds	r3, #1
 800c70e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c710:	4a4a      	ldr	r2, [pc, #296]	; (800c83c <xTaskIncrementTick+0x148>)
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d120      	bne.n	800c75e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c71c:	4b48      	ldr	r3, [pc, #288]	; (800c840 <xTaskIncrementTick+0x14c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <xTaskIncrementTick+0x48>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	603b      	str	r3, [r7, #0]
}
 800c738:	bf00      	nop
 800c73a:	e7fe      	b.n	800c73a <xTaskIncrementTick+0x46>
 800c73c:	4b40      	ldr	r3, [pc, #256]	; (800c840 <xTaskIncrementTick+0x14c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60fb      	str	r3, [r7, #12]
 800c742:	4b40      	ldr	r3, [pc, #256]	; (800c844 <xTaskIncrementTick+0x150>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a3e      	ldr	r2, [pc, #248]	; (800c840 <xTaskIncrementTick+0x14c>)
 800c748:	6013      	str	r3, [r2, #0]
 800c74a:	4a3e      	ldr	r2, [pc, #248]	; (800c844 <xTaskIncrementTick+0x150>)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	4b3d      	ldr	r3, [pc, #244]	; (800c848 <xTaskIncrementTick+0x154>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	4a3c      	ldr	r2, [pc, #240]	; (800c848 <xTaskIncrementTick+0x154>)
 800c758:	6013      	str	r3, [r2, #0]
 800c75a:	f000 fa9f 	bl	800cc9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c75e:	4b3b      	ldr	r3, [pc, #236]	; (800c84c <xTaskIncrementTick+0x158>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	429a      	cmp	r2, r3
 800c766:	d348      	bcc.n	800c7fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c768:	4b35      	ldr	r3, [pc, #212]	; (800c840 <xTaskIncrementTick+0x14c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d104      	bne.n	800c77c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c772:	4b36      	ldr	r3, [pc, #216]	; (800c84c <xTaskIncrementTick+0x158>)
 800c774:	f04f 32ff 	mov.w	r2, #4294967295
 800c778:	601a      	str	r2, [r3, #0]
					break;
 800c77a:	e03e      	b.n	800c7fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c77c:	4b30      	ldr	r3, [pc, #192]	; (800c840 <xTaskIncrementTick+0x14c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	429a      	cmp	r2, r3
 800c792:	d203      	bcs.n	800c79c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c794:	4a2d      	ldr	r2, [pc, #180]	; (800c84c <xTaskIncrementTick+0x158>)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c79a:	e02e      	b.n	800c7fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	3304      	adds	r3, #4
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7fe fdb3 	bl	800b30c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d004      	beq.n	800c7b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	3318      	adds	r3, #24
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fdaa 	bl	800b30c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7bc:	2201      	movs	r2, #1
 800c7be:	409a      	lsls	r2, r3
 800c7c0:	4b23      	ldr	r3, [pc, #140]	; (800c850 <xTaskIncrementTick+0x15c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	4a22      	ldr	r2, [pc, #136]	; (800c850 <xTaskIncrementTick+0x15c>)
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4413      	add	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4a1f      	ldr	r2, [pc, #124]	; (800c854 <xTaskIncrementTick+0x160>)
 800c7d8:	441a      	add	r2, r3
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	3304      	adds	r3, #4
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	f7fe fd36 	bl	800b252 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ea:	4b1b      	ldr	r3, [pc, #108]	; (800c858 <xTaskIncrementTick+0x164>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d3b9      	bcc.n	800c768 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7f8:	e7b6      	b.n	800c768 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7fa:	4b17      	ldr	r3, [pc, #92]	; (800c858 <xTaskIncrementTick+0x164>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4914      	ldr	r1, [pc, #80]	; (800c854 <xTaskIncrementTick+0x160>)
 800c802:	4613      	mov	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	440b      	add	r3, r1
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d907      	bls.n	800c822 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800c812:	2301      	movs	r3, #1
 800c814:	617b      	str	r3, [r7, #20]
 800c816:	e004      	b.n	800c822 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c818:	4b10      	ldr	r3, [pc, #64]	; (800c85c <xTaskIncrementTick+0x168>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3301      	adds	r3, #1
 800c81e:	4a0f      	ldr	r2, [pc, #60]	; (800c85c <xTaskIncrementTick+0x168>)
 800c820:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c822:	4b0f      	ldr	r3, [pc, #60]	; (800c860 <xTaskIncrementTick+0x16c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d001      	beq.n	800c82e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800c82a:	2301      	movs	r3, #1
 800c82c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c82e:	697b      	ldr	r3, [r7, #20]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	2000060c 	.word	0x2000060c
 800c83c:	200005e8 	.word	0x200005e8
 800c840:	2000059c 	.word	0x2000059c
 800c844:	200005a0 	.word	0x200005a0
 800c848:	200005fc 	.word	0x200005fc
 800c84c:	20000604 	.word	0x20000604
 800c850:	200005ec 	.word	0x200005ec
 800c854:	200004e8 	.word	0x200004e8
 800c858:	200004e4 	.word	0x200004e4
 800c85c:	200005f4 	.word	0x200005f4
 800c860:	200005f8 	.word	0x200005f8

0800c864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c864:	b480      	push	{r7}
 800c866:	b087      	sub	sp, #28
 800c868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c86a:	4b27      	ldr	r3, [pc, #156]	; (800c908 <vTaskSwitchContext+0xa4>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c872:	4b26      	ldr	r3, [pc, #152]	; (800c90c <vTaskSwitchContext+0xa8>)
 800c874:	2201      	movs	r2, #1
 800c876:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c878:	e03f      	b.n	800c8fa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c87a:	4b24      	ldr	r3, [pc, #144]	; (800c90c <vTaskSwitchContext+0xa8>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c880:	4b23      	ldr	r3, [pc, #140]	; (800c910 <vTaskSwitchContext+0xac>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	fab3 f383 	clz	r3, r3
 800c88c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c88e:	7afb      	ldrb	r3, [r7, #11]
 800c890:	f1c3 031f 	rsb	r3, r3, #31
 800c894:	617b      	str	r3, [r7, #20]
 800c896:	491f      	ldr	r1, [pc, #124]	; (800c914 <vTaskSwitchContext+0xb0>)
 800c898:	697a      	ldr	r2, [r7, #20]
 800c89a:	4613      	mov	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	440b      	add	r3, r1
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10a      	bne.n	800c8c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	607b      	str	r3, [r7, #4]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <vTaskSwitchContext+0x5a>
 800c8c0:	697a      	ldr	r2, [r7, #20]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4a12      	ldr	r2, [pc, #72]	; (800c914 <vTaskSwitchContext+0xb0>)
 800c8cc:	4413      	add	r3, r2
 800c8ce:	613b      	str	r3, [r7, #16]
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	605a      	str	r2, [r3, #4]
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	3308      	adds	r3, #8
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d104      	bne.n	800c8f0 <vTaskSwitchContext+0x8c>
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	605a      	str	r2, [r3, #4]
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	4a08      	ldr	r2, [pc, #32]	; (800c918 <vTaskSwitchContext+0xb4>)
 800c8f8:	6013      	str	r3, [r2, #0]
}
 800c8fa:	bf00      	nop
 800c8fc:	371c      	adds	r7, #28
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	2000060c 	.word	0x2000060c
 800c90c:	200005f8 	.word	0x200005f8
 800c910:	200005ec 	.word	0x200005ec
 800c914:	200004e8 	.word	0x200004e8
 800c918:	200004e4 	.word	0x200004e4

0800c91c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	60fb      	str	r3, [r7, #12]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c942:	4b07      	ldr	r3, [pc, #28]	; (800c960 <vTaskPlaceOnEventList+0x44>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3318      	adds	r3, #24
 800c948:	4619      	mov	r1, r3
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7fe fca5 	bl	800b29a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c950:	2101      	movs	r1, #1
 800c952:	6838      	ldr	r0, [r7, #0]
 800c954:	f000 fb94 	bl	800d080 <prvAddCurrentTaskToDelayedList>
}
 800c958:	bf00      	nop
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	200004e4 	.word	0x200004e4

0800c964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10a      	bne.n	800c990 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	60fb      	str	r3, [r7, #12]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	3318      	adds	r3, #24
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe fcb9 	bl	800b30c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c99a:	4b1d      	ldr	r3, [pc, #116]	; (800ca10 <xTaskRemoveFromEventList+0xac>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d11c      	bne.n	800c9dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fe fcb0 	bl	800b30c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	409a      	lsls	r2, r3
 800c9b4:	4b17      	ldr	r3, [pc, #92]	; (800ca14 <xTaskRemoveFromEventList+0xb0>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	4a16      	ldr	r2, [pc, #88]	; (800ca14 <xTaskRemoveFromEventList+0xb0>)
 800c9bc:	6013      	str	r3, [r2, #0]
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4a13      	ldr	r2, [pc, #76]	; (800ca18 <xTaskRemoveFromEventList+0xb4>)
 800c9cc:	441a      	add	r2, r3
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	f7fe fc3c 	bl	800b252 <vListInsertEnd>
 800c9da:	e005      	b.n	800c9e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	3318      	adds	r3, #24
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	480e      	ldr	r0, [pc, #56]	; (800ca1c <xTaskRemoveFromEventList+0xb8>)
 800c9e4:	f7fe fc35 	bl	800b252 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ca20 <xTaskRemoveFromEventList+0xbc>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d905      	bls.n	800ca02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ca24 <xTaskRemoveFromEventList+0xc0>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	e001      	b.n	800ca06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ca02:	2300      	movs	r3, #0
 800ca04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca06:	697b      	ldr	r3, [r7, #20]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	2000060c 	.word	0x2000060c
 800ca14:	200005ec 	.word	0x200005ec
 800ca18:	200004e8 	.word	0x200004e8
 800ca1c:	200005a4 	.word	0x200005a4
 800ca20:	200004e4 	.word	0x200004e4
 800ca24:	200005f8 	.word	0x200005f8

0800ca28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca30:	4b06      	ldr	r3, [pc, #24]	; (800ca4c <vTaskInternalSetTimeOutState+0x24>)
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca38:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <vTaskInternalSetTimeOutState+0x28>)
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	605a      	str	r2, [r3, #4]
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	200005fc 	.word	0x200005fc
 800ca50:	200005e8 	.word	0x200005e8

0800ca54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	613b      	str	r3, [r7, #16]
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10a      	bne.n	800ca96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	60fb      	str	r3, [r7, #12]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca96:	f000 fc85 	bl	800d3a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca9a:	4b1d      	ldr	r3, [pc, #116]	; (800cb10 <xTaskCheckForTimeOut+0xbc>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	69ba      	ldr	r2, [r7, #24]
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab2:	d102      	bne.n	800caba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cab4:	2300      	movs	r3, #0
 800cab6:	61fb      	str	r3, [r7, #28]
 800cab8:	e023      	b.n	800cb02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	4b15      	ldr	r3, [pc, #84]	; (800cb14 <xTaskCheckForTimeOut+0xc0>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d007      	beq.n	800cad6 <xTaskCheckForTimeOut+0x82>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d302      	bcc.n	800cad6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cad0:	2301      	movs	r3, #1
 800cad2:	61fb      	str	r3, [r7, #28]
 800cad4:	e015      	b.n	800cb02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d20b      	bcs.n	800caf8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	1ad2      	subs	r2, r2, r3
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff ff9b 	bl	800ca28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61fb      	str	r3, [r7, #28]
 800caf6:	e004      	b.n	800cb02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cafe:	2301      	movs	r3, #1
 800cb00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb02:	f000 fc7f 	bl	800d404 <vPortExitCritical>

	return xReturn;
 800cb06:	69fb      	ldr	r3, [r7, #28]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3720      	adds	r7, #32
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	200005e8 	.word	0x200005e8
 800cb14:	200005fc 	.word	0x200005fc

0800cb18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb18:	b480      	push	{r7}
 800cb1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb1c:	4b03      	ldr	r3, [pc, #12]	; (800cb2c <vTaskMissedYield+0x14>)
 800cb1e:	2201      	movs	r2, #1
 800cb20:	601a      	str	r2, [r3, #0]
}
 800cb22:	bf00      	nop
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	200005f8 	.word	0x200005f8

0800cb30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb38:	f000 f852 	bl	800cbe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb3c:	4b06      	ldr	r3, [pc, #24]	; (800cb58 <prvIdleTask+0x28>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d9f9      	bls.n	800cb38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb44:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <prvIdleTask+0x2c>)
 800cb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb54:	e7f0      	b.n	800cb38 <prvIdleTask+0x8>
 800cb56:	bf00      	nop
 800cb58:	200004e8 	.word	0x200004e8
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb66:	2300      	movs	r3, #0
 800cb68:	607b      	str	r3, [r7, #4]
 800cb6a:	e00c      	b.n	800cb86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4a12      	ldr	r2, [pc, #72]	; (800cbc0 <prvInitialiseTaskLists+0x60>)
 800cb78:	4413      	add	r3, r2
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fb3c 	bl	800b1f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3301      	adds	r3, #1
 800cb84:	607b      	str	r3, [r7, #4]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b06      	cmp	r3, #6
 800cb8a:	d9ef      	bls.n	800cb6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb8c:	480d      	ldr	r0, [pc, #52]	; (800cbc4 <prvInitialiseTaskLists+0x64>)
 800cb8e:	f7fe fb33 	bl	800b1f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb92:	480d      	ldr	r0, [pc, #52]	; (800cbc8 <prvInitialiseTaskLists+0x68>)
 800cb94:	f7fe fb30 	bl	800b1f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb98:	480c      	ldr	r0, [pc, #48]	; (800cbcc <prvInitialiseTaskLists+0x6c>)
 800cb9a:	f7fe fb2d 	bl	800b1f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb9e:	480c      	ldr	r0, [pc, #48]	; (800cbd0 <prvInitialiseTaskLists+0x70>)
 800cba0:	f7fe fb2a 	bl	800b1f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cba4:	480b      	ldr	r0, [pc, #44]	; (800cbd4 <prvInitialiseTaskLists+0x74>)
 800cba6:	f7fe fb27 	bl	800b1f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbaa:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <prvInitialiseTaskLists+0x78>)
 800cbac:	4a05      	ldr	r2, [pc, #20]	; (800cbc4 <prvInitialiseTaskLists+0x64>)
 800cbae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbb0:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <prvInitialiseTaskLists+0x7c>)
 800cbb2:	4a05      	ldr	r2, [pc, #20]	; (800cbc8 <prvInitialiseTaskLists+0x68>)
 800cbb4:	601a      	str	r2, [r3, #0]
}
 800cbb6:	bf00      	nop
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	200004e8 	.word	0x200004e8
 800cbc4:	20000574 	.word	0x20000574
 800cbc8:	20000588 	.word	0x20000588
 800cbcc:	200005a4 	.word	0x200005a4
 800cbd0:	200005b8 	.word	0x200005b8
 800cbd4:	200005d0 	.word	0x200005d0
 800cbd8:	2000059c 	.word	0x2000059c
 800cbdc:	200005a0 	.word	0x200005a0

0800cbe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbe6:	e019      	b.n	800cc1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbe8:	f000 fbdc 	bl	800d3a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbec:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <prvCheckTasksWaitingTermination+0x50>)
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fb87 	bl	800b30c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbfe:	4b0d      	ldr	r3, [pc, #52]	; (800cc34 <prvCheckTasksWaitingTermination+0x54>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3b01      	subs	r3, #1
 800cc04:	4a0b      	ldr	r2, [pc, #44]	; (800cc34 <prvCheckTasksWaitingTermination+0x54>)
 800cc06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc08:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <prvCheckTasksWaitingTermination+0x58>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4a0a      	ldr	r2, [pc, #40]	; (800cc38 <prvCheckTasksWaitingTermination+0x58>)
 800cc10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc12:	f000 fbf7 	bl	800d404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f810 	bl	800cc3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <prvCheckTasksWaitingTermination+0x58>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1e1      	bne.n	800cbe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	200005b8 	.word	0x200005b8
 800cc34:	200005e4 	.word	0x200005e4
 800cc38:	200005cc 	.word	0x200005cc

0800cc3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d108      	bne.n	800cc60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fd8c 	bl	800d770 <vPortFree>
				vPortFree( pxTCB );
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fd89 	bl	800d770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc5e:	e018      	b.n	800cc92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d103      	bne.n	800cc72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fd80 	bl	800d770 <vPortFree>
	}
 800cc70:	e00f      	b.n	800cc92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc78:	2b02      	cmp	r3, #2
 800cc7a:	d00a      	beq.n	800cc92 <prvDeleteTCB+0x56>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	f383 8811 	msr	BASEPRI, r3
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	f3bf 8f4f 	dsb	sy
 800cc8c:	60fb      	str	r3, [r7, #12]
}
 800cc8e:	bf00      	nop
 800cc90:	e7fe      	b.n	800cc90 <prvDeleteTCB+0x54>
	}
 800cc92:	bf00      	nop
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
	...

0800cc9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cca2:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <prvResetNextTaskUnblockTime+0x38>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d104      	bne.n	800ccb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ccb4:	e008      	b.n	800ccc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb6:	4b07      	ldr	r3, [pc, #28]	; (800ccd4 <prvResetNextTaskUnblockTime+0x38>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	4a04      	ldr	r2, [pc, #16]	; (800ccd8 <prvResetNextTaskUnblockTime+0x3c>)
 800ccc6:	6013      	str	r3, [r2, #0]
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr
 800ccd4:	2000059c 	.word	0x2000059c
 800ccd8:	20000604 	.word	0x20000604

0800ccdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cce2:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <xTaskGetSchedulerState+0x34>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d102      	bne.n	800ccf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccea:	2301      	movs	r3, #1
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	e008      	b.n	800cd02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccf0:	4b08      	ldr	r3, [pc, #32]	; (800cd14 <xTaskGetSchedulerState+0x38>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d102      	bne.n	800ccfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	607b      	str	r3, [r7, #4]
 800ccfc:	e001      	b.n	800cd02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd02:	687b      	ldr	r3, [r7, #4]
	}
 800cd04:	4618      	mov	r0, r3
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	200005f0 	.word	0x200005f0
 800cd14:	2000060c 	.word	0x2000060c

0800cd18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cd24:	2300      	movs	r3, #0
 800cd26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d069      	beq.n	800ce02 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	4b36      	ldr	r3, [pc, #216]	; (800ce0c <xTaskPriorityInherit+0xf4>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d259      	bcs.n	800cdf0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	db06      	blt.n	800cd52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd44:	4b31      	ldr	r3, [pc, #196]	; (800ce0c <xTaskPriorityInherit+0xf4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	f1c3 0207 	rsb	r2, r3, #7
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	6959      	ldr	r1, [r3, #20]
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4a2b      	ldr	r2, [pc, #172]	; (800ce10 <xTaskPriorityInherit+0xf8>)
 800cd64:	4413      	add	r3, r2
 800cd66:	4299      	cmp	r1, r3
 800cd68:	d13a      	bne.n	800cde0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe facc 	bl	800b30c <uxListRemove>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d115      	bne.n	800cda6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7e:	4924      	ldr	r1, [pc, #144]	; (800ce10 <xTaskPriorityInherit+0xf8>)
 800cd80:	4613      	mov	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	440b      	add	r3, r1
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10a      	bne.n	800cda6 <xTaskPriorityInherit+0x8e>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd94:	2201      	movs	r2, #1
 800cd96:	fa02 f303 	lsl.w	r3, r2, r3
 800cd9a:	43da      	mvns	r2, r3
 800cd9c:	4b1d      	ldr	r3, [pc, #116]	; (800ce14 <xTaskPriorityInherit+0xfc>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4013      	ands	r3, r2
 800cda2:	4a1c      	ldr	r2, [pc, #112]	; (800ce14 <xTaskPriorityInherit+0xfc>)
 800cda4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cda6:	4b19      	ldr	r3, [pc, #100]	; (800ce0c <xTaskPriorityInherit+0xf4>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	409a      	lsls	r2, r3
 800cdb8:	4b16      	ldr	r3, [pc, #88]	; (800ce14 <xTaskPriorityInherit+0xfc>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	4a15      	ldr	r2, [pc, #84]	; (800ce14 <xTaskPriorityInherit+0xfc>)
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4413      	add	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4a10      	ldr	r2, [pc, #64]	; (800ce10 <xTaskPriorityInherit+0xf8>)
 800cdd0:	441a      	add	r2, r3
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	3304      	adds	r3, #4
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4610      	mov	r0, r2
 800cdda:	f7fe fa3a 	bl	800b252 <vListInsertEnd>
 800cdde:	e004      	b.n	800cdea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cde0:	4b0a      	ldr	r3, [pc, #40]	; (800ce0c <xTaskPriorityInherit+0xf4>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cdea:	2301      	movs	r3, #1
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	e008      	b.n	800ce02 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdf4:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <xTaskPriorityInherit+0xf4>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d201      	bcs.n	800ce02 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce02:	68fb      	ldr	r3, [r7, #12]
	}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	200004e4 	.word	0x200004e4
 800ce10:	200004e8 	.word	0x200004e8
 800ce14:	200005ec 	.word	0x200005ec

0800ce18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce24:	2300      	movs	r3, #0
 800ce26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d06e      	beq.n	800cf0c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce2e:	4b3a      	ldr	r3, [pc, #232]	; (800cf18 <xTaskPriorityDisinherit+0x100>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	693a      	ldr	r2, [r7, #16]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d00a      	beq.n	800ce4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ce38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3c:	f383 8811 	msr	BASEPRI, r3
 800ce40:	f3bf 8f6f 	isb	sy
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	60fb      	str	r3, [r7, #12]
}
 800ce4a:	bf00      	nop
 800ce4c:	e7fe      	b.n	800ce4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10a      	bne.n	800ce6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	60bb      	str	r3, [r7, #8]
}
 800ce68:	bf00      	nop
 800ce6a:	e7fe      	b.n	800ce6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce70:	1e5a      	subs	r2, r3, #1
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d044      	beq.n	800cf0c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d140      	bne.n	800cf0c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fe fa3c 	bl	800b30c <uxListRemove>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d115      	bne.n	800cec6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9e:	491f      	ldr	r1, [pc, #124]	; (800cf1c <xTaskPriorityDisinherit+0x104>)
 800cea0:	4613      	mov	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	440b      	add	r3, r1
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d10a      	bne.n	800cec6 <xTaskPriorityDisinherit+0xae>
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceba:	43da      	mvns	r2, r3
 800cebc:	4b18      	ldr	r3, [pc, #96]	; (800cf20 <xTaskPriorityDisinherit+0x108>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4013      	ands	r3, r2
 800cec2:	4a17      	ldr	r2, [pc, #92]	; (800cf20 <xTaskPriorityDisinherit+0x108>)
 800cec4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced2:	f1c3 0207 	rsb	r2, r3, #7
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cede:	2201      	movs	r2, #1
 800cee0:	409a      	lsls	r2, r3
 800cee2:	4b0f      	ldr	r3, [pc, #60]	; (800cf20 <xTaskPriorityDisinherit+0x108>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	4a0d      	ldr	r2, [pc, #52]	; (800cf20 <xTaskPriorityDisinherit+0x108>)
 800ceea:	6013      	str	r3, [r2, #0]
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef0:	4613      	mov	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4a08      	ldr	r2, [pc, #32]	; (800cf1c <xTaskPriorityDisinherit+0x104>)
 800cefa:	441a      	add	r2, r3
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	3304      	adds	r3, #4
 800cf00:	4619      	mov	r1, r3
 800cf02:	4610      	mov	r0, r2
 800cf04:	f7fe f9a5 	bl	800b252 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf0c:	697b      	ldr	r3, [r7, #20]
	}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	200004e4 	.word	0x200004e4
 800cf1c:	200004e8 	.word	0x200004e8
 800cf20:	200005ec 	.word	0x200005ec

0800cf24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cf32:	2301      	movs	r3, #1
 800cf34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 8083 	beq.w	800d044 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10a      	bne.n	800cf5c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	60fb      	str	r3, [r7, #12]
}
 800cf58:	bf00      	nop
 800cf5a:	e7fe      	b.n	800cf5a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d902      	bls.n	800cf6c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	61fb      	str	r3, [r7, #28]
 800cf6a:	e002      	b.n	800cf72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d063      	beq.n	800d044 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d15e      	bne.n	800d044 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cf86:	4b31      	ldr	r3, [pc, #196]	; (800d04c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69ba      	ldr	r2, [r7, #24]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d10a      	bne.n	800cfa6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	60bb      	str	r3, [r7, #8]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfaa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	69fa      	ldr	r2, [r7, #28]
 800cfb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	db04      	blt.n	800cfc4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	f1c3 0207 	rsb	r2, r3, #7
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	6959      	ldr	r1, [r3, #20]
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	4413      	add	r3, r2
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	4a1f      	ldr	r2, [pc, #124]	; (800d050 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cfd4:	4413      	add	r3, r2
 800cfd6:	4299      	cmp	r1, r3
 800cfd8:	d134      	bne.n	800d044 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	3304      	adds	r3, #4
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fe f994 	bl	800b30c <uxListRemove>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d115      	bne.n	800d016 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	4918      	ldr	r1, [pc, #96]	; (800d050 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	440b      	add	r3, r1
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d004:	2201      	movs	r2, #1
 800d006:	fa02 f303 	lsl.w	r3, r2, r3
 800d00a:	43da      	mvns	r2, r3
 800d00c:	4b11      	ldr	r3, [pc, #68]	; (800d054 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4013      	ands	r3, r2
 800d012:	4a10      	ldr	r2, [pc, #64]	; (800d054 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d014:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01a:	2201      	movs	r2, #1
 800d01c:	409a      	lsls	r2, r3
 800d01e:	4b0d      	ldr	r3, [pc, #52]	; (800d054 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4313      	orrs	r3, r2
 800d024:	4a0b      	ldr	r2, [pc, #44]	; (800d054 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d026:	6013      	str	r3, [r2, #0]
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02c:	4613      	mov	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4a06      	ldr	r2, [pc, #24]	; (800d050 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d036:	441a      	add	r2, r3
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	3304      	adds	r3, #4
 800d03c:	4619      	mov	r1, r3
 800d03e:	4610      	mov	r0, r2
 800d040:	f7fe f907 	bl	800b252 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d044:	bf00      	nop
 800d046:	3720      	adds	r7, #32
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	200004e4 	.word	0x200004e4
 800d050:	200004e8 	.word	0x200004e8
 800d054:	200005ec 	.word	0x200005ec

0800d058 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d058:	b480      	push	{r7}
 800d05a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d05c:	4b07      	ldr	r3, [pc, #28]	; (800d07c <pvTaskIncrementMutexHeldCount+0x24>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d004      	beq.n	800d06e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d064:	4b05      	ldr	r3, [pc, #20]	; (800d07c <pvTaskIncrementMutexHeldCount+0x24>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d06a:	3201      	adds	r2, #1
 800d06c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d06e:	4b03      	ldr	r3, [pc, #12]	; (800d07c <pvTaskIncrementMutexHeldCount+0x24>)
 800d070:	681b      	ldr	r3, [r3, #0]
	}
 800d072:	4618      	mov	r0, r3
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr
 800d07c:	200004e4 	.word	0x200004e4

0800d080 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d08a:	4b29      	ldr	r3, [pc, #164]	; (800d130 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d090:	4b28      	ldr	r3, [pc, #160]	; (800d134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3304      	adds	r3, #4
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe f938 	bl	800b30c <uxListRemove>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10b      	bne.n	800d0ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d0a2:	4b24      	ldr	r3, [pc, #144]	; (800d134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ae:	43da      	mvns	r2, r3
 800d0b0:	4b21      	ldr	r3, [pc, #132]	; (800d138 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	4a20      	ldr	r2, [pc, #128]	; (800d138 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d0b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c0:	d10a      	bne.n	800d0d8 <prvAddCurrentTaskToDelayedList+0x58>
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d007      	beq.n	800d0d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0c8:	4b1a      	ldr	r3, [pc, #104]	; (800d134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	481a      	ldr	r0, [pc, #104]	; (800d13c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d0d2:	f7fe f8be 	bl	800b252 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d0d6:	e026      	b.n	800d126 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4413      	add	r3, r2
 800d0de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0e0:	4b14      	ldr	r3, [pc, #80]	; (800d134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d209      	bcs.n	800d104 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0f0:	4b13      	ldr	r3, [pc, #76]	; (800d140 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	f7fe f8cc 	bl	800b29a <vListInsert>
}
 800d102:	e010      	b.n	800d126 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d104:	4b0f      	ldr	r3, [pc, #60]	; (800d144 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	3304      	adds	r3, #4
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f7fe f8c2 	bl	800b29a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d116:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d202      	bcs.n	800d126 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d120:	4a09      	ldr	r2, [pc, #36]	; (800d148 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	6013      	str	r3, [r2, #0]
}
 800d126:	bf00      	nop
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	200005e8 	.word	0x200005e8
 800d134:	200004e4 	.word	0x200004e4
 800d138:	200005ec 	.word	0x200005ec
 800d13c:	200005d0 	.word	0x200005d0
 800d140:	200005a0 	.word	0x200005a0
 800d144:	2000059c 	.word	0x2000059c
 800d148:	20000604 	.word	0x20000604

0800d14c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	3b04      	subs	r3, #4
 800d15c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3b04      	subs	r3, #4
 800d16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	f023 0201 	bic.w	r2, r3, #1
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3b04      	subs	r3, #4
 800d17a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d17c:	4a0c      	ldr	r2, [pc, #48]	; (800d1b0 <pxPortInitialiseStack+0x64>)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3b14      	subs	r3, #20
 800d186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3b04      	subs	r3, #4
 800d192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f06f 0202 	mvn.w	r2, #2
 800d19a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	3b20      	subs	r3, #32
 800d1a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3714      	adds	r7, #20
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	0800d1b5 	.word	0x0800d1b5

0800d1b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d1be:	4b12      	ldr	r3, [pc, #72]	; (800d208 <prvTaskExitError+0x54>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c6:	d00a      	beq.n	800d1de <prvTaskExitError+0x2a>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	60fb      	str	r3, [r7, #12]
}
 800d1da:	bf00      	nop
 800d1dc:	e7fe      	b.n	800d1dc <prvTaskExitError+0x28>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	60bb      	str	r3, [r7, #8]
}
 800d1f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d1f2:	bf00      	nop
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d0fc      	beq.n	800d1f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d1fa:	bf00      	nop
 800d1fc:	bf00      	nop
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr
 800d208:	20000078 	.word	0x20000078
 800d20c:	00000000 	.word	0x00000000

0800d210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d210:	4b07      	ldr	r3, [pc, #28]	; (800d230 <pxCurrentTCBConst2>)
 800d212:	6819      	ldr	r1, [r3, #0]
 800d214:	6808      	ldr	r0, [r1, #0]
 800d216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21a:	f380 8809 	msr	PSP, r0
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f04f 0000 	mov.w	r0, #0
 800d226:	f380 8811 	msr	BASEPRI, r0
 800d22a:	4770      	bx	lr
 800d22c:	f3af 8000 	nop.w

0800d230 <pxCurrentTCBConst2>:
 800d230:	200004e4 	.word	0x200004e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d234:	bf00      	nop
 800d236:	bf00      	nop

0800d238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d238:	4808      	ldr	r0, [pc, #32]	; (800d25c <prvPortStartFirstTask+0x24>)
 800d23a:	6800      	ldr	r0, [r0, #0]
 800d23c:	6800      	ldr	r0, [r0, #0]
 800d23e:	f380 8808 	msr	MSP, r0
 800d242:	f04f 0000 	mov.w	r0, #0
 800d246:	f380 8814 	msr	CONTROL, r0
 800d24a:	b662      	cpsie	i
 800d24c:	b661      	cpsie	f
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	df00      	svc	0
 800d258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d25a:	bf00      	nop
 800d25c:	e000ed08 	.word	0xe000ed08

0800d260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d266:	4b46      	ldr	r3, [pc, #280]	; (800d380 <xPortStartScheduler+0x120>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a46      	ldr	r2, [pc, #280]	; (800d384 <xPortStartScheduler+0x124>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d10a      	bne.n	800d286 <xPortStartScheduler+0x26>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	613b      	str	r3, [r7, #16]
}
 800d282:	bf00      	nop
 800d284:	e7fe      	b.n	800d284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d286:	4b3e      	ldr	r3, [pc, #248]	; (800d380 <xPortStartScheduler+0x120>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a3f      	ldr	r2, [pc, #252]	; (800d388 <xPortStartScheduler+0x128>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d10a      	bne.n	800d2a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	60fb      	str	r3, [r7, #12]
}
 800d2a2:	bf00      	nop
 800d2a4:	e7fe      	b.n	800d2a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2a6:	4b39      	ldr	r3, [pc, #228]	; (800d38c <xPortStartScheduler+0x12c>)
 800d2a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	22ff      	movs	r2, #255	; 0xff
 800d2b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d2c0:	78fb      	ldrb	r3, [r7, #3]
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	4b31      	ldr	r3, [pc, #196]	; (800d390 <xPortStartScheduler+0x130>)
 800d2cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d2ce:	4b31      	ldr	r3, [pc, #196]	; (800d394 <xPortStartScheduler+0x134>)
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2d4:	e009      	b.n	800d2ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d2d6:	4b2f      	ldr	r3, [pc, #188]	; (800d394 <xPortStartScheduler+0x134>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	4a2d      	ldr	r2, [pc, #180]	; (800d394 <xPortStartScheduler+0x134>)
 800d2de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d2e0:	78fb      	ldrb	r3, [r7, #3]
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d2ea:	78fb      	ldrb	r3, [r7, #3]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2f2:	2b80      	cmp	r3, #128	; 0x80
 800d2f4:	d0ef      	beq.n	800d2d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d2f6:	4b27      	ldr	r3, [pc, #156]	; (800d394 <xPortStartScheduler+0x134>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f1c3 0307 	rsb	r3, r3, #7
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	d00a      	beq.n	800d318 <xPortStartScheduler+0xb8>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	60bb      	str	r3, [r7, #8]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d318:	4b1e      	ldr	r3, [pc, #120]	; (800d394 <xPortStartScheduler+0x134>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	021b      	lsls	r3, r3, #8
 800d31e:	4a1d      	ldr	r2, [pc, #116]	; (800d394 <xPortStartScheduler+0x134>)
 800d320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d322:	4b1c      	ldr	r3, [pc, #112]	; (800d394 <xPortStartScheduler+0x134>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d32a:	4a1a      	ldr	r2, [pc, #104]	; (800d394 <xPortStartScheduler+0x134>)
 800d32c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	b2da      	uxtb	r2, r3
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d336:	4b18      	ldr	r3, [pc, #96]	; (800d398 <xPortStartScheduler+0x138>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a17      	ldr	r2, [pc, #92]	; (800d398 <xPortStartScheduler+0x138>)
 800d33c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d342:	4b15      	ldr	r3, [pc, #84]	; (800d398 <xPortStartScheduler+0x138>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a14      	ldr	r2, [pc, #80]	; (800d398 <xPortStartScheduler+0x138>)
 800d348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d34c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d34e:	f000 f8dd 	bl	800d50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d352:	4b12      	ldr	r3, [pc, #72]	; (800d39c <xPortStartScheduler+0x13c>)
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d358:	f000 f8fc 	bl	800d554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d35c:	4b10      	ldr	r3, [pc, #64]	; (800d3a0 <xPortStartScheduler+0x140>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a0f      	ldr	r2, [pc, #60]	; (800d3a0 <xPortStartScheduler+0x140>)
 800d362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d368:	f7ff ff66 	bl	800d238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d36c:	f7ff fa7a 	bl	800c864 <vTaskSwitchContext>
	prvTaskExitError();
 800d370:	f7ff ff20 	bl	800d1b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	e000ed00 	.word	0xe000ed00
 800d384:	410fc271 	.word	0x410fc271
 800d388:	410fc270 	.word	0x410fc270
 800d38c:	e000e400 	.word	0xe000e400
 800d390:	20000610 	.word	0x20000610
 800d394:	20000614 	.word	0x20000614
 800d398:	e000ed20 	.word	0xe000ed20
 800d39c:	20000078 	.word	0x20000078
 800d3a0:	e000ef34 	.word	0xe000ef34

0800d3a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	607b      	str	r3, [r7, #4]
}
 800d3bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3be:	4b0f      	ldr	r3, [pc, #60]	; (800d3fc <vPortEnterCritical+0x58>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	4a0d      	ldr	r2, [pc, #52]	; (800d3fc <vPortEnterCritical+0x58>)
 800d3c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d3c8:	4b0c      	ldr	r3, [pc, #48]	; (800d3fc <vPortEnterCritical+0x58>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d10f      	bne.n	800d3f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	; (800d400 <vPortEnterCritical+0x5c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	603b      	str	r3, [r7, #0]
}
 800d3ec:	bf00      	nop
 800d3ee:	e7fe      	b.n	800d3ee <vPortEnterCritical+0x4a>
	}
}
 800d3f0:	bf00      	nop
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	20000078 	.word	0x20000078
 800d400:	e000ed04 	.word	0xe000ed04

0800d404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d40a:	4b12      	ldr	r3, [pc, #72]	; (800d454 <vPortExitCritical+0x50>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10a      	bne.n	800d428 <vPortExitCritical+0x24>
	__asm volatile
 800d412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d416:	f383 8811 	msr	BASEPRI, r3
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	607b      	str	r3, [r7, #4]
}
 800d424:	bf00      	nop
 800d426:	e7fe      	b.n	800d426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d428:	4b0a      	ldr	r3, [pc, #40]	; (800d454 <vPortExitCritical+0x50>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3b01      	subs	r3, #1
 800d42e:	4a09      	ldr	r2, [pc, #36]	; (800d454 <vPortExitCritical+0x50>)
 800d430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d432:	4b08      	ldr	r3, [pc, #32]	; (800d454 <vPortExitCritical+0x50>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d105      	bne.n	800d446 <vPortExitCritical+0x42>
 800d43a:	2300      	movs	r3, #0
 800d43c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	f383 8811 	msr	BASEPRI, r3
}
 800d444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d446:	bf00      	nop
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	20000078 	.word	0x20000078
	...

0800d460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d460:	f3ef 8009 	mrs	r0, PSP
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	4b15      	ldr	r3, [pc, #84]	; (800d4c0 <pxCurrentTCBConst>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	f01e 0f10 	tst.w	lr, #16
 800d470:	bf08      	it	eq
 800d472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47a:	6010      	str	r0, [r2, #0]
 800d47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d480:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d484:	f380 8811 	msr	BASEPRI, r0
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	f3bf 8f6f 	isb	sy
 800d490:	f7ff f9e8 	bl	800c864 <vTaskSwitchContext>
 800d494:	f04f 0000 	mov.w	r0, #0
 800d498:	f380 8811 	msr	BASEPRI, r0
 800d49c:	bc09      	pop	{r0, r3}
 800d49e:	6819      	ldr	r1, [r3, #0]
 800d4a0:	6808      	ldr	r0, [r1, #0]
 800d4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a6:	f01e 0f10 	tst.w	lr, #16
 800d4aa:	bf08      	it	eq
 800d4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4b0:	f380 8809 	msr	PSP, r0
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	f3af 8000 	nop.w

0800d4c0 <pxCurrentTCBConst>:
 800d4c0:	200004e4 	.word	0x200004e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop

0800d4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	607b      	str	r3, [r7, #4]
}
 800d4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d4e2:	f7ff f907 	bl	800c6f4 <xTaskIncrementTick>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d4ec:	4b06      	ldr	r3, [pc, #24]	; (800d508 <xPortSysTickHandler+0x40>)
 800d4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f2:	601a      	str	r2, [r3, #0]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	f383 8811 	msr	BASEPRI, r3
}
 800d4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	e000ed04 	.word	0xe000ed04

0800d50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d50c:	b480      	push	{r7}
 800d50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d510:	4b0b      	ldr	r3, [pc, #44]	; (800d540 <vPortSetupTimerInterrupt+0x34>)
 800d512:	2200      	movs	r2, #0
 800d514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d516:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <vPortSetupTimerInterrupt+0x38>)
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d51c:	4b0a      	ldr	r3, [pc, #40]	; (800d548 <vPortSetupTimerInterrupt+0x3c>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a0a      	ldr	r2, [pc, #40]	; (800d54c <vPortSetupTimerInterrupt+0x40>)
 800d522:	fba2 2303 	umull	r2, r3, r2, r3
 800d526:	099b      	lsrs	r3, r3, #6
 800d528:	4a09      	ldr	r2, [pc, #36]	; (800d550 <vPortSetupTimerInterrupt+0x44>)
 800d52a:	3b01      	subs	r3, #1
 800d52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d52e:	4b04      	ldr	r3, [pc, #16]	; (800d540 <vPortSetupTimerInterrupt+0x34>)
 800d530:	2207      	movs	r2, #7
 800d532:	601a      	str	r2, [r3, #0]
}
 800d534:	bf00      	nop
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	e000e010 	.word	0xe000e010
 800d544:	e000e018 	.word	0xe000e018
 800d548:	2000000c 	.word	0x2000000c
 800d54c:	10624dd3 	.word	0x10624dd3
 800d550:	e000e014 	.word	0xe000e014

0800d554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d564 <vPortEnableVFP+0x10>
 800d558:	6801      	ldr	r1, [r0, #0]
 800d55a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d55e:	6001      	str	r1, [r0, #0]
 800d560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d562:	bf00      	nop
 800d564:	e000ed88 	.word	0xe000ed88

0800d568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d56e:	f3ef 8305 	mrs	r3, IPSR
 800d572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b0f      	cmp	r3, #15
 800d578:	d914      	bls.n	800d5a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d57a:	4a17      	ldr	r2, [pc, #92]	; (800d5d8 <vPortValidateInterruptPriority+0x70>)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4413      	add	r3, r2
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d584:	4b15      	ldr	r3, [pc, #84]	; (800d5dc <vPortValidateInterruptPriority+0x74>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	7afa      	ldrb	r2, [r7, #11]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d20a      	bcs.n	800d5a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	607b      	str	r3, [r7, #4]
}
 800d5a0:	bf00      	nop
 800d5a2:	e7fe      	b.n	800d5a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5a4:	4b0e      	ldr	r3, [pc, #56]	; (800d5e0 <vPortValidateInterruptPriority+0x78>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d5ac:	4b0d      	ldr	r3, [pc, #52]	; (800d5e4 <vPortValidateInterruptPriority+0x7c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d90a      	bls.n	800d5ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b8:	f383 8811 	msr	BASEPRI, r3
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	603b      	str	r3, [r7, #0]
}
 800d5c6:	bf00      	nop
 800d5c8:	e7fe      	b.n	800d5c8 <vPortValidateInterruptPriority+0x60>
	}
 800d5ca:	bf00      	nop
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop
 800d5d8:	e000e3f0 	.word	0xe000e3f0
 800d5dc:	20000610 	.word	0x20000610
 800d5e0:	e000ed0c 	.word	0xe000ed0c
 800d5e4:	20000614 	.word	0x20000614

0800d5e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08a      	sub	sp, #40	; 0x28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d5f4:	f7fe ffd4 	bl	800c5a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d5f8:	4b58      	ldr	r3, [pc, #352]	; (800d75c <pvPortMalloc+0x174>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d600:	f000 f910 	bl	800d824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d604:	4b56      	ldr	r3, [pc, #344]	; (800d760 <pvPortMalloc+0x178>)
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4013      	ands	r3, r2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f040 808e 	bne.w	800d72e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d01d      	beq.n	800d654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d618:	2208      	movs	r2, #8
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4413      	add	r3, r2
 800d61e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f003 0307 	and.w	r3, r3, #7
 800d626:	2b00      	cmp	r3, #0
 800d628:	d014      	beq.n	800d654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f023 0307 	bic.w	r3, r3, #7
 800d630:	3308      	adds	r3, #8
 800d632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00a      	beq.n	800d654 <pvPortMalloc+0x6c>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	617b      	str	r3, [r7, #20]
}
 800d650:	bf00      	nop
 800d652:	e7fe      	b.n	800d652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d069      	beq.n	800d72e <pvPortMalloc+0x146>
 800d65a:	4b42      	ldr	r3, [pc, #264]	; (800d764 <pvPortMalloc+0x17c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	429a      	cmp	r2, r3
 800d662:	d864      	bhi.n	800d72e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d664:	4b40      	ldr	r3, [pc, #256]	; (800d768 <pvPortMalloc+0x180>)
 800d666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d668:	4b3f      	ldr	r3, [pc, #252]	; (800d768 <pvPortMalloc+0x180>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d66e:	e004      	b.n	800d67a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	d903      	bls.n	800d68c <pvPortMalloc+0xa4>
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1f1      	bne.n	800d670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d68c:	4b33      	ldr	r3, [pc, #204]	; (800d75c <pvPortMalloc+0x174>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d692:	429a      	cmp	r2, r3
 800d694:	d04b      	beq.n	800d72e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2208      	movs	r2, #8
 800d69c:	4413      	add	r3, r2
 800d69e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	6a3b      	ldr	r3, [r7, #32]
 800d6a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	1ad2      	subs	r2, r2, r3
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	005b      	lsls	r3, r3, #1
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d91f      	bls.n	800d6f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4413      	add	r3, r2
 800d6be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00a      	beq.n	800d6e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ce:	f383 8811 	msr	BASEPRI, r3
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	f3bf 8f4f 	dsb	sy
 800d6da:	613b      	str	r3, [r7, #16]
}
 800d6dc:	bf00      	nop
 800d6de:	e7fe      	b.n	800d6de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	685a      	ldr	r2, [r3, #4]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	1ad2      	subs	r2, r2, r3
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d6f2:	69b8      	ldr	r0, [r7, #24]
 800d6f4:	f000 f8f8 	bl	800d8e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d6f8:	4b1a      	ldr	r3, [pc, #104]	; (800d764 <pvPortMalloc+0x17c>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	4a18      	ldr	r2, [pc, #96]	; (800d764 <pvPortMalloc+0x17c>)
 800d704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d706:	4b17      	ldr	r3, [pc, #92]	; (800d764 <pvPortMalloc+0x17c>)
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	4b18      	ldr	r3, [pc, #96]	; (800d76c <pvPortMalloc+0x184>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d203      	bcs.n	800d71a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d712:	4b14      	ldr	r3, [pc, #80]	; (800d764 <pvPortMalloc+0x17c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a15      	ldr	r2, [pc, #84]	; (800d76c <pvPortMalloc+0x184>)
 800d718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	685a      	ldr	r2, [r3, #4]
 800d71e:	4b10      	ldr	r3, [pc, #64]	; (800d760 <pvPortMalloc+0x178>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	431a      	orrs	r2, r3
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	2200      	movs	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d72e:	f7fe ff45 	bl	800c5bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	f003 0307 	and.w	r3, r3, #7
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00a      	beq.n	800d752 <pvPortMalloc+0x16a>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	60fb      	str	r3, [r7, #12]
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <pvPortMalloc+0x168>
	return pvReturn;
 800d752:	69fb      	ldr	r3, [r7, #28]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3728      	adds	r7, #40	; 0x28
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	20002178 	.word	0x20002178
 800d760:	20002184 	.word	0x20002184
 800d764:	2000217c 	.word	0x2000217c
 800d768:	20002170 	.word	0x20002170
 800d76c:	20002180 	.word	0x20002180

0800d770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d048      	beq.n	800d814 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d782:	2308      	movs	r3, #8
 800d784:	425b      	negs	r3, r3
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	4413      	add	r3, r2
 800d78a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	4b21      	ldr	r3, [pc, #132]	; (800d81c <vPortFree+0xac>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4013      	ands	r3, r2
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10a      	bne.n	800d7b4 <vPortFree+0x44>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	60fb      	str	r3, [r7, #12]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00a      	beq.n	800d7d2 <vPortFree+0x62>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	60bb      	str	r3, [r7, #8]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	4b11      	ldr	r3, [pc, #68]	; (800d81c <vPortFree+0xac>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4013      	ands	r3, r2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d019      	beq.n	800d814 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d115      	bne.n	800d814 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	4b0b      	ldr	r3, [pc, #44]	; (800d81c <vPortFree+0xac>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	43db      	mvns	r3, r3
 800d7f2:	401a      	ands	r2, r3
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d7f8:	f7fe fed2 	bl	800c5a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	4b07      	ldr	r3, [pc, #28]	; (800d820 <vPortFree+0xb0>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4413      	add	r3, r2
 800d806:	4a06      	ldr	r2, [pc, #24]	; (800d820 <vPortFree+0xb0>)
 800d808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d80a:	6938      	ldr	r0, [r7, #16]
 800d80c:	f000 f86c 	bl	800d8e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d810:	f7fe fed4 	bl	800c5bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d814:	bf00      	nop
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20002184 	.word	0x20002184
 800d820:	2000217c 	.word	0x2000217c

0800d824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d82a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800d82e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d830:	4b27      	ldr	r3, [pc, #156]	; (800d8d0 <prvHeapInit+0xac>)
 800d832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f003 0307 	and.w	r3, r3, #7
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00c      	beq.n	800d858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3307      	adds	r3, #7
 800d842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f023 0307 	bic.w	r3, r3, #7
 800d84a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d84c:	68ba      	ldr	r2, [r7, #8]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	1ad3      	subs	r3, r2, r3
 800d852:	4a1f      	ldr	r2, [pc, #124]	; (800d8d0 <prvHeapInit+0xac>)
 800d854:	4413      	add	r3, r2
 800d856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d85c:	4a1d      	ldr	r2, [pc, #116]	; (800d8d4 <prvHeapInit+0xb0>)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d862:	4b1c      	ldr	r3, [pc, #112]	; (800d8d4 <prvHeapInit+0xb0>)
 800d864:	2200      	movs	r2, #0
 800d866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	4413      	add	r3, r2
 800d86e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d870:	2208      	movs	r2, #8
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	1a9b      	subs	r3, r3, r2
 800d876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f023 0307 	bic.w	r3, r3, #7
 800d87e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4a15      	ldr	r2, [pc, #84]	; (800d8d8 <prvHeapInit+0xb4>)
 800d884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d886:	4b14      	ldr	r3, [pc, #80]	; (800d8d8 <prvHeapInit+0xb4>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2200      	movs	r2, #0
 800d88c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d88e:	4b12      	ldr	r3, [pc, #72]	; (800d8d8 <prvHeapInit+0xb4>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2200      	movs	r2, #0
 800d894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	1ad2      	subs	r2, r2, r3
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d8a4:	4b0c      	ldr	r3, [pc, #48]	; (800d8d8 <prvHeapInit+0xb4>)
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	4a0a      	ldr	r2, [pc, #40]	; (800d8dc <prvHeapInit+0xb8>)
 800d8b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	4a09      	ldr	r2, [pc, #36]	; (800d8e0 <prvHeapInit+0xbc>)
 800d8ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d8bc:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <prvHeapInit+0xc0>)
 800d8be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d8c2:	601a      	str	r2, [r3, #0]
}
 800d8c4:	bf00      	nop
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	20000618 	.word	0x20000618
 800d8d4:	20002170 	.word	0x20002170
 800d8d8:	20002178 	.word	0x20002178
 800d8dc:	20002180 	.word	0x20002180
 800d8e0:	2000217c 	.word	0x2000217c
 800d8e4:	20002184 	.word	0x20002184

0800d8e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d8f0:	4b28      	ldr	r3, [pc, #160]	; (800d994 <prvInsertBlockIntoFreeList+0xac>)
 800d8f2:	60fb      	str	r3, [r7, #12]
 800d8f4:	e002      	b.n	800d8fc <prvInsertBlockIntoFreeList+0x14>
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	60fb      	str	r3, [r7, #12]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	429a      	cmp	r2, r3
 800d904:	d8f7      	bhi.n	800d8f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	4413      	add	r3, r2
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	429a      	cmp	r2, r3
 800d916:	d108      	bne.n	800d92a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	441a      	add	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	441a      	add	r2, r3
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d118      	bne.n	800d970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	4b15      	ldr	r3, [pc, #84]	; (800d998 <prvInsertBlockIntoFreeList+0xb0>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	429a      	cmp	r2, r3
 800d948:	d00d      	beq.n	800d966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	685a      	ldr	r2, [r3, #4]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	441a      	add	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	e008      	b.n	800d978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d966:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <prvInsertBlockIntoFreeList+0xb0>)
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	e003      	b.n	800d978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d002      	beq.n	800d986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d986:	bf00      	nop
 800d988:	3714      	adds	r7, #20
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	20002170 	.word	0x20002170
 800d998:	20002178 	.word	0x20002178

0800d99c <__errno>:
 800d99c:	4b01      	ldr	r3, [pc, #4]	; (800d9a4 <__errno+0x8>)
 800d99e:	6818      	ldr	r0, [r3, #0]
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	2000007c 	.word	0x2000007c

0800d9a8 <__libc_init_array>:
 800d9a8:	b570      	push	{r4, r5, r6, lr}
 800d9aa:	4d0d      	ldr	r5, [pc, #52]	; (800d9e0 <__libc_init_array+0x38>)
 800d9ac:	4c0d      	ldr	r4, [pc, #52]	; (800d9e4 <__libc_init_array+0x3c>)
 800d9ae:	1b64      	subs	r4, r4, r5
 800d9b0:	10a4      	asrs	r4, r4, #2
 800d9b2:	2600      	movs	r6, #0
 800d9b4:	42a6      	cmp	r6, r4
 800d9b6:	d109      	bne.n	800d9cc <__libc_init_array+0x24>
 800d9b8:	4d0b      	ldr	r5, [pc, #44]	; (800d9e8 <__libc_init_array+0x40>)
 800d9ba:	4c0c      	ldr	r4, [pc, #48]	; (800d9ec <__libc_init_array+0x44>)
 800d9bc:	f002 ffcc 	bl	8010958 <_init>
 800d9c0:	1b64      	subs	r4, r4, r5
 800d9c2:	10a4      	asrs	r4, r4, #2
 800d9c4:	2600      	movs	r6, #0
 800d9c6:	42a6      	cmp	r6, r4
 800d9c8:	d105      	bne.n	800d9d6 <__libc_init_array+0x2e>
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9d0:	4798      	blx	r3
 800d9d2:	3601      	adds	r6, #1
 800d9d4:	e7ee      	b.n	800d9b4 <__libc_init_array+0xc>
 800d9d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9da:	4798      	blx	r3
 800d9dc:	3601      	adds	r6, #1
 800d9de:	e7f2      	b.n	800d9c6 <__libc_init_array+0x1e>
 800d9e0:	08011648 	.word	0x08011648
 800d9e4:	08011648 	.word	0x08011648
 800d9e8:	08011648 	.word	0x08011648
 800d9ec:	0801164c 	.word	0x0801164c

0800d9f0 <memcpy>:
 800d9f0:	440a      	add	r2, r1
 800d9f2:	4291      	cmp	r1, r2
 800d9f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9f8:	d100      	bne.n	800d9fc <memcpy+0xc>
 800d9fa:	4770      	bx	lr
 800d9fc:	b510      	push	{r4, lr}
 800d9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da06:	4291      	cmp	r1, r2
 800da08:	d1f9      	bne.n	800d9fe <memcpy+0xe>
 800da0a:	bd10      	pop	{r4, pc}

0800da0c <memset>:
 800da0c:	4402      	add	r2, r0
 800da0e:	4603      	mov	r3, r0
 800da10:	4293      	cmp	r3, r2
 800da12:	d100      	bne.n	800da16 <memset+0xa>
 800da14:	4770      	bx	lr
 800da16:	f803 1b01 	strb.w	r1, [r3], #1
 800da1a:	e7f9      	b.n	800da10 <memset+0x4>

0800da1c <__cvt>:
 800da1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da20:	ec55 4b10 	vmov	r4, r5, d0
 800da24:	2d00      	cmp	r5, #0
 800da26:	460e      	mov	r6, r1
 800da28:	4619      	mov	r1, r3
 800da2a:	462b      	mov	r3, r5
 800da2c:	bfbb      	ittet	lt
 800da2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da32:	461d      	movlt	r5, r3
 800da34:	2300      	movge	r3, #0
 800da36:	232d      	movlt	r3, #45	; 0x2d
 800da38:	700b      	strb	r3, [r1, #0]
 800da3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da40:	4691      	mov	r9, r2
 800da42:	f023 0820 	bic.w	r8, r3, #32
 800da46:	bfbc      	itt	lt
 800da48:	4622      	movlt	r2, r4
 800da4a:	4614      	movlt	r4, r2
 800da4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da50:	d005      	beq.n	800da5e <__cvt+0x42>
 800da52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da56:	d100      	bne.n	800da5a <__cvt+0x3e>
 800da58:	3601      	adds	r6, #1
 800da5a:	2102      	movs	r1, #2
 800da5c:	e000      	b.n	800da60 <__cvt+0x44>
 800da5e:	2103      	movs	r1, #3
 800da60:	ab03      	add	r3, sp, #12
 800da62:	9301      	str	r3, [sp, #4]
 800da64:	ab02      	add	r3, sp, #8
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	ec45 4b10 	vmov	d0, r4, r5
 800da6c:	4653      	mov	r3, sl
 800da6e:	4632      	mov	r2, r6
 800da70:	f000 fede 	bl	800e830 <_dtoa_r>
 800da74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da78:	4607      	mov	r7, r0
 800da7a:	d102      	bne.n	800da82 <__cvt+0x66>
 800da7c:	f019 0f01 	tst.w	r9, #1
 800da80:	d022      	beq.n	800dac8 <__cvt+0xac>
 800da82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da86:	eb07 0906 	add.w	r9, r7, r6
 800da8a:	d110      	bne.n	800daae <__cvt+0x92>
 800da8c:	783b      	ldrb	r3, [r7, #0]
 800da8e:	2b30      	cmp	r3, #48	; 0x30
 800da90:	d10a      	bne.n	800daa8 <__cvt+0x8c>
 800da92:	2200      	movs	r2, #0
 800da94:	2300      	movs	r3, #0
 800da96:	4620      	mov	r0, r4
 800da98:	4629      	mov	r1, r5
 800da9a:	f7f3 f815 	bl	8000ac8 <__aeabi_dcmpeq>
 800da9e:	b918      	cbnz	r0, 800daa8 <__cvt+0x8c>
 800daa0:	f1c6 0601 	rsb	r6, r6, #1
 800daa4:	f8ca 6000 	str.w	r6, [sl]
 800daa8:	f8da 3000 	ldr.w	r3, [sl]
 800daac:	4499      	add	r9, r3
 800daae:	2200      	movs	r2, #0
 800dab0:	2300      	movs	r3, #0
 800dab2:	4620      	mov	r0, r4
 800dab4:	4629      	mov	r1, r5
 800dab6:	f7f3 f807 	bl	8000ac8 <__aeabi_dcmpeq>
 800daba:	b108      	cbz	r0, 800dac0 <__cvt+0xa4>
 800dabc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dac0:	2230      	movs	r2, #48	; 0x30
 800dac2:	9b03      	ldr	r3, [sp, #12]
 800dac4:	454b      	cmp	r3, r9
 800dac6:	d307      	bcc.n	800dad8 <__cvt+0xbc>
 800dac8:	9b03      	ldr	r3, [sp, #12]
 800daca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dacc:	1bdb      	subs	r3, r3, r7
 800dace:	4638      	mov	r0, r7
 800dad0:	6013      	str	r3, [r2, #0]
 800dad2:	b004      	add	sp, #16
 800dad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad8:	1c59      	adds	r1, r3, #1
 800dada:	9103      	str	r1, [sp, #12]
 800dadc:	701a      	strb	r2, [r3, #0]
 800dade:	e7f0      	b.n	800dac2 <__cvt+0xa6>

0800dae0 <__exponent>:
 800dae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dae2:	4603      	mov	r3, r0
 800dae4:	2900      	cmp	r1, #0
 800dae6:	bfb8      	it	lt
 800dae8:	4249      	neglt	r1, r1
 800daea:	f803 2b02 	strb.w	r2, [r3], #2
 800daee:	bfb4      	ite	lt
 800daf0:	222d      	movlt	r2, #45	; 0x2d
 800daf2:	222b      	movge	r2, #43	; 0x2b
 800daf4:	2909      	cmp	r1, #9
 800daf6:	7042      	strb	r2, [r0, #1]
 800daf8:	dd2a      	ble.n	800db50 <__exponent+0x70>
 800dafa:	f10d 0407 	add.w	r4, sp, #7
 800dafe:	46a4      	mov	ip, r4
 800db00:	270a      	movs	r7, #10
 800db02:	46a6      	mov	lr, r4
 800db04:	460a      	mov	r2, r1
 800db06:	fb91 f6f7 	sdiv	r6, r1, r7
 800db0a:	fb07 1516 	mls	r5, r7, r6, r1
 800db0e:	3530      	adds	r5, #48	; 0x30
 800db10:	2a63      	cmp	r2, #99	; 0x63
 800db12:	f104 34ff 	add.w	r4, r4, #4294967295
 800db16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800db1a:	4631      	mov	r1, r6
 800db1c:	dcf1      	bgt.n	800db02 <__exponent+0x22>
 800db1e:	3130      	adds	r1, #48	; 0x30
 800db20:	f1ae 0502 	sub.w	r5, lr, #2
 800db24:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db28:	1c44      	adds	r4, r0, #1
 800db2a:	4629      	mov	r1, r5
 800db2c:	4561      	cmp	r1, ip
 800db2e:	d30a      	bcc.n	800db46 <__exponent+0x66>
 800db30:	f10d 0209 	add.w	r2, sp, #9
 800db34:	eba2 020e 	sub.w	r2, r2, lr
 800db38:	4565      	cmp	r5, ip
 800db3a:	bf88      	it	hi
 800db3c:	2200      	movhi	r2, #0
 800db3e:	4413      	add	r3, r2
 800db40:	1a18      	subs	r0, r3, r0
 800db42:	b003      	add	sp, #12
 800db44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800db4e:	e7ed      	b.n	800db2c <__exponent+0x4c>
 800db50:	2330      	movs	r3, #48	; 0x30
 800db52:	3130      	adds	r1, #48	; 0x30
 800db54:	7083      	strb	r3, [r0, #2]
 800db56:	70c1      	strb	r1, [r0, #3]
 800db58:	1d03      	adds	r3, r0, #4
 800db5a:	e7f1      	b.n	800db40 <__exponent+0x60>

0800db5c <_printf_float>:
 800db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	ed2d 8b02 	vpush	{d8}
 800db64:	b08d      	sub	sp, #52	; 0x34
 800db66:	460c      	mov	r4, r1
 800db68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db6c:	4616      	mov	r6, r2
 800db6e:	461f      	mov	r7, r3
 800db70:	4605      	mov	r5, r0
 800db72:	f001 fe13 	bl	800f79c <_localeconv_r>
 800db76:	f8d0 a000 	ldr.w	sl, [r0]
 800db7a:	4650      	mov	r0, sl
 800db7c:	f7f2 fb28 	bl	80001d0 <strlen>
 800db80:	2300      	movs	r3, #0
 800db82:	930a      	str	r3, [sp, #40]	; 0x28
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	9305      	str	r3, [sp, #20]
 800db88:	f8d8 3000 	ldr.w	r3, [r8]
 800db8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800db90:	3307      	adds	r3, #7
 800db92:	f023 0307 	bic.w	r3, r3, #7
 800db96:	f103 0208 	add.w	r2, r3, #8
 800db9a:	f8c8 2000 	str.w	r2, [r8]
 800db9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dba6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dbaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dbae:	9307      	str	r3, [sp, #28]
 800dbb0:	f8cd 8018 	str.w	r8, [sp, #24]
 800dbb4:	ee08 0a10 	vmov	s16, r0
 800dbb8:	4b9f      	ldr	r3, [pc, #636]	; (800de38 <_printf_float+0x2dc>)
 800dbba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc2:	f7f2 ffb3 	bl	8000b2c <__aeabi_dcmpun>
 800dbc6:	bb88      	cbnz	r0, 800dc2c <_printf_float+0xd0>
 800dbc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbcc:	4b9a      	ldr	r3, [pc, #616]	; (800de38 <_printf_float+0x2dc>)
 800dbce:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd2:	f7f2 ff8d 	bl	8000af0 <__aeabi_dcmple>
 800dbd6:	bb48      	cbnz	r0, 800dc2c <_printf_float+0xd0>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4640      	mov	r0, r8
 800dbde:	4649      	mov	r1, r9
 800dbe0:	f7f2 ff7c 	bl	8000adc <__aeabi_dcmplt>
 800dbe4:	b110      	cbz	r0, 800dbec <_printf_float+0x90>
 800dbe6:	232d      	movs	r3, #45	; 0x2d
 800dbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbec:	4b93      	ldr	r3, [pc, #588]	; (800de3c <_printf_float+0x2e0>)
 800dbee:	4894      	ldr	r0, [pc, #592]	; (800de40 <_printf_float+0x2e4>)
 800dbf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dbf4:	bf94      	ite	ls
 800dbf6:	4698      	movls	r8, r3
 800dbf8:	4680      	movhi	r8, r0
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	6123      	str	r3, [r4, #16]
 800dbfe:	9b05      	ldr	r3, [sp, #20]
 800dc00:	f023 0204 	bic.w	r2, r3, #4
 800dc04:	6022      	str	r2, [r4, #0]
 800dc06:	f04f 0900 	mov.w	r9, #0
 800dc0a:	9700      	str	r7, [sp, #0]
 800dc0c:	4633      	mov	r3, r6
 800dc0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800dc10:	4621      	mov	r1, r4
 800dc12:	4628      	mov	r0, r5
 800dc14:	f000 f9d8 	bl	800dfc8 <_printf_common>
 800dc18:	3001      	adds	r0, #1
 800dc1a:	f040 8090 	bne.w	800dd3e <_printf_float+0x1e2>
 800dc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc22:	b00d      	add	sp, #52	; 0x34
 800dc24:	ecbd 8b02 	vpop	{d8}
 800dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	4642      	mov	r2, r8
 800dc2e:	464b      	mov	r3, r9
 800dc30:	4640      	mov	r0, r8
 800dc32:	4649      	mov	r1, r9
 800dc34:	f7f2 ff7a 	bl	8000b2c <__aeabi_dcmpun>
 800dc38:	b140      	cbz	r0, 800dc4c <_printf_float+0xf0>
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bfbc      	itt	lt
 800dc40:	232d      	movlt	r3, #45	; 0x2d
 800dc42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc46:	487f      	ldr	r0, [pc, #508]	; (800de44 <_printf_float+0x2e8>)
 800dc48:	4b7f      	ldr	r3, [pc, #508]	; (800de48 <_printf_float+0x2ec>)
 800dc4a:	e7d1      	b.n	800dbf0 <_printf_float+0x94>
 800dc4c:	6863      	ldr	r3, [r4, #4]
 800dc4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc52:	9206      	str	r2, [sp, #24]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	d13f      	bne.n	800dcd8 <_printf_float+0x17c>
 800dc58:	2306      	movs	r3, #6
 800dc5a:	6063      	str	r3, [r4, #4]
 800dc5c:	9b05      	ldr	r3, [sp, #20]
 800dc5e:	6861      	ldr	r1, [r4, #4]
 800dc60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc64:	2300      	movs	r3, #0
 800dc66:	9303      	str	r3, [sp, #12]
 800dc68:	ab0a      	add	r3, sp, #40	; 0x28
 800dc6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc6e:	ab09      	add	r3, sp, #36	; 0x24
 800dc70:	ec49 8b10 	vmov	d0, r8, r9
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	6022      	str	r2, [r4, #0]
 800dc78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f7ff fecd 	bl	800da1c <__cvt>
 800dc82:	9b06      	ldr	r3, [sp, #24]
 800dc84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc86:	2b47      	cmp	r3, #71	; 0x47
 800dc88:	4680      	mov	r8, r0
 800dc8a:	d108      	bne.n	800dc9e <_printf_float+0x142>
 800dc8c:	1cc8      	adds	r0, r1, #3
 800dc8e:	db02      	blt.n	800dc96 <_printf_float+0x13a>
 800dc90:	6863      	ldr	r3, [r4, #4]
 800dc92:	4299      	cmp	r1, r3
 800dc94:	dd41      	ble.n	800dd1a <_printf_float+0x1be>
 800dc96:	f1ab 0b02 	sub.w	fp, fp, #2
 800dc9a:	fa5f fb8b 	uxtb.w	fp, fp
 800dc9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dca2:	d820      	bhi.n	800dce6 <_printf_float+0x18a>
 800dca4:	3901      	subs	r1, #1
 800dca6:	465a      	mov	r2, fp
 800dca8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dcac:	9109      	str	r1, [sp, #36]	; 0x24
 800dcae:	f7ff ff17 	bl	800dae0 <__exponent>
 800dcb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcb4:	1813      	adds	r3, r2, r0
 800dcb6:	2a01      	cmp	r2, #1
 800dcb8:	4681      	mov	r9, r0
 800dcba:	6123      	str	r3, [r4, #16]
 800dcbc:	dc02      	bgt.n	800dcc4 <_printf_float+0x168>
 800dcbe:	6822      	ldr	r2, [r4, #0]
 800dcc0:	07d2      	lsls	r2, r2, #31
 800dcc2:	d501      	bpl.n	800dcc8 <_printf_float+0x16c>
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	6123      	str	r3, [r4, #16]
 800dcc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d09c      	beq.n	800dc0a <_printf_float+0xae>
 800dcd0:	232d      	movs	r3, #45	; 0x2d
 800dcd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd6:	e798      	b.n	800dc0a <_printf_float+0xae>
 800dcd8:	9a06      	ldr	r2, [sp, #24]
 800dcda:	2a47      	cmp	r2, #71	; 0x47
 800dcdc:	d1be      	bne.n	800dc5c <_printf_float+0x100>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1bc      	bne.n	800dc5c <_printf_float+0x100>
 800dce2:	2301      	movs	r3, #1
 800dce4:	e7b9      	b.n	800dc5a <_printf_float+0xfe>
 800dce6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dcea:	d118      	bne.n	800dd1e <_printf_float+0x1c2>
 800dcec:	2900      	cmp	r1, #0
 800dcee:	6863      	ldr	r3, [r4, #4]
 800dcf0:	dd0b      	ble.n	800dd0a <_printf_float+0x1ae>
 800dcf2:	6121      	str	r1, [r4, #16]
 800dcf4:	b913      	cbnz	r3, 800dcfc <_printf_float+0x1a0>
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	07d0      	lsls	r0, r2, #31
 800dcfa:	d502      	bpl.n	800dd02 <_printf_float+0x1a6>
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	440b      	add	r3, r1
 800dd00:	6123      	str	r3, [r4, #16]
 800dd02:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd04:	f04f 0900 	mov.w	r9, #0
 800dd08:	e7de      	b.n	800dcc8 <_printf_float+0x16c>
 800dd0a:	b913      	cbnz	r3, 800dd12 <_printf_float+0x1b6>
 800dd0c:	6822      	ldr	r2, [r4, #0]
 800dd0e:	07d2      	lsls	r2, r2, #31
 800dd10:	d501      	bpl.n	800dd16 <_printf_float+0x1ba>
 800dd12:	3302      	adds	r3, #2
 800dd14:	e7f4      	b.n	800dd00 <_printf_float+0x1a4>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e7f2      	b.n	800dd00 <_printf_float+0x1a4>
 800dd1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd20:	4299      	cmp	r1, r3
 800dd22:	db05      	blt.n	800dd30 <_printf_float+0x1d4>
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	6121      	str	r1, [r4, #16]
 800dd28:	07d8      	lsls	r0, r3, #31
 800dd2a:	d5ea      	bpl.n	800dd02 <_printf_float+0x1a6>
 800dd2c:	1c4b      	adds	r3, r1, #1
 800dd2e:	e7e7      	b.n	800dd00 <_printf_float+0x1a4>
 800dd30:	2900      	cmp	r1, #0
 800dd32:	bfd4      	ite	le
 800dd34:	f1c1 0202 	rsble	r2, r1, #2
 800dd38:	2201      	movgt	r2, #1
 800dd3a:	4413      	add	r3, r2
 800dd3c:	e7e0      	b.n	800dd00 <_printf_float+0x1a4>
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	055a      	lsls	r2, r3, #21
 800dd42:	d407      	bmi.n	800dd54 <_printf_float+0x1f8>
 800dd44:	6923      	ldr	r3, [r4, #16]
 800dd46:	4642      	mov	r2, r8
 800dd48:	4631      	mov	r1, r6
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	47b8      	blx	r7
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d12c      	bne.n	800ddac <_printf_float+0x250>
 800dd52:	e764      	b.n	800dc1e <_printf_float+0xc2>
 800dd54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd58:	f240 80e0 	bls.w	800df1c <_printf_float+0x3c0>
 800dd5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd60:	2200      	movs	r2, #0
 800dd62:	2300      	movs	r3, #0
 800dd64:	f7f2 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d034      	beq.n	800ddd6 <_printf_float+0x27a>
 800dd6c:	4a37      	ldr	r2, [pc, #220]	; (800de4c <_printf_float+0x2f0>)
 800dd6e:	2301      	movs	r3, #1
 800dd70:	4631      	mov	r1, r6
 800dd72:	4628      	mov	r0, r5
 800dd74:	47b8      	blx	r7
 800dd76:	3001      	adds	r0, #1
 800dd78:	f43f af51 	beq.w	800dc1e <_printf_float+0xc2>
 800dd7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd80:	429a      	cmp	r2, r3
 800dd82:	db02      	blt.n	800dd8a <_printf_float+0x22e>
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	07d8      	lsls	r0, r3, #31
 800dd88:	d510      	bpl.n	800ddac <_printf_float+0x250>
 800dd8a:	ee18 3a10 	vmov	r3, s16
 800dd8e:	4652      	mov	r2, sl
 800dd90:	4631      	mov	r1, r6
 800dd92:	4628      	mov	r0, r5
 800dd94:	47b8      	blx	r7
 800dd96:	3001      	adds	r0, #1
 800dd98:	f43f af41 	beq.w	800dc1e <_printf_float+0xc2>
 800dd9c:	f04f 0800 	mov.w	r8, #0
 800dda0:	f104 091a 	add.w	r9, r4, #26
 800dda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda6:	3b01      	subs	r3, #1
 800dda8:	4543      	cmp	r3, r8
 800ddaa:	dc09      	bgt.n	800ddc0 <_printf_float+0x264>
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	079b      	lsls	r3, r3, #30
 800ddb0:	f100 8105 	bmi.w	800dfbe <_printf_float+0x462>
 800ddb4:	68e0      	ldr	r0, [r4, #12]
 800ddb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddb8:	4298      	cmp	r0, r3
 800ddba:	bfb8      	it	lt
 800ddbc:	4618      	movlt	r0, r3
 800ddbe:	e730      	b.n	800dc22 <_printf_float+0xc6>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	464a      	mov	r2, r9
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f43f af27 	beq.w	800dc1e <_printf_float+0xc2>
 800ddd0:	f108 0801 	add.w	r8, r8, #1
 800ddd4:	e7e6      	b.n	800dda4 <_printf_float+0x248>
 800ddd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	dc39      	bgt.n	800de50 <_printf_float+0x2f4>
 800dddc:	4a1b      	ldr	r2, [pc, #108]	; (800de4c <_printf_float+0x2f0>)
 800ddde:	2301      	movs	r3, #1
 800dde0:	4631      	mov	r1, r6
 800dde2:	4628      	mov	r0, r5
 800dde4:	47b8      	blx	r7
 800dde6:	3001      	adds	r0, #1
 800dde8:	f43f af19 	beq.w	800dc1e <_printf_float+0xc2>
 800ddec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	d102      	bne.n	800ddfa <_printf_float+0x29e>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	07d9      	lsls	r1, r3, #31
 800ddf8:	d5d8      	bpl.n	800ddac <_printf_float+0x250>
 800ddfa:	ee18 3a10 	vmov	r3, s16
 800ddfe:	4652      	mov	r2, sl
 800de00:	4631      	mov	r1, r6
 800de02:	4628      	mov	r0, r5
 800de04:	47b8      	blx	r7
 800de06:	3001      	adds	r0, #1
 800de08:	f43f af09 	beq.w	800dc1e <_printf_float+0xc2>
 800de0c:	f04f 0900 	mov.w	r9, #0
 800de10:	f104 0a1a 	add.w	sl, r4, #26
 800de14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de16:	425b      	negs	r3, r3
 800de18:	454b      	cmp	r3, r9
 800de1a:	dc01      	bgt.n	800de20 <_printf_float+0x2c4>
 800de1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de1e:	e792      	b.n	800dd46 <_printf_float+0x1ea>
 800de20:	2301      	movs	r3, #1
 800de22:	4652      	mov	r2, sl
 800de24:	4631      	mov	r1, r6
 800de26:	4628      	mov	r0, r5
 800de28:	47b8      	blx	r7
 800de2a:	3001      	adds	r0, #1
 800de2c:	f43f aef7 	beq.w	800dc1e <_printf_float+0xc2>
 800de30:	f109 0901 	add.w	r9, r9, #1
 800de34:	e7ee      	b.n	800de14 <_printf_float+0x2b8>
 800de36:	bf00      	nop
 800de38:	7fefffff 	.word	0x7fefffff
 800de3c:	08011200 	.word	0x08011200
 800de40:	08011204 	.word	0x08011204
 800de44:	0801120c 	.word	0x0801120c
 800de48:	08011208 	.word	0x08011208
 800de4c:	08011210 	.word	0x08011210
 800de50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de54:	429a      	cmp	r2, r3
 800de56:	bfa8      	it	ge
 800de58:	461a      	movge	r2, r3
 800de5a:	2a00      	cmp	r2, #0
 800de5c:	4691      	mov	r9, r2
 800de5e:	dc37      	bgt.n	800ded0 <_printf_float+0x374>
 800de60:	f04f 0b00 	mov.w	fp, #0
 800de64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de68:	f104 021a 	add.w	r2, r4, #26
 800de6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de6e:	9305      	str	r3, [sp, #20]
 800de70:	eba3 0309 	sub.w	r3, r3, r9
 800de74:	455b      	cmp	r3, fp
 800de76:	dc33      	bgt.n	800dee0 <_printf_float+0x384>
 800de78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de7c:	429a      	cmp	r2, r3
 800de7e:	db3b      	blt.n	800def8 <_printf_float+0x39c>
 800de80:	6823      	ldr	r3, [r4, #0]
 800de82:	07da      	lsls	r2, r3, #31
 800de84:	d438      	bmi.n	800def8 <_printf_float+0x39c>
 800de86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de88:	9b05      	ldr	r3, [sp, #20]
 800de8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	eba2 0901 	sub.w	r9, r2, r1
 800de92:	4599      	cmp	r9, r3
 800de94:	bfa8      	it	ge
 800de96:	4699      	movge	r9, r3
 800de98:	f1b9 0f00 	cmp.w	r9, #0
 800de9c:	dc35      	bgt.n	800df0a <_printf_float+0x3ae>
 800de9e:	f04f 0800 	mov.w	r8, #0
 800dea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dea6:	f104 0a1a 	add.w	sl, r4, #26
 800deaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800deae:	1a9b      	subs	r3, r3, r2
 800deb0:	eba3 0309 	sub.w	r3, r3, r9
 800deb4:	4543      	cmp	r3, r8
 800deb6:	f77f af79 	ble.w	800ddac <_printf_float+0x250>
 800deba:	2301      	movs	r3, #1
 800debc:	4652      	mov	r2, sl
 800debe:	4631      	mov	r1, r6
 800dec0:	4628      	mov	r0, r5
 800dec2:	47b8      	blx	r7
 800dec4:	3001      	adds	r0, #1
 800dec6:	f43f aeaa 	beq.w	800dc1e <_printf_float+0xc2>
 800deca:	f108 0801 	add.w	r8, r8, #1
 800dece:	e7ec      	b.n	800deaa <_printf_float+0x34e>
 800ded0:	4613      	mov	r3, r2
 800ded2:	4631      	mov	r1, r6
 800ded4:	4642      	mov	r2, r8
 800ded6:	4628      	mov	r0, r5
 800ded8:	47b8      	blx	r7
 800deda:	3001      	adds	r0, #1
 800dedc:	d1c0      	bne.n	800de60 <_printf_float+0x304>
 800dede:	e69e      	b.n	800dc1e <_printf_float+0xc2>
 800dee0:	2301      	movs	r3, #1
 800dee2:	4631      	mov	r1, r6
 800dee4:	4628      	mov	r0, r5
 800dee6:	9205      	str	r2, [sp, #20]
 800dee8:	47b8      	blx	r7
 800deea:	3001      	adds	r0, #1
 800deec:	f43f ae97 	beq.w	800dc1e <_printf_float+0xc2>
 800def0:	9a05      	ldr	r2, [sp, #20]
 800def2:	f10b 0b01 	add.w	fp, fp, #1
 800def6:	e7b9      	b.n	800de6c <_printf_float+0x310>
 800def8:	ee18 3a10 	vmov	r3, s16
 800defc:	4652      	mov	r2, sl
 800defe:	4631      	mov	r1, r6
 800df00:	4628      	mov	r0, r5
 800df02:	47b8      	blx	r7
 800df04:	3001      	adds	r0, #1
 800df06:	d1be      	bne.n	800de86 <_printf_float+0x32a>
 800df08:	e689      	b.n	800dc1e <_printf_float+0xc2>
 800df0a:	9a05      	ldr	r2, [sp, #20]
 800df0c:	464b      	mov	r3, r9
 800df0e:	4442      	add	r2, r8
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	47b8      	blx	r7
 800df16:	3001      	adds	r0, #1
 800df18:	d1c1      	bne.n	800de9e <_printf_float+0x342>
 800df1a:	e680      	b.n	800dc1e <_printf_float+0xc2>
 800df1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df1e:	2a01      	cmp	r2, #1
 800df20:	dc01      	bgt.n	800df26 <_printf_float+0x3ca>
 800df22:	07db      	lsls	r3, r3, #31
 800df24:	d538      	bpl.n	800df98 <_printf_float+0x43c>
 800df26:	2301      	movs	r3, #1
 800df28:	4642      	mov	r2, r8
 800df2a:	4631      	mov	r1, r6
 800df2c:	4628      	mov	r0, r5
 800df2e:	47b8      	blx	r7
 800df30:	3001      	adds	r0, #1
 800df32:	f43f ae74 	beq.w	800dc1e <_printf_float+0xc2>
 800df36:	ee18 3a10 	vmov	r3, s16
 800df3a:	4652      	mov	r2, sl
 800df3c:	4631      	mov	r1, r6
 800df3e:	4628      	mov	r0, r5
 800df40:	47b8      	blx	r7
 800df42:	3001      	adds	r0, #1
 800df44:	f43f ae6b 	beq.w	800dc1e <_printf_float+0xc2>
 800df48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df4c:	2200      	movs	r2, #0
 800df4e:	2300      	movs	r3, #0
 800df50:	f7f2 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 800df54:	b9d8      	cbnz	r0, 800df8e <_printf_float+0x432>
 800df56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df58:	f108 0201 	add.w	r2, r8, #1
 800df5c:	3b01      	subs	r3, #1
 800df5e:	4631      	mov	r1, r6
 800df60:	4628      	mov	r0, r5
 800df62:	47b8      	blx	r7
 800df64:	3001      	adds	r0, #1
 800df66:	d10e      	bne.n	800df86 <_printf_float+0x42a>
 800df68:	e659      	b.n	800dc1e <_printf_float+0xc2>
 800df6a:	2301      	movs	r3, #1
 800df6c:	4652      	mov	r2, sl
 800df6e:	4631      	mov	r1, r6
 800df70:	4628      	mov	r0, r5
 800df72:	47b8      	blx	r7
 800df74:	3001      	adds	r0, #1
 800df76:	f43f ae52 	beq.w	800dc1e <_printf_float+0xc2>
 800df7a:	f108 0801 	add.w	r8, r8, #1
 800df7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df80:	3b01      	subs	r3, #1
 800df82:	4543      	cmp	r3, r8
 800df84:	dcf1      	bgt.n	800df6a <_printf_float+0x40e>
 800df86:	464b      	mov	r3, r9
 800df88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df8c:	e6dc      	b.n	800dd48 <_printf_float+0x1ec>
 800df8e:	f04f 0800 	mov.w	r8, #0
 800df92:	f104 0a1a 	add.w	sl, r4, #26
 800df96:	e7f2      	b.n	800df7e <_printf_float+0x422>
 800df98:	2301      	movs	r3, #1
 800df9a:	4642      	mov	r2, r8
 800df9c:	e7df      	b.n	800df5e <_printf_float+0x402>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	464a      	mov	r2, r9
 800dfa2:	4631      	mov	r1, r6
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	47b8      	blx	r7
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	f43f ae38 	beq.w	800dc1e <_printf_float+0xc2>
 800dfae:	f108 0801 	add.w	r8, r8, #1
 800dfb2:	68e3      	ldr	r3, [r4, #12]
 800dfb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfb6:	1a5b      	subs	r3, r3, r1
 800dfb8:	4543      	cmp	r3, r8
 800dfba:	dcf0      	bgt.n	800df9e <_printf_float+0x442>
 800dfbc:	e6fa      	b.n	800ddb4 <_printf_float+0x258>
 800dfbe:	f04f 0800 	mov.w	r8, #0
 800dfc2:	f104 0919 	add.w	r9, r4, #25
 800dfc6:	e7f4      	b.n	800dfb2 <_printf_float+0x456>

0800dfc8 <_printf_common>:
 800dfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfcc:	4616      	mov	r6, r2
 800dfce:	4699      	mov	r9, r3
 800dfd0:	688a      	ldr	r2, [r1, #8]
 800dfd2:	690b      	ldr	r3, [r1, #16]
 800dfd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	bfb8      	it	lt
 800dfdc:	4613      	movlt	r3, r2
 800dfde:	6033      	str	r3, [r6, #0]
 800dfe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	b10a      	cbz	r2, 800dfee <_printf_common+0x26>
 800dfea:	3301      	adds	r3, #1
 800dfec:	6033      	str	r3, [r6, #0]
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	0699      	lsls	r1, r3, #26
 800dff2:	bf42      	ittt	mi
 800dff4:	6833      	ldrmi	r3, [r6, #0]
 800dff6:	3302      	addmi	r3, #2
 800dff8:	6033      	strmi	r3, [r6, #0]
 800dffa:	6825      	ldr	r5, [r4, #0]
 800dffc:	f015 0506 	ands.w	r5, r5, #6
 800e000:	d106      	bne.n	800e010 <_printf_common+0x48>
 800e002:	f104 0a19 	add.w	sl, r4, #25
 800e006:	68e3      	ldr	r3, [r4, #12]
 800e008:	6832      	ldr	r2, [r6, #0]
 800e00a:	1a9b      	subs	r3, r3, r2
 800e00c:	42ab      	cmp	r3, r5
 800e00e:	dc26      	bgt.n	800e05e <_printf_common+0x96>
 800e010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e014:	1e13      	subs	r3, r2, #0
 800e016:	6822      	ldr	r2, [r4, #0]
 800e018:	bf18      	it	ne
 800e01a:	2301      	movne	r3, #1
 800e01c:	0692      	lsls	r2, r2, #26
 800e01e:	d42b      	bmi.n	800e078 <_printf_common+0xb0>
 800e020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e024:	4649      	mov	r1, r9
 800e026:	4638      	mov	r0, r7
 800e028:	47c0      	blx	r8
 800e02a:	3001      	adds	r0, #1
 800e02c:	d01e      	beq.n	800e06c <_printf_common+0xa4>
 800e02e:	6823      	ldr	r3, [r4, #0]
 800e030:	68e5      	ldr	r5, [r4, #12]
 800e032:	6832      	ldr	r2, [r6, #0]
 800e034:	f003 0306 	and.w	r3, r3, #6
 800e038:	2b04      	cmp	r3, #4
 800e03a:	bf08      	it	eq
 800e03c:	1aad      	subeq	r5, r5, r2
 800e03e:	68a3      	ldr	r3, [r4, #8]
 800e040:	6922      	ldr	r2, [r4, #16]
 800e042:	bf0c      	ite	eq
 800e044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e048:	2500      	movne	r5, #0
 800e04a:	4293      	cmp	r3, r2
 800e04c:	bfc4      	itt	gt
 800e04e:	1a9b      	subgt	r3, r3, r2
 800e050:	18ed      	addgt	r5, r5, r3
 800e052:	2600      	movs	r6, #0
 800e054:	341a      	adds	r4, #26
 800e056:	42b5      	cmp	r5, r6
 800e058:	d11a      	bne.n	800e090 <_printf_common+0xc8>
 800e05a:	2000      	movs	r0, #0
 800e05c:	e008      	b.n	800e070 <_printf_common+0xa8>
 800e05e:	2301      	movs	r3, #1
 800e060:	4652      	mov	r2, sl
 800e062:	4649      	mov	r1, r9
 800e064:	4638      	mov	r0, r7
 800e066:	47c0      	blx	r8
 800e068:	3001      	adds	r0, #1
 800e06a:	d103      	bne.n	800e074 <_printf_common+0xac>
 800e06c:	f04f 30ff 	mov.w	r0, #4294967295
 800e070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e074:	3501      	adds	r5, #1
 800e076:	e7c6      	b.n	800e006 <_printf_common+0x3e>
 800e078:	18e1      	adds	r1, r4, r3
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	2030      	movs	r0, #48	; 0x30
 800e07e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e082:	4422      	add	r2, r4
 800e084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e08c:	3302      	adds	r3, #2
 800e08e:	e7c7      	b.n	800e020 <_printf_common+0x58>
 800e090:	2301      	movs	r3, #1
 800e092:	4622      	mov	r2, r4
 800e094:	4649      	mov	r1, r9
 800e096:	4638      	mov	r0, r7
 800e098:	47c0      	blx	r8
 800e09a:	3001      	adds	r0, #1
 800e09c:	d0e6      	beq.n	800e06c <_printf_common+0xa4>
 800e09e:	3601      	adds	r6, #1
 800e0a0:	e7d9      	b.n	800e056 <_printf_common+0x8e>
	...

0800e0a4 <_printf_i>:
 800e0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	4691      	mov	r9, r2
 800e0ac:	7e27      	ldrb	r7, [r4, #24]
 800e0ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e0b0:	2f78      	cmp	r7, #120	; 0x78
 800e0b2:	4680      	mov	r8, r0
 800e0b4:	469a      	mov	sl, r3
 800e0b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0ba:	d807      	bhi.n	800e0cc <_printf_i+0x28>
 800e0bc:	2f62      	cmp	r7, #98	; 0x62
 800e0be:	d80a      	bhi.n	800e0d6 <_printf_i+0x32>
 800e0c0:	2f00      	cmp	r7, #0
 800e0c2:	f000 80d8 	beq.w	800e276 <_printf_i+0x1d2>
 800e0c6:	2f58      	cmp	r7, #88	; 0x58
 800e0c8:	f000 80a3 	beq.w	800e212 <_printf_i+0x16e>
 800e0cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e0d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0d4:	e03a      	b.n	800e14c <_printf_i+0xa8>
 800e0d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0da:	2b15      	cmp	r3, #21
 800e0dc:	d8f6      	bhi.n	800e0cc <_printf_i+0x28>
 800e0de:	a001      	add	r0, pc, #4	; (adr r0, 800e0e4 <_printf_i+0x40>)
 800e0e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e0e4:	0800e13d 	.word	0x0800e13d
 800e0e8:	0800e151 	.word	0x0800e151
 800e0ec:	0800e0cd 	.word	0x0800e0cd
 800e0f0:	0800e0cd 	.word	0x0800e0cd
 800e0f4:	0800e0cd 	.word	0x0800e0cd
 800e0f8:	0800e0cd 	.word	0x0800e0cd
 800e0fc:	0800e151 	.word	0x0800e151
 800e100:	0800e0cd 	.word	0x0800e0cd
 800e104:	0800e0cd 	.word	0x0800e0cd
 800e108:	0800e0cd 	.word	0x0800e0cd
 800e10c:	0800e0cd 	.word	0x0800e0cd
 800e110:	0800e25d 	.word	0x0800e25d
 800e114:	0800e181 	.word	0x0800e181
 800e118:	0800e23f 	.word	0x0800e23f
 800e11c:	0800e0cd 	.word	0x0800e0cd
 800e120:	0800e0cd 	.word	0x0800e0cd
 800e124:	0800e27f 	.word	0x0800e27f
 800e128:	0800e0cd 	.word	0x0800e0cd
 800e12c:	0800e181 	.word	0x0800e181
 800e130:	0800e0cd 	.word	0x0800e0cd
 800e134:	0800e0cd 	.word	0x0800e0cd
 800e138:	0800e247 	.word	0x0800e247
 800e13c:	680b      	ldr	r3, [r1, #0]
 800e13e:	1d1a      	adds	r2, r3, #4
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	600a      	str	r2, [r1, #0]
 800e144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e14c:	2301      	movs	r3, #1
 800e14e:	e0a3      	b.n	800e298 <_printf_i+0x1f4>
 800e150:	6825      	ldr	r5, [r4, #0]
 800e152:	6808      	ldr	r0, [r1, #0]
 800e154:	062e      	lsls	r6, r5, #24
 800e156:	f100 0304 	add.w	r3, r0, #4
 800e15a:	d50a      	bpl.n	800e172 <_printf_i+0xce>
 800e15c:	6805      	ldr	r5, [r0, #0]
 800e15e:	600b      	str	r3, [r1, #0]
 800e160:	2d00      	cmp	r5, #0
 800e162:	da03      	bge.n	800e16c <_printf_i+0xc8>
 800e164:	232d      	movs	r3, #45	; 0x2d
 800e166:	426d      	negs	r5, r5
 800e168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e16c:	485e      	ldr	r0, [pc, #376]	; (800e2e8 <_printf_i+0x244>)
 800e16e:	230a      	movs	r3, #10
 800e170:	e019      	b.n	800e1a6 <_printf_i+0x102>
 800e172:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e176:	6805      	ldr	r5, [r0, #0]
 800e178:	600b      	str	r3, [r1, #0]
 800e17a:	bf18      	it	ne
 800e17c:	b22d      	sxthne	r5, r5
 800e17e:	e7ef      	b.n	800e160 <_printf_i+0xbc>
 800e180:	680b      	ldr	r3, [r1, #0]
 800e182:	6825      	ldr	r5, [r4, #0]
 800e184:	1d18      	adds	r0, r3, #4
 800e186:	6008      	str	r0, [r1, #0]
 800e188:	0628      	lsls	r0, r5, #24
 800e18a:	d501      	bpl.n	800e190 <_printf_i+0xec>
 800e18c:	681d      	ldr	r5, [r3, #0]
 800e18e:	e002      	b.n	800e196 <_printf_i+0xf2>
 800e190:	0669      	lsls	r1, r5, #25
 800e192:	d5fb      	bpl.n	800e18c <_printf_i+0xe8>
 800e194:	881d      	ldrh	r5, [r3, #0]
 800e196:	4854      	ldr	r0, [pc, #336]	; (800e2e8 <_printf_i+0x244>)
 800e198:	2f6f      	cmp	r7, #111	; 0x6f
 800e19a:	bf0c      	ite	eq
 800e19c:	2308      	moveq	r3, #8
 800e19e:	230a      	movne	r3, #10
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1a6:	6866      	ldr	r6, [r4, #4]
 800e1a8:	60a6      	str	r6, [r4, #8]
 800e1aa:	2e00      	cmp	r6, #0
 800e1ac:	bfa2      	ittt	ge
 800e1ae:	6821      	ldrge	r1, [r4, #0]
 800e1b0:	f021 0104 	bicge.w	r1, r1, #4
 800e1b4:	6021      	strge	r1, [r4, #0]
 800e1b6:	b90d      	cbnz	r5, 800e1bc <_printf_i+0x118>
 800e1b8:	2e00      	cmp	r6, #0
 800e1ba:	d04d      	beq.n	800e258 <_printf_i+0x1b4>
 800e1bc:	4616      	mov	r6, r2
 800e1be:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1c2:	fb03 5711 	mls	r7, r3, r1, r5
 800e1c6:	5dc7      	ldrb	r7, [r0, r7]
 800e1c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1cc:	462f      	mov	r7, r5
 800e1ce:	42bb      	cmp	r3, r7
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	d9f4      	bls.n	800e1be <_printf_i+0x11a>
 800e1d4:	2b08      	cmp	r3, #8
 800e1d6:	d10b      	bne.n	800e1f0 <_printf_i+0x14c>
 800e1d8:	6823      	ldr	r3, [r4, #0]
 800e1da:	07df      	lsls	r7, r3, #31
 800e1dc:	d508      	bpl.n	800e1f0 <_printf_i+0x14c>
 800e1de:	6923      	ldr	r3, [r4, #16]
 800e1e0:	6861      	ldr	r1, [r4, #4]
 800e1e2:	4299      	cmp	r1, r3
 800e1e4:	bfde      	ittt	le
 800e1e6:	2330      	movle	r3, #48	; 0x30
 800e1e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e1f0:	1b92      	subs	r2, r2, r6
 800e1f2:	6122      	str	r2, [r4, #16]
 800e1f4:	f8cd a000 	str.w	sl, [sp]
 800e1f8:	464b      	mov	r3, r9
 800e1fa:	aa03      	add	r2, sp, #12
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4640      	mov	r0, r8
 800e200:	f7ff fee2 	bl	800dfc8 <_printf_common>
 800e204:	3001      	adds	r0, #1
 800e206:	d14c      	bne.n	800e2a2 <_printf_i+0x1fe>
 800e208:	f04f 30ff 	mov.w	r0, #4294967295
 800e20c:	b004      	add	sp, #16
 800e20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e212:	4835      	ldr	r0, [pc, #212]	; (800e2e8 <_printf_i+0x244>)
 800e214:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	680e      	ldr	r6, [r1, #0]
 800e21c:	061f      	lsls	r7, r3, #24
 800e21e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e222:	600e      	str	r6, [r1, #0]
 800e224:	d514      	bpl.n	800e250 <_printf_i+0x1ac>
 800e226:	07d9      	lsls	r1, r3, #31
 800e228:	bf44      	itt	mi
 800e22a:	f043 0320 	orrmi.w	r3, r3, #32
 800e22e:	6023      	strmi	r3, [r4, #0]
 800e230:	b91d      	cbnz	r5, 800e23a <_printf_i+0x196>
 800e232:	6823      	ldr	r3, [r4, #0]
 800e234:	f023 0320 	bic.w	r3, r3, #32
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	2310      	movs	r3, #16
 800e23c:	e7b0      	b.n	800e1a0 <_printf_i+0xfc>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	f043 0320 	orr.w	r3, r3, #32
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	2378      	movs	r3, #120	; 0x78
 800e248:	4828      	ldr	r0, [pc, #160]	; (800e2ec <_printf_i+0x248>)
 800e24a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e24e:	e7e3      	b.n	800e218 <_printf_i+0x174>
 800e250:	065e      	lsls	r6, r3, #25
 800e252:	bf48      	it	mi
 800e254:	b2ad      	uxthmi	r5, r5
 800e256:	e7e6      	b.n	800e226 <_printf_i+0x182>
 800e258:	4616      	mov	r6, r2
 800e25a:	e7bb      	b.n	800e1d4 <_printf_i+0x130>
 800e25c:	680b      	ldr	r3, [r1, #0]
 800e25e:	6826      	ldr	r6, [r4, #0]
 800e260:	6960      	ldr	r0, [r4, #20]
 800e262:	1d1d      	adds	r5, r3, #4
 800e264:	600d      	str	r5, [r1, #0]
 800e266:	0635      	lsls	r5, r6, #24
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	d501      	bpl.n	800e270 <_printf_i+0x1cc>
 800e26c:	6018      	str	r0, [r3, #0]
 800e26e:	e002      	b.n	800e276 <_printf_i+0x1d2>
 800e270:	0671      	lsls	r1, r6, #25
 800e272:	d5fb      	bpl.n	800e26c <_printf_i+0x1c8>
 800e274:	8018      	strh	r0, [r3, #0]
 800e276:	2300      	movs	r3, #0
 800e278:	6123      	str	r3, [r4, #16]
 800e27a:	4616      	mov	r6, r2
 800e27c:	e7ba      	b.n	800e1f4 <_printf_i+0x150>
 800e27e:	680b      	ldr	r3, [r1, #0]
 800e280:	1d1a      	adds	r2, r3, #4
 800e282:	600a      	str	r2, [r1, #0]
 800e284:	681e      	ldr	r6, [r3, #0]
 800e286:	6862      	ldr	r2, [r4, #4]
 800e288:	2100      	movs	r1, #0
 800e28a:	4630      	mov	r0, r6
 800e28c:	f7f1 ffa8 	bl	80001e0 <memchr>
 800e290:	b108      	cbz	r0, 800e296 <_printf_i+0x1f2>
 800e292:	1b80      	subs	r0, r0, r6
 800e294:	6060      	str	r0, [r4, #4]
 800e296:	6863      	ldr	r3, [r4, #4]
 800e298:	6123      	str	r3, [r4, #16]
 800e29a:	2300      	movs	r3, #0
 800e29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2a0:	e7a8      	b.n	800e1f4 <_printf_i+0x150>
 800e2a2:	6923      	ldr	r3, [r4, #16]
 800e2a4:	4632      	mov	r2, r6
 800e2a6:	4649      	mov	r1, r9
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	47d0      	blx	sl
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	d0ab      	beq.n	800e208 <_printf_i+0x164>
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	079b      	lsls	r3, r3, #30
 800e2b4:	d413      	bmi.n	800e2de <_printf_i+0x23a>
 800e2b6:	68e0      	ldr	r0, [r4, #12]
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	4298      	cmp	r0, r3
 800e2bc:	bfb8      	it	lt
 800e2be:	4618      	movlt	r0, r3
 800e2c0:	e7a4      	b.n	800e20c <_printf_i+0x168>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	4632      	mov	r2, r6
 800e2c6:	4649      	mov	r1, r9
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	47d0      	blx	sl
 800e2cc:	3001      	adds	r0, #1
 800e2ce:	d09b      	beq.n	800e208 <_printf_i+0x164>
 800e2d0:	3501      	adds	r5, #1
 800e2d2:	68e3      	ldr	r3, [r4, #12]
 800e2d4:	9903      	ldr	r1, [sp, #12]
 800e2d6:	1a5b      	subs	r3, r3, r1
 800e2d8:	42ab      	cmp	r3, r5
 800e2da:	dcf2      	bgt.n	800e2c2 <_printf_i+0x21e>
 800e2dc:	e7eb      	b.n	800e2b6 <_printf_i+0x212>
 800e2de:	2500      	movs	r5, #0
 800e2e0:	f104 0619 	add.w	r6, r4, #25
 800e2e4:	e7f5      	b.n	800e2d2 <_printf_i+0x22e>
 800e2e6:	bf00      	nop
 800e2e8:	08011212 	.word	0x08011212
 800e2ec:	08011223 	.word	0x08011223

0800e2f0 <iprintf>:
 800e2f0:	b40f      	push	{r0, r1, r2, r3}
 800e2f2:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <iprintf+0x2c>)
 800e2f4:	b513      	push	{r0, r1, r4, lr}
 800e2f6:	681c      	ldr	r4, [r3, #0]
 800e2f8:	b124      	cbz	r4, 800e304 <iprintf+0x14>
 800e2fa:	69a3      	ldr	r3, [r4, #24]
 800e2fc:	b913      	cbnz	r3, 800e304 <iprintf+0x14>
 800e2fe:	4620      	mov	r0, r4
 800e300:	f001 f99c 	bl	800f63c <__sinit>
 800e304:	ab05      	add	r3, sp, #20
 800e306:	9a04      	ldr	r2, [sp, #16]
 800e308:	68a1      	ldr	r1, [r4, #8]
 800e30a:	9301      	str	r3, [sp, #4]
 800e30c:	4620      	mov	r0, r4
 800e30e:	f002 f877 	bl	8010400 <_vfiprintf_r>
 800e312:	b002      	add	sp, #8
 800e314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e318:	b004      	add	sp, #16
 800e31a:	4770      	bx	lr
 800e31c:	2000007c 	.word	0x2000007c

0800e320 <_puts_r>:
 800e320:	b570      	push	{r4, r5, r6, lr}
 800e322:	460e      	mov	r6, r1
 800e324:	4605      	mov	r5, r0
 800e326:	b118      	cbz	r0, 800e330 <_puts_r+0x10>
 800e328:	6983      	ldr	r3, [r0, #24]
 800e32a:	b90b      	cbnz	r3, 800e330 <_puts_r+0x10>
 800e32c:	f001 f986 	bl	800f63c <__sinit>
 800e330:	69ab      	ldr	r3, [r5, #24]
 800e332:	68ac      	ldr	r4, [r5, #8]
 800e334:	b913      	cbnz	r3, 800e33c <_puts_r+0x1c>
 800e336:	4628      	mov	r0, r5
 800e338:	f001 f980 	bl	800f63c <__sinit>
 800e33c:	4b2c      	ldr	r3, [pc, #176]	; (800e3f0 <_puts_r+0xd0>)
 800e33e:	429c      	cmp	r4, r3
 800e340:	d120      	bne.n	800e384 <_puts_r+0x64>
 800e342:	686c      	ldr	r4, [r5, #4]
 800e344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e346:	07db      	lsls	r3, r3, #31
 800e348:	d405      	bmi.n	800e356 <_puts_r+0x36>
 800e34a:	89a3      	ldrh	r3, [r4, #12]
 800e34c:	0598      	lsls	r0, r3, #22
 800e34e:	d402      	bmi.n	800e356 <_puts_r+0x36>
 800e350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e352:	f001 fa28 	bl	800f7a6 <__retarget_lock_acquire_recursive>
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	0719      	lsls	r1, r3, #28
 800e35a:	d51d      	bpl.n	800e398 <_puts_r+0x78>
 800e35c:	6923      	ldr	r3, [r4, #16]
 800e35e:	b1db      	cbz	r3, 800e398 <_puts_r+0x78>
 800e360:	3e01      	subs	r6, #1
 800e362:	68a3      	ldr	r3, [r4, #8]
 800e364:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e368:	3b01      	subs	r3, #1
 800e36a:	60a3      	str	r3, [r4, #8]
 800e36c:	bb39      	cbnz	r1, 800e3be <_puts_r+0x9e>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	da38      	bge.n	800e3e4 <_puts_r+0xc4>
 800e372:	4622      	mov	r2, r4
 800e374:	210a      	movs	r1, #10
 800e376:	4628      	mov	r0, r5
 800e378:	f000 f8ee 	bl	800e558 <__swbuf_r>
 800e37c:	3001      	adds	r0, #1
 800e37e:	d011      	beq.n	800e3a4 <_puts_r+0x84>
 800e380:	250a      	movs	r5, #10
 800e382:	e011      	b.n	800e3a8 <_puts_r+0x88>
 800e384:	4b1b      	ldr	r3, [pc, #108]	; (800e3f4 <_puts_r+0xd4>)
 800e386:	429c      	cmp	r4, r3
 800e388:	d101      	bne.n	800e38e <_puts_r+0x6e>
 800e38a:	68ac      	ldr	r4, [r5, #8]
 800e38c:	e7da      	b.n	800e344 <_puts_r+0x24>
 800e38e:	4b1a      	ldr	r3, [pc, #104]	; (800e3f8 <_puts_r+0xd8>)
 800e390:	429c      	cmp	r4, r3
 800e392:	bf08      	it	eq
 800e394:	68ec      	ldreq	r4, [r5, #12]
 800e396:	e7d5      	b.n	800e344 <_puts_r+0x24>
 800e398:	4621      	mov	r1, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	f000 f92e 	bl	800e5fc <__swsetup_r>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d0dd      	beq.n	800e360 <_puts_r+0x40>
 800e3a4:	f04f 35ff 	mov.w	r5, #4294967295
 800e3a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3aa:	07da      	lsls	r2, r3, #31
 800e3ac:	d405      	bmi.n	800e3ba <_puts_r+0x9a>
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	059b      	lsls	r3, r3, #22
 800e3b2:	d402      	bmi.n	800e3ba <_puts_r+0x9a>
 800e3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3b6:	f001 f9f7 	bl	800f7a8 <__retarget_lock_release_recursive>
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	bd70      	pop	{r4, r5, r6, pc}
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	da04      	bge.n	800e3cc <_puts_r+0xac>
 800e3c2:	69a2      	ldr	r2, [r4, #24]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	dc06      	bgt.n	800e3d6 <_puts_r+0xb6>
 800e3c8:	290a      	cmp	r1, #10
 800e3ca:	d004      	beq.n	800e3d6 <_puts_r+0xb6>
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	1c5a      	adds	r2, r3, #1
 800e3d0:	6022      	str	r2, [r4, #0]
 800e3d2:	7019      	strb	r1, [r3, #0]
 800e3d4:	e7c5      	b.n	800e362 <_puts_r+0x42>
 800e3d6:	4622      	mov	r2, r4
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f000 f8bd 	bl	800e558 <__swbuf_r>
 800e3de:	3001      	adds	r0, #1
 800e3e0:	d1bf      	bne.n	800e362 <_puts_r+0x42>
 800e3e2:	e7df      	b.n	800e3a4 <_puts_r+0x84>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	250a      	movs	r5, #10
 800e3e8:	1c5a      	adds	r2, r3, #1
 800e3ea:	6022      	str	r2, [r4, #0]
 800e3ec:	701d      	strb	r5, [r3, #0]
 800e3ee:	e7db      	b.n	800e3a8 <_puts_r+0x88>
 800e3f0:	08011388 	.word	0x08011388
 800e3f4:	080113a8 	.word	0x080113a8
 800e3f8:	08011368 	.word	0x08011368

0800e3fc <puts>:
 800e3fc:	4b02      	ldr	r3, [pc, #8]	; (800e408 <puts+0xc>)
 800e3fe:	4601      	mov	r1, r0
 800e400:	6818      	ldr	r0, [r3, #0]
 800e402:	f7ff bf8d 	b.w	800e320 <_puts_r>
 800e406:	bf00      	nop
 800e408:	2000007c 	.word	0x2000007c

0800e40c <siprintf>:
 800e40c:	b40e      	push	{r1, r2, r3}
 800e40e:	b500      	push	{lr}
 800e410:	b09c      	sub	sp, #112	; 0x70
 800e412:	ab1d      	add	r3, sp, #116	; 0x74
 800e414:	9002      	str	r0, [sp, #8]
 800e416:	9006      	str	r0, [sp, #24]
 800e418:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e41c:	4809      	ldr	r0, [pc, #36]	; (800e444 <siprintf+0x38>)
 800e41e:	9107      	str	r1, [sp, #28]
 800e420:	9104      	str	r1, [sp, #16]
 800e422:	4909      	ldr	r1, [pc, #36]	; (800e448 <siprintf+0x3c>)
 800e424:	f853 2b04 	ldr.w	r2, [r3], #4
 800e428:	9105      	str	r1, [sp, #20]
 800e42a:	6800      	ldr	r0, [r0, #0]
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	a902      	add	r1, sp, #8
 800e430:	f001 febc 	bl	80101ac <_svfiprintf_r>
 800e434:	9b02      	ldr	r3, [sp, #8]
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
 800e43a:	b01c      	add	sp, #112	; 0x70
 800e43c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e440:	b003      	add	sp, #12
 800e442:	4770      	bx	lr
 800e444:	2000007c 	.word	0x2000007c
 800e448:	ffff0208 	.word	0xffff0208

0800e44c <strncpy>:
 800e44c:	b510      	push	{r4, lr}
 800e44e:	3901      	subs	r1, #1
 800e450:	4603      	mov	r3, r0
 800e452:	b132      	cbz	r2, 800e462 <strncpy+0x16>
 800e454:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e458:	f803 4b01 	strb.w	r4, [r3], #1
 800e45c:	3a01      	subs	r2, #1
 800e45e:	2c00      	cmp	r4, #0
 800e460:	d1f7      	bne.n	800e452 <strncpy+0x6>
 800e462:	441a      	add	r2, r3
 800e464:	2100      	movs	r1, #0
 800e466:	4293      	cmp	r3, r2
 800e468:	d100      	bne.n	800e46c <strncpy+0x20>
 800e46a:	bd10      	pop	{r4, pc}
 800e46c:	f803 1b01 	strb.w	r1, [r3], #1
 800e470:	e7f9      	b.n	800e466 <strncpy+0x1a>

0800e472 <strstr>:
 800e472:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e474:	780c      	ldrb	r4, [r1, #0]
 800e476:	b164      	cbz	r4, 800e492 <strstr+0x20>
 800e478:	4603      	mov	r3, r0
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	4618      	mov	r0, r3
 800e47e:	1c5e      	adds	r6, r3, #1
 800e480:	b90a      	cbnz	r2, 800e486 <strstr+0x14>
 800e482:	4610      	mov	r0, r2
 800e484:	e005      	b.n	800e492 <strstr+0x20>
 800e486:	4294      	cmp	r4, r2
 800e488:	d108      	bne.n	800e49c <strstr+0x2a>
 800e48a:	460d      	mov	r5, r1
 800e48c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e490:	b902      	cbnz	r2, 800e494 <strstr+0x22>
 800e492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e494:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e498:	4297      	cmp	r7, r2
 800e49a:	d0f7      	beq.n	800e48c <strstr+0x1a>
 800e49c:	4633      	mov	r3, r6
 800e49e:	e7ec      	b.n	800e47a <strstr+0x8>

0800e4a0 <strtok>:
 800e4a0:	4b16      	ldr	r3, [pc, #88]	; (800e4fc <strtok+0x5c>)
 800e4a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4a4:	681e      	ldr	r6, [r3, #0]
 800e4a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e4a8:	4605      	mov	r5, r0
 800e4aa:	b9fc      	cbnz	r4, 800e4ec <strtok+0x4c>
 800e4ac:	2050      	movs	r0, #80	; 0x50
 800e4ae:	9101      	str	r1, [sp, #4]
 800e4b0:	f001 f9e0 	bl	800f874 <malloc>
 800e4b4:	9901      	ldr	r1, [sp, #4]
 800e4b6:	65b0      	str	r0, [r6, #88]	; 0x58
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	b920      	cbnz	r0, 800e4c6 <strtok+0x26>
 800e4bc:	4b10      	ldr	r3, [pc, #64]	; (800e500 <strtok+0x60>)
 800e4be:	4811      	ldr	r0, [pc, #68]	; (800e504 <strtok+0x64>)
 800e4c0:	2157      	movs	r1, #87	; 0x57
 800e4c2:	f000 f909 	bl	800e6d8 <__assert_func>
 800e4c6:	e9c0 4400 	strd	r4, r4, [r0]
 800e4ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e4ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e4d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e4d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e4da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e4de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e4e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e4e6:	6184      	str	r4, [r0, #24]
 800e4e8:	7704      	strb	r4, [r0, #28]
 800e4ea:	6244      	str	r4, [r0, #36]	; 0x24
 800e4ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	b002      	add	sp, #8
 800e4f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4f8:	f000 b806 	b.w	800e508 <__strtok_r>
 800e4fc:	2000007c 	.word	0x2000007c
 800e500:	08011234 	.word	0x08011234
 800e504:	0801124b 	.word	0x0801124b

0800e508 <__strtok_r>:
 800e508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e50a:	b908      	cbnz	r0, 800e510 <__strtok_r+0x8>
 800e50c:	6810      	ldr	r0, [r2, #0]
 800e50e:	b188      	cbz	r0, 800e534 <__strtok_r+0x2c>
 800e510:	4604      	mov	r4, r0
 800e512:	4620      	mov	r0, r4
 800e514:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e518:	460f      	mov	r7, r1
 800e51a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e51e:	b91e      	cbnz	r6, 800e528 <__strtok_r+0x20>
 800e520:	b965      	cbnz	r5, 800e53c <__strtok_r+0x34>
 800e522:	6015      	str	r5, [r2, #0]
 800e524:	4628      	mov	r0, r5
 800e526:	e005      	b.n	800e534 <__strtok_r+0x2c>
 800e528:	42b5      	cmp	r5, r6
 800e52a:	d1f6      	bne.n	800e51a <__strtok_r+0x12>
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1f0      	bne.n	800e512 <__strtok_r+0xa>
 800e530:	6014      	str	r4, [r2, #0]
 800e532:	7003      	strb	r3, [r0, #0]
 800e534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e536:	461c      	mov	r4, r3
 800e538:	e00c      	b.n	800e554 <__strtok_r+0x4c>
 800e53a:	b915      	cbnz	r5, 800e542 <__strtok_r+0x3a>
 800e53c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e540:	460e      	mov	r6, r1
 800e542:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e546:	42ab      	cmp	r3, r5
 800e548:	d1f7      	bne.n	800e53a <__strtok_r+0x32>
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d0f3      	beq.n	800e536 <__strtok_r+0x2e>
 800e54e:	2300      	movs	r3, #0
 800e550:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e554:	6014      	str	r4, [r2, #0]
 800e556:	e7ed      	b.n	800e534 <__strtok_r+0x2c>

0800e558 <__swbuf_r>:
 800e558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55a:	460e      	mov	r6, r1
 800e55c:	4614      	mov	r4, r2
 800e55e:	4605      	mov	r5, r0
 800e560:	b118      	cbz	r0, 800e56a <__swbuf_r+0x12>
 800e562:	6983      	ldr	r3, [r0, #24]
 800e564:	b90b      	cbnz	r3, 800e56a <__swbuf_r+0x12>
 800e566:	f001 f869 	bl	800f63c <__sinit>
 800e56a:	4b21      	ldr	r3, [pc, #132]	; (800e5f0 <__swbuf_r+0x98>)
 800e56c:	429c      	cmp	r4, r3
 800e56e:	d12b      	bne.n	800e5c8 <__swbuf_r+0x70>
 800e570:	686c      	ldr	r4, [r5, #4]
 800e572:	69a3      	ldr	r3, [r4, #24]
 800e574:	60a3      	str	r3, [r4, #8]
 800e576:	89a3      	ldrh	r3, [r4, #12]
 800e578:	071a      	lsls	r2, r3, #28
 800e57a:	d52f      	bpl.n	800e5dc <__swbuf_r+0x84>
 800e57c:	6923      	ldr	r3, [r4, #16]
 800e57e:	b36b      	cbz	r3, 800e5dc <__swbuf_r+0x84>
 800e580:	6923      	ldr	r3, [r4, #16]
 800e582:	6820      	ldr	r0, [r4, #0]
 800e584:	1ac0      	subs	r0, r0, r3
 800e586:	6963      	ldr	r3, [r4, #20]
 800e588:	b2f6      	uxtb	r6, r6
 800e58a:	4283      	cmp	r3, r0
 800e58c:	4637      	mov	r7, r6
 800e58e:	dc04      	bgt.n	800e59a <__swbuf_r+0x42>
 800e590:	4621      	mov	r1, r4
 800e592:	4628      	mov	r0, r5
 800e594:	f000 ffbe 	bl	800f514 <_fflush_r>
 800e598:	bb30      	cbnz	r0, 800e5e8 <__swbuf_r+0x90>
 800e59a:	68a3      	ldr	r3, [r4, #8]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	60a3      	str	r3, [r4, #8]
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	6022      	str	r2, [r4, #0]
 800e5a6:	701e      	strb	r6, [r3, #0]
 800e5a8:	6963      	ldr	r3, [r4, #20]
 800e5aa:	3001      	adds	r0, #1
 800e5ac:	4283      	cmp	r3, r0
 800e5ae:	d004      	beq.n	800e5ba <__swbuf_r+0x62>
 800e5b0:	89a3      	ldrh	r3, [r4, #12]
 800e5b2:	07db      	lsls	r3, r3, #31
 800e5b4:	d506      	bpl.n	800e5c4 <__swbuf_r+0x6c>
 800e5b6:	2e0a      	cmp	r6, #10
 800e5b8:	d104      	bne.n	800e5c4 <__swbuf_r+0x6c>
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f000 ffa9 	bl	800f514 <_fflush_r>
 800e5c2:	b988      	cbnz	r0, 800e5e8 <__swbuf_r+0x90>
 800e5c4:	4638      	mov	r0, r7
 800e5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c8:	4b0a      	ldr	r3, [pc, #40]	; (800e5f4 <__swbuf_r+0x9c>)
 800e5ca:	429c      	cmp	r4, r3
 800e5cc:	d101      	bne.n	800e5d2 <__swbuf_r+0x7a>
 800e5ce:	68ac      	ldr	r4, [r5, #8]
 800e5d0:	e7cf      	b.n	800e572 <__swbuf_r+0x1a>
 800e5d2:	4b09      	ldr	r3, [pc, #36]	; (800e5f8 <__swbuf_r+0xa0>)
 800e5d4:	429c      	cmp	r4, r3
 800e5d6:	bf08      	it	eq
 800e5d8:	68ec      	ldreq	r4, [r5, #12]
 800e5da:	e7ca      	b.n	800e572 <__swbuf_r+0x1a>
 800e5dc:	4621      	mov	r1, r4
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f000 f80c 	bl	800e5fc <__swsetup_r>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d0cb      	beq.n	800e580 <__swbuf_r+0x28>
 800e5e8:	f04f 37ff 	mov.w	r7, #4294967295
 800e5ec:	e7ea      	b.n	800e5c4 <__swbuf_r+0x6c>
 800e5ee:	bf00      	nop
 800e5f0:	08011388 	.word	0x08011388
 800e5f4:	080113a8 	.word	0x080113a8
 800e5f8:	08011368 	.word	0x08011368

0800e5fc <__swsetup_r>:
 800e5fc:	4b32      	ldr	r3, [pc, #200]	; (800e6c8 <__swsetup_r+0xcc>)
 800e5fe:	b570      	push	{r4, r5, r6, lr}
 800e600:	681d      	ldr	r5, [r3, #0]
 800e602:	4606      	mov	r6, r0
 800e604:	460c      	mov	r4, r1
 800e606:	b125      	cbz	r5, 800e612 <__swsetup_r+0x16>
 800e608:	69ab      	ldr	r3, [r5, #24]
 800e60a:	b913      	cbnz	r3, 800e612 <__swsetup_r+0x16>
 800e60c:	4628      	mov	r0, r5
 800e60e:	f001 f815 	bl	800f63c <__sinit>
 800e612:	4b2e      	ldr	r3, [pc, #184]	; (800e6cc <__swsetup_r+0xd0>)
 800e614:	429c      	cmp	r4, r3
 800e616:	d10f      	bne.n	800e638 <__swsetup_r+0x3c>
 800e618:	686c      	ldr	r4, [r5, #4]
 800e61a:	89a3      	ldrh	r3, [r4, #12]
 800e61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e620:	0719      	lsls	r1, r3, #28
 800e622:	d42c      	bmi.n	800e67e <__swsetup_r+0x82>
 800e624:	06dd      	lsls	r5, r3, #27
 800e626:	d411      	bmi.n	800e64c <__swsetup_r+0x50>
 800e628:	2309      	movs	r3, #9
 800e62a:	6033      	str	r3, [r6, #0]
 800e62c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e630:	81a3      	strh	r3, [r4, #12]
 800e632:	f04f 30ff 	mov.w	r0, #4294967295
 800e636:	e03e      	b.n	800e6b6 <__swsetup_r+0xba>
 800e638:	4b25      	ldr	r3, [pc, #148]	; (800e6d0 <__swsetup_r+0xd4>)
 800e63a:	429c      	cmp	r4, r3
 800e63c:	d101      	bne.n	800e642 <__swsetup_r+0x46>
 800e63e:	68ac      	ldr	r4, [r5, #8]
 800e640:	e7eb      	b.n	800e61a <__swsetup_r+0x1e>
 800e642:	4b24      	ldr	r3, [pc, #144]	; (800e6d4 <__swsetup_r+0xd8>)
 800e644:	429c      	cmp	r4, r3
 800e646:	bf08      	it	eq
 800e648:	68ec      	ldreq	r4, [r5, #12]
 800e64a:	e7e6      	b.n	800e61a <__swsetup_r+0x1e>
 800e64c:	0758      	lsls	r0, r3, #29
 800e64e:	d512      	bpl.n	800e676 <__swsetup_r+0x7a>
 800e650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e652:	b141      	cbz	r1, 800e666 <__swsetup_r+0x6a>
 800e654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e658:	4299      	cmp	r1, r3
 800e65a:	d002      	beq.n	800e662 <__swsetup_r+0x66>
 800e65c:	4630      	mov	r0, r6
 800e65e:	f001 fc9f 	bl	800ffa0 <_free_r>
 800e662:	2300      	movs	r3, #0
 800e664:	6363      	str	r3, [r4, #52]	; 0x34
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e66c:	81a3      	strh	r3, [r4, #12]
 800e66e:	2300      	movs	r3, #0
 800e670:	6063      	str	r3, [r4, #4]
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	89a3      	ldrh	r3, [r4, #12]
 800e678:	f043 0308 	orr.w	r3, r3, #8
 800e67c:	81a3      	strh	r3, [r4, #12]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	b94b      	cbnz	r3, 800e696 <__swsetup_r+0x9a>
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e68c:	d003      	beq.n	800e696 <__swsetup_r+0x9a>
 800e68e:	4621      	mov	r1, r4
 800e690:	4630      	mov	r0, r6
 800e692:	f001 f8af 	bl	800f7f4 <__smakebuf_r>
 800e696:	89a0      	ldrh	r0, [r4, #12]
 800e698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e69c:	f010 0301 	ands.w	r3, r0, #1
 800e6a0:	d00a      	beq.n	800e6b8 <__swsetup_r+0xbc>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	60a3      	str	r3, [r4, #8]
 800e6a6:	6963      	ldr	r3, [r4, #20]
 800e6a8:	425b      	negs	r3, r3
 800e6aa:	61a3      	str	r3, [r4, #24]
 800e6ac:	6923      	ldr	r3, [r4, #16]
 800e6ae:	b943      	cbnz	r3, 800e6c2 <__swsetup_r+0xc6>
 800e6b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6b4:	d1ba      	bne.n	800e62c <__swsetup_r+0x30>
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}
 800e6b8:	0781      	lsls	r1, r0, #30
 800e6ba:	bf58      	it	pl
 800e6bc:	6963      	ldrpl	r3, [r4, #20]
 800e6be:	60a3      	str	r3, [r4, #8]
 800e6c0:	e7f4      	b.n	800e6ac <__swsetup_r+0xb0>
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	e7f7      	b.n	800e6b6 <__swsetup_r+0xba>
 800e6c6:	bf00      	nop
 800e6c8:	2000007c 	.word	0x2000007c
 800e6cc:	08011388 	.word	0x08011388
 800e6d0:	080113a8 	.word	0x080113a8
 800e6d4:	08011368 	.word	0x08011368

0800e6d8 <__assert_func>:
 800e6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6da:	4614      	mov	r4, r2
 800e6dc:	461a      	mov	r2, r3
 800e6de:	4b09      	ldr	r3, [pc, #36]	; (800e704 <__assert_func+0x2c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	68d8      	ldr	r0, [r3, #12]
 800e6e6:	b14c      	cbz	r4, 800e6fc <__assert_func+0x24>
 800e6e8:	4b07      	ldr	r3, [pc, #28]	; (800e708 <__assert_func+0x30>)
 800e6ea:	9100      	str	r1, [sp, #0]
 800e6ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6f0:	4906      	ldr	r1, [pc, #24]	; (800e70c <__assert_func+0x34>)
 800e6f2:	462b      	mov	r3, r5
 800e6f4:	f001 f820 	bl	800f738 <fiprintf>
 800e6f8:	f002 f818 	bl	801072c <abort>
 800e6fc:	4b04      	ldr	r3, [pc, #16]	; (800e710 <__assert_func+0x38>)
 800e6fe:	461c      	mov	r4, r3
 800e700:	e7f3      	b.n	800e6ea <__assert_func+0x12>
 800e702:	bf00      	nop
 800e704:	2000007c 	.word	0x2000007c
 800e708:	080112ac 	.word	0x080112ac
 800e70c:	080112b9 	.word	0x080112b9
 800e710:	080112e7 	.word	0x080112e7

0800e714 <quorem>:
 800e714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e718:	6903      	ldr	r3, [r0, #16]
 800e71a:	690c      	ldr	r4, [r1, #16]
 800e71c:	42a3      	cmp	r3, r4
 800e71e:	4607      	mov	r7, r0
 800e720:	f2c0 8081 	blt.w	800e826 <quorem+0x112>
 800e724:	3c01      	subs	r4, #1
 800e726:	f101 0814 	add.w	r8, r1, #20
 800e72a:	f100 0514 	add.w	r5, r0, #20
 800e72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e732:	9301      	str	r3, [sp, #4]
 800e734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e73c:	3301      	adds	r3, #1
 800e73e:	429a      	cmp	r2, r3
 800e740:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e744:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e748:	fbb2 f6f3 	udiv	r6, r2, r3
 800e74c:	d331      	bcc.n	800e7b2 <quorem+0x9e>
 800e74e:	f04f 0e00 	mov.w	lr, #0
 800e752:	4640      	mov	r0, r8
 800e754:	46ac      	mov	ip, r5
 800e756:	46f2      	mov	sl, lr
 800e758:	f850 2b04 	ldr.w	r2, [r0], #4
 800e75c:	b293      	uxth	r3, r2
 800e75e:	fb06 e303 	mla	r3, r6, r3, lr
 800e762:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e766:	b29b      	uxth	r3, r3
 800e768:	ebaa 0303 	sub.w	r3, sl, r3
 800e76c:	0c12      	lsrs	r2, r2, #16
 800e76e:	f8dc a000 	ldr.w	sl, [ip]
 800e772:	fb06 e202 	mla	r2, r6, r2, lr
 800e776:	fa13 f38a 	uxtah	r3, r3, sl
 800e77a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e77e:	fa1f fa82 	uxth.w	sl, r2
 800e782:	f8dc 2000 	ldr.w	r2, [ip]
 800e786:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e78a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e78e:	b29b      	uxth	r3, r3
 800e790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e794:	4581      	cmp	r9, r0
 800e796:	f84c 3b04 	str.w	r3, [ip], #4
 800e79a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e79e:	d2db      	bcs.n	800e758 <quorem+0x44>
 800e7a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7a4:	b92b      	cbnz	r3, 800e7b2 <quorem+0x9e>
 800e7a6:	9b01      	ldr	r3, [sp, #4]
 800e7a8:	3b04      	subs	r3, #4
 800e7aa:	429d      	cmp	r5, r3
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	d32e      	bcc.n	800e80e <quorem+0xfa>
 800e7b0:	613c      	str	r4, [r7, #16]
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	f001 fae4 	bl	800fd80 <__mcmp>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	db24      	blt.n	800e806 <quorem+0xf2>
 800e7bc:	3601      	adds	r6, #1
 800e7be:	4628      	mov	r0, r5
 800e7c0:	f04f 0c00 	mov.w	ip, #0
 800e7c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7c8:	f8d0 e000 	ldr.w	lr, [r0]
 800e7cc:	b293      	uxth	r3, r2
 800e7ce:	ebac 0303 	sub.w	r3, ip, r3
 800e7d2:	0c12      	lsrs	r2, r2, #16
 800e7d4:	fa13 f38e 	uxtah	r3, r3, lr
 800e7d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e7dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7e6:	45c1      	cmp	r9, r8
 800e7e8:	f840 3b04 	str.w	r3, [r0], #4
 800e7ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e7f0:	d2e8      	bcs.n	800e7c4 <quorem+0xb0>
 800e7f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7fa:	b922      	cbnz	r2, 800e806 <quorem+0xf2>
 800e7fc:	3b04      	subs	r3, #4
 800e7fe:	429d      	cmp	r5, r3
 800e800:	461a      	mov	r2, r3
 800e802:	d30a      	bcc.n	800e81a <quorem+0x106>
 800e804:	613c      	str	r4, [r7, #16]
 800e806:	4630      	mov	r0, r6
 800e808:	b003      	add	sp, #12
 800e80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e80e:	6812      	ldr	r2, [r2, #0]
 800e810:	3b04      	subs	r3, #4
 800e812:	2a00      	cmp	r2, #0
 800e814:	d1cc      	bne.n	800e7b0 <quorem+0x9c>
 800e816:	3c01      	subs	r4, #1
 800e818:	e7c7      	b.n	800e7aa <quorem+0x96>
 800e81a:	6812      	ldr	r2, [r2, #0]
 800e81c:	3b04      	subs	r3, #4
 800e81e:	2a00      	cmp	r2, #0
 800e820:	d1f0      	bne.n	800e804 <quorem+0xf0>
 800e822:	3c01      	subs	r4, #1
 800e824:	e7eb      	b.n	800e7fe <quorem+0xea>
 800e826:	2000      	movs	r0, #0
 800e828:	e7ee      	b.n	800e808 <quorem+0xf4>
 800e82a:	0000      	movs	r0, r0
 800e82c:	0000      	movs	r0, r0
	...

0800e830 <_dtoa_r>:
 800e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e834:	ed2d 8b02 	vpush	{d8}
 800e838:	ec57 6b10 	vmov	r6, r7, d0
 800e83c:	b095      	sub	sp, #84	; 0x54
 800e83e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e840:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e844:	9105      	str	r1, [sp, #20]
 800e846:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e84a:	4604      	mov	r4, r0
 800e84c:	9209      	str	r2, [sp, #36]	; 0x24
 800e84e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e850:	b975      	cbnz	r5, 800e870 <_dtoa_r+0x40>
 800e852:	2010      	movs	r0, #16
 800e854:	f001 f80e 	bl	800f874 <malloc>
 800e858:	4602      	mov	r2, r0
 800e85a:	6260      	str	r0, [r4, #36]	; 0x24
 800e85c:	b920      	cbnz	r0, 800e868 <_dtoa_r+0x38>
 800e85e:	4bb2      	ldr	r3, [pc, #712]	; (800eb28 <_dtoa_r+0x2f8>)
 800e860:	21ea      	movs	r1, #234	; 0xea
 800e862:	48b2      	ldr	r0, [pc, #712]	; (800eb2c <_dtoa_r+0x2fc>)
 800e864:	f7ff ff38 	bl	800e6d8 <__assert_func>
 800e868:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e86c:	6005      	str	r5, [r0, #0]
 800e86e:	60c5      	str	r5, [r0, #12]
 800e870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e872:	6819      	ldr	r1, [r3, #0]
 800e874:	b151      	cbz	r1, 800e88c <_dtoa_r+0x5c>
 800e876:	685a      	ldr	r2, [r3, #4]
 800e878:	604a      	str	r2, [r1, #4]
 800e87a:	2301      	movs	r3, #1
 800e87c:	4093      	lsls	r3, r2
 800e87e:	608b      	str	r3, [r1, #8]
 800e880:	4620      	mov	r0, r4
 800e882:	f001 f83f 	bl	800f904 <_Bfree>
 800e886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]
 800e88c:	1e3b      	subs	r3, r7, #0
 800e88e:	bfb9      	ittee	lt
 800e890:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e894:	9303      	strlt	r3, [sp, #12]
 800e896:	2300      	movge	r3, #0
 800e898:	f8c8 3000 	strge.w	r3, [r8]
 800e89c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e8a0:	4ba3      	ldr	r3, [pc, #652]	; (800eb30 <_dtoa_r+0x300>)
 800e8a2:	bfbc      	itt	lt
 800e8a4:	2201      	movlt	r2, #1
 800e8a6:	f8c8 2000 	strlt.w	r2, [r8]
 800e8aa:	ea33 0309 	bics.w	r3, r3, r9
 800e8ae:	d11b      	bne.n	800e8e8 <_dtoa_r+0xb8>
 800e8b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8b6:	6013      	str	r3, [r2, #0]
 800e8b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8bc:	4333      	orrs	r3, r6
 800e8be:	f000 857a 	beq.w	800f3b6 <_dtoa_r+0xb86>
 800e8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8c4:	b963      	cbnz	r3, 800e8e0 <_dtoa_r+0xb0>
 800e8c6:	4b9b      	ldr	r3, [pc, #620]	; (800eb34 <_dtoa_r+0x304>)
 800e8c8:	e024      	b.n	800e914 <_dtoa_r+0xe4>
 800e8ca:	4b9b      	ldr	r3, [pc, #620]	; (800eb38 <_dtoa_r+0x308>)
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	3308      	adds	r3, #8
 800e8d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8d2:	6013      	str	r3, [r2, #0]
 800e8d4:	9800      	ldr	r0, [sp, #0]
 800e8d6:	b015      	add	sp, #84	; 0x54
 800e8d8:	ecbd 8b02 	vpop	{d8}
 800e8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e0:	4b94      	ldr	r3, [pc, #592]	; (800eb34 <_dtoa_r+0x304>)
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	3303      	adds	r3, #3
 800e8e6:	e7f3      	b.n	800e8d0 <_dtoa_r+0xa0>
 800e8e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	ec51 0b17 	vmov	r0, r1, d7
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e8f8:	f7f2 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8fc:	4680      	mov	r8, r0
 800e8fe:	b158      	cbz	r0, 800e918 <_dtoa_r+0xe8>
 800e900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e902:	2301      	movs	r3, #1
 800e904:	6013      	str	r3, [r2, #0]
 800e906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f000 8551 	beq.w	800f3b0 <_dtoa_r+0xb80>
 800e90e:	488b      	ldr	r0, [pc, #556]	; (800eb3c <_dtoa_r+0x30c>)
 800e910:	6018      	str	r0, [r3, #0]
 800e912:	1e43      	subs	r3, r0, #1
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	e7dd      	b.n	800e8d4 <_dtoa_r+0xa4>
 800e918:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e91c:	aa12      	add	r2, sp, #72	; 0x48
 800e91e:	a913      	add	r1, sp, #76	; 0x4c
 800e920:	4620      	mov	r0, r4
 800e922:	f001 fad1 	bl	800fec8 <__d2b>
 800e926:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e92a:	4683      	mov	fp, r0
 800e92c:	2d00      	cmp	r5, #0
 800e92e:	d07c      	beq.n	800ea2a <_dtoa_r+0x1fa>
 800e930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e932:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e93a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e93e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e942:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e94a:	4b7d      	ldr	r3, [pc, #500]	; (800eb40 <_dtoa_r+0x310>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	4630      	mov	r0, r6
 800e950:	4639      	mov	r1, r7
 800e952:	f7f1 fc99 	bl	8000288 <__aeabi_dsub>
 800e956:	a36e      	add	r3, pc, #440	; (adr r3, 800eb10 <_dtoa_r+0x2e0>)
 800e958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95c:	f7f1 fe4c 	bl	80005f8 <__aeabi_dmul>
 800e960:	a36d      	add	r3, pc, #436	; (adr r3, 800eb18 <_dtoa_r+0x2e8>)
 800e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e966:	f7f1 fc91 	bl	800028c <__adddf3>
 800e96a:	4606      	mov	r6, r0
 800e96c:	4628      	mov	r0, r5
 800e96e:	460f      	mov	r7, r1
 800e970:	f7f1 fdd8 	bl	8000524 <__aeabi_i2d>
 800e974:	a36a      	add	r3, pc, #424	; (adr r3, 800eb20 <_dtoa_r+0x2f0>)
 800e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97a:	f7f1 fe3d 	bl	80005f8 <__aeabi_dmul>
 800e97e:	4602      	mov	r2, r0
 800e980:	460b      	mov	r3, r1
 800e982:	4630      	mov	r0, r6
 800e984:	4639      	mov	r1, r7
 800e986:	f7f1 fc81 	bl	800028c <__adddf3>
 800e98a:	4606      	mov	r6, r0
 800e98c:	460f      	mov	r7, r1
 800e98e:	f7f2 f8e3 	bl	8000b58 <__aeabi_d2iz>
 800e992:	2200      	movs	r2, #0
 800e994:	4682      	mov	sl, r0
 800e996:	2300      	movs	r3, #0
 800e998:	4630      	mov	r0, r6
 800e99a:	4639      	mov	r1, r7
 800e99c:	f7f2 f89e 	bl	8000adc <__aeabi_dcmplt>
 800e9a0:	b148      	cbz	r0, 800e9b6 <_dtoa_r+0x186>
 800e9a2:	4650      	mov	r0, sl
 800e9a4:	f7f1 fdbe 	bl	8000524 <__aeabi_i2d>
 800e9a8:	4632      	mov	r2, r6
 800e9aa:	463b      	mov	r3, r7
 800e9ac:	f7f2 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9b0:	b908      	cbnz	r0, 800e9b6 <_dtoa_r+0x186>
 800e9b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9b6:	f1ba 0f16 	cmp.w	sl, #22
 800e9ba:	d854      	bhi.n	800ea66 <_dtoa_r+0x236>
 800e9bc:	4b61      	ldr	r3, [pc, #388]	; (800eb44 <_dtoa_r+0x314>)
 800e9be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e9ca:	f7f2 f887 	bl	8000adc <__aeabi_dcmplt>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d04b      	beq.n	800ea6a <_dtoa_r+0x23a>
 800e9d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	930e      	str	r3, [sp, #56]	; 0x38
 800e9da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9dc:	1b5d      	subs	r5, r3, r5
 800e9de:	1e6b      	subs	r3, r5, #1
 800e9e0:	9304      	str	r3, [sp, #16]
 800e9e2:	bf43      	ittte	mi
 800e9e4:	2300      	movmi	r3, #0
 800e9e6:	f1c5 0801 	rsbmi	r8, r5, #1
 800e9ea:	9304      	strmi	r3, [sp, #16]
 800e9ec:	f04f 0800 	movpl.w	r8, #0
 800e9f0:	f1ba 0f00 	cmp.w	sl, #0
 800e9f4:	db3b      	blt.n	800ea6e <_dtoa_r+0x23e>
 800e9f6:	9b04      	ldr	r3, [sp, #16]
 800e9f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e9fc:	4453      	add	r3, sl
 800e9fe:	9304      	str	r3, [sp, #16]
 800ea00:	2300      	movs	r3, #0
 800ea02:	9306      	str	r3, [sp, #24]
 800ea04:	9b05      	ldr	r3, [sp, #20]
 800ea06:	2b09      	cmp	r3, #9
 800ea08:	d869      	bhi.n	800eade <_dtoa_r+0x2ae>
 800ea0a:	2b05      	cmp	r3, #5
 800ea0c:	bfc4      	itt	gt
 800ea0e:	3b04      	subgt	r3, #4
 800ea10:	9305      	strgt	r3, [sp, #20]
 800ea12:	9b05      	ldr	r3, [sp, #20]
 800ea14:	f1a3 0302 	sub.w	r3, r3, #2
 800ea18:	bfcc      	ite	gt
 800ea1a:	2500      	movgt	r5, #0
 800ea1c:	2501      	movle	r5, #1
 800ea1e:	2b03      	cmp	r3, #3
 800ea20:	d869      	bhi.n	800eaf6 <_dtoa_r+0x2c6>
 800ea22:	e8df f003 	tbb	[pc, r3]
 800ea26:	4e2c      	.short	0x4e2c
 800ea28:	5a4c      	.short	0x5a4c
 800ea2a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ea2e:	441d      	add	r5, r3
 800ea30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea34:	2b20      	cmp	r3, #32
 800ea36:	bfc1      	itttt	gt
 800ea38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea3c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea40:	fa09 f303 	lslgt.w	r3, r9, r3
 800ea44:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea48:	bfda      	itte	le
 800ea4a:	f1c3 0320 	rsble	r3, r3, #32
 800ea4e:	fa06 f003 	lslle.w	r0, r6, r3
 800ea52:	4318      	orrgt	r0, r3
 800ea54:	f7f1 fd56 	bl	8000504 <__aeabi_ui2d>
 800ea58:	2301      	movs	r3, #1
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ea60:	3d01      	subs	r5, #1
 800ea62:	9310      	str	r3, [sp, #64]	; 0x40
 800ea64:	e771      	b.n	800e94a <_dtoa_r+0x11a>
 800ea66:	2301      	movs	r3, #1
 800ea68:	e7b6      	b.n	800e9d8 <_dtoa_r+0x1a8>
 800ea6a:	900e      	str	r0, [sp, #56]	; 0x38
 800ea6c:	e7b5      	b.n	800e9da <_dtoa_r+0x1aa>
 800ea6e:	f1ca 0300 	rsb	r3, sl, #0
 800ea72:	9306      	str	r3, [sp, #24]
 800ea74:	2300      	movs	r3, #0
 800ea76:	eba8 080a 	sub.w	r8, r8, sl
 800ea7a:	930d      	str	r3, [sp, #52]	; 0x34
 800ea7c:	e7c2      	b.n	800ea04 <_dtoa_r+0x1d4>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	9308      	str	r3, [sp, #32]
 800ea82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	dc39      	bgt.n	800eafc <_dtoa_r+0x2cc>
 800ea88:	f04f 0901 	mov.w	r9, #1
 800ea8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ea90:	464b      	mov	r3, r9
 800ea92:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ea96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ea98:	2200      	movs	r2, #0
 800ea9a:	6042      	str	r2, [r0, #4]
 800ea9c:	2204      	movs	r2, #4
 800ea9e:	f102 0614 	add.w	r6, r2, #20
 800eaa2:	429e      	cmp	r6, r3
 800eaa4:	6841      	ldr	r1, [r0, #4]
 800eaa6:	d92f      	bls.n	800eb08 <_dtoa_r+0x2d8>
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 feeb 	bl	800f884 <_Balloc>
 800eaae:	9000      	str	r0, [sp, #0]
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d14b      	bne.n	800eb4c <_dtoa_r+0x31c>
 800eab4:	4b24      	ldr	r3, [pc, #144]	; (800eb48 <_dtoa_r+0x318>)
 800eab6:	4602      	mov	r2, r0
 800eab8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eabc:	e6d1      	b.n	800e862 <_dtoa_r+0x32>
 800eabe:	2301      	movs	r3, #1
 800eac0:	e7de      	b.n	800ea80 <_dtoa_r+0x250>
 800eac2:	2300      	movs	r3, #0
 800eac4:	9308      	str	r3, [sp, #32]
 800eac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eac8:	eb0a 0903 	add.w	r9, sl, r3
 800eacc:	f109 0301 	add.w	r3, r9, #1
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	9301      	str	r3, [sp, #4]
 800ead4:	bfb8      	it	lt
 800ead6:	2301      	movlt	r3, #1
 800ead8:	e7dd      	b.n	800ea96 <_dtoa_r+0x266>
 800eada:	2301      	movs	r3, #1
 800eadc:	e7f2      	b.n	800eac4 <_dtoa_r+0x294>
 800eade:	2501      	movs	r5, #1
 800eae0:	2300      	movs	r3, #0
 800eae2:	9305      	str	r3, [sp, #20]
 800eae4:	9508      	str	r5, [sp, #32]
 800eae6:	f04f 39ff 	mov.w	r9, #4294967295
 800eaea:	2200      	movs	r2, #0
 800eaec:	f8cd 9004 	str.w	r9, [sp, #4]
 800eaf0:	2312      	movs	r3, #18
 800eaf2:	9209      	str	r2, [sp, #36]	; 0x24
 800eaf4:	e7cf      	b.n	800ea96 <_dtoa_r+0x266>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	9308      	str	r3, [sp, #32]
 800eafa:	e7f4      	b.n	800eae6 <_dtoa_r+0x2b6>
 800eafc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800eb00:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb04:	464b      	mov	r3, r9
 800eb06:	e7c6      	b.n	800ea96 <_dtoa_r+0x266>
 800eb08:	3101      	adds	r1, #1
 800eb0a:	6041      	str	r1, [r0, #4]
 800eb0c:	0052      	lsls	r2, r2, #1
 800eb0e:	e7c6      	b.n	800ea9e <_dtoa_r+0x26e>
 800eb10:	636f4361 	.word	0x636f4361
 800eb14:	3fd287a7 	.word	0x3fd287a7
 800eb18:	8b60c8b3 	.word	0x8b60c8b3
 800eb1c:	3fc68a28 	.word	0x3fc68a28
 800eb20:	509f79fb 	.word	0x509f79fb
 800eb24:	3fd34413 	.word	0x3fd34413
 800eb28:	08011234 	.word	0x08011234
 800eb2c:	080112f5 	.word	0x080112f5
 800eb30:	7ff00000 	.word	0x7ff00000
 800eb34:	080112f1 	.word	0x080112f1
 800eb38:	080112e8 	.word	0x080112e8
 800eb3c:	08011211 	.word	0x08011211
 800eb40:	3ff80000 	.word	0x3ff80000
 800eb44:	08011450 	.word	0x08011450
 800eb48:	08011354 	.word	0x08011354
 800eb4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb4e:	9a00      	ldr	r2, [sp, #0]
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	9b01      	ldr	r3, [sp, #4]
 800eb54:	2b0e      	cmp	r3, #14
 800eb56:	f200 80ad 	bhi.w	800ecb4 <_dtoa_r+0x484>
 800eb5a:	2d00      	cmp	r5, #0
 800eb5c:	f000 80aa 	beq.w	800ecb4 <_dtoa_r+0x484>
 800eb60:	f1ba 0f00 	cmp.w	sl, #0
 800eb64:	dd36      	ble.n	800ebd4 <_dtoa_r+0x3a4>
 800eb66:	4ac3      	ldr	r2, [pc, #780]	; (800ee74 <_dtoa_r+0x644>)
 800eb68:	f00a 030f 	and.w	r3, sl, #15
 800eb6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb70:	ed93 7b00 	vldr	d7, [r3]
 800eb74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800eb78:	ea4f 172a 	mov.w	r7, sl, asr #4
 800eb7c:	eeb0 8a47 	vmov.f32	s16, s14
 800eb80:	eef0 8a67 	vmov.f32	s17, s15
 800eb84:	d016      	beq.n	800ebb4 <_dtoa_r+0x384>
 800eb86:	4bbc      	ldr	r3, [pc, #752]	; (800ee78 <_dtoa_r+0x648>)
 800eb88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb90:	f7f1 fe5c 	bl	800084c <__aeabi_ddiv>
 800eb94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb98:	f007 070f 	and.w	r7, r7, #15
 800eb9c:	2503      	movs	r5, #3
 800eb9e:	4eb6      	ldr	r6, [pc, #728]	; (800ee78 <_dtoa_r+0x648>)
 800eba0:	b957      	cbnz	r7, 800ebb8 <_dtoa_r+0x388>
 800eba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eba6:	ec53 2b18 	vmov	r2, r3, d8
 800ebaa:	f7f1 fe4f 	bl	800084c <__aeabi_ddiv>
 800ebae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebb2:	e029      	b.n	800ec08 <_dtoa_r+0x3d8>
 800ebb4:	2502      	movs	r5, #2
 800ebb6:	e7f2      	b.n	800eb9e <_dtoa_r+0x36e>
 800ebb8:	07f9      	lsls	r1, r7, #31
 800ebba:	d508      	bpl.n	800ebce <_dtoa_r+0x39e>
 800ebbc:	ec51 0b18 	vmov	r0, r1, d8
 800ebc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ebc4:	f7f1 fd18 	bl	80005f8 <__aeabi_dmul>
 800ebc8:	ec41 0b18 	vmov	d8, r0, r1
 800ebcc:	3501      	adds	r5, #1
 800ebce:	107f      	asrs	r7, r7, #1
 800ebd0:	3608      	adds	r6, #8
 800ebd2:	e7e5      	b.n	800eba0 <_dtoa_r+0x370>
 800ebd4:	f000 80a6 	beq.w	800ed24 <_dtoa_r+0x4f4>
 800ebd8:	f1ca 0600 	rsb	r6, sl, #0
 800ebdc:	4ba5      	ldr	r3, [pc, #660]	; (800ee74 <_dtoa_r+0x644>)
 800ebde:	4fa6      	ldr	r7, [pc, #664]	; (800ee78 <_dtoa_r+0x648>)
 800ebe0:	f006 020f 	and.w	r2, r6, #15
 800ebe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ebf0:	f7f1 fd02 	bl	80005f8 <__aeabi_dmul>
 800ebf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebf8:	1136      	asrs	r6, r6, #4
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	2502      	movs	r5, #2
 800ebfe:	2e00      	cmp	r6, #0
 800ec00:	f040 8085 	bne.w	800ed0e <_dtoa_r+0x4de>
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d1d2      	bne.n	800ebae <_dtoa_r+0x37e>
 800ec08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 808c 	beq.w	800ed28 <_dtoa_r+0x4f8>
 800ec10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec14:	4b99      	ldr	r3, [pc, #612]	; (800ee7c <_dtoa_r+0x64c>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	4630      	mov	r0, r6
 800ec1a:	4639      	mov	r1, r7
 800ec1c:	f7f1 ff5e 	bl	8000adc <__aeabi_dcmplt>
 800ec20:	2800      	cmp	r0, #0
 800ec22:	f000 8081 	beq.w	800ed28 <_dtoa_r+0x4f8>
 800ec26:	9b01      	ldr	r3, [sp, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d07d      	beq.n	800ed28 <_dtoa_r+0x4f8>
 800ec2c:	f1b9 0f00 	cmp.w	r9, #0
 800ec30:	dd3c      	ble.n	800ecac <_dtoa_r+0x47c>
 800ec32:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ec36:	9307      	str	r3, [sp, #28]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	4b91      	ldr	r3, [pc, #580]	; (800ee80 <_dtoa_r+0x650>)
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	4639      	mov	r1, r7
 800ec40:	f7f1 fcda 	bl	80005f8 <__aeabi_dmul>
 800ec44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec48:	3501      	adds	r5, #1
 800ec4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ec4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec52:	4628      	mov	r0, r5
 800ec54:	f7f1 fc66 	bl	8000524 <__aeabi_i2d>
 800ec58:	4632      	mov	r2, r6
 800ec5a:	463b      	mov	r3, r7
 800ec5c:	f7f1 fccc 	bl	80005f8 <__aeabi_dmul>
 800ec60:	4b88      	ldr	r3, [pc, #544]	; (800ee84 <_dtoa_r+0x654>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	f7f1 fb12 	bl	800028c <__adddf3>
 800ec68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ec6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec70:	9303      	str	r3, [sp, #12]
 800ec72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d15c      	bne.n	800ed32 <_dtoa_r+0x502>
 800ec78:	4b83      	ldr	r3, [pc, #524]	; (800ee88 <_dtoa_r+0x658>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	4639      	mov	r1, r7
 800ec80:	f7f1 fb02 	bl	8000288 <__aeabi_dsub>
 800ec84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec88:	4606      	mov	r6, r0
 800ec8a:	460f      	mov	r7, r1
 800ec8c:	f7f1 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	f040 8296 	bne.w	800f1c2 <_dtoa_r+0x992>
 800ec96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eca0:	4639      	mov	r1, r7
 800eca2:	f7f1 ff1b 	bl	8000adc <__aeabi_dcmplt>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	f040 8288 	bne.w	800f1bc <_dtoa_r+0x98c>
 800ecac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f2c0 8158 	blt.w	800ef6c <_dtoa_r+0x73c>
 800ecbc:	f1ba 0f0e 	cmp.w	sl, #14
 800ecc0:	f300 8154 	bgt.w	800ef6c <_dtoa_r+0x73c>
 800ecc4:	4b6b      	ldr	r3, [pc, #428]	; (800ee74 <_dtoa_r+0x644>)
 800ecc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ecca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ecce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f280 80e3 	bge.w	800ee9c <_dtoa_r+0x66c>
 800ecd6:	9b01      	ldr	r3, [sp, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f300 80df 	bgt.w	800ee9c <_dtoa_r+0x66c>
 800ecde:	f040 826d 	bne.w	800f1bc <_dtoa_r+0x98c>
 800ece2:	4b69      	ldr	r3, [pc, #420]	; (800ee88 <_dtoa_r+0x658>)
 800ece4:	2200      	movs	r2, #0
 800ece6:	4640      	mov	r0, r8
 800ece8:	4649      	mov	r1, r9
 800ecea:	f7f1 fc85 	bl	80005f8 <__aeabi_dmul>
 800ecee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecf2:	f7f1 ff07 	bl	8000b04 <__aeabi_dcmpge>
 800ecf6:	9e01      	ldr	r6, [sp, #4]
 800ecf8:	4637      	mov	r7, r6
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	f040 8243 	bne.w	800f186 <_dtoa_r+0x956>
 800ed00:	9d00      	ldr	r5, [sp, #0]
 800ed02:	2331      	movs	r3, #49	; 0x31
 800ed04:	f805 3b01 	strb.w	r3, [r5], #1
 800ed08:	f10a 0a01 	add.w	sl, sl, #1
 800ed0c:	e23f      	b.n	800f18e <_dtoa_r+0x95e>
 800ed0e:	07f2      	lsls	r2, r6, #31
 800ed10:	d505      	bpl.n	800ed1e <_dtoa_r+0x4ee>
 800ed12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed16:	f7f1 fc6f 	bl	80005f8 <__aeabi_dmul>
 800ed1a:	3501      	adds	r5, #1
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	1076      	asrs	r6, r6, #1
 800ed20:	3708      	adds	r7, #8
 800ed22:	e76c      	b.n	800ebfe <_dtoa_r+0x3ce>
 800ed24:	2502      	movs	r5, #2
 800ed26:	e76f      	b.n	800ec08 <_dtoa_r+0x3d8>
 800ed28:	9b01      	ldr	r3, [sp, #4]
 800ed2a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ed30:	e78d      	b.n	800ec4e <_dtoa_r+0x41e>
 800ed32:	9900      	ldr	r1, [sp, #0]
 800ed34:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ed36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed38:	4b4e      	ldr	r3, [pc, #312]	; (800ee74 <_dtoa_r+0x644>)
 800ed3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed3e:	4401      	add	r1, r0
 800ed40:	9102      	str	r1, [sp, #8]
 800ed42:	9908      	ldr	r1, [sp, #32]
 800ed44:	eeb0 8a47 	vmov.f32	s16, s14
 800ed48:	eef0 8a67 	vmov.f32	s17, s15
 800ed4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed54:	2900      	cmp	r1, #0
 800ed56:	d045      	beq.n	800ede4 <_dtoa_r+0x5b4>
 800ed58:	494c      	ldr	r1, [pc, #304]	; (800ee8c <_dtoa_r+0x65c>)
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	f7f1 fd76 	bl	800084c <__aeabi_ddiv>
 800ed60:	ec53 2b18 	vmov	r2, r3, d8
 800ed64:	f7f1 fa90 	bl	8000288 <__aeabi_dsub>
 800ed68:	9d00      	ldr	r5, [sp, #0]
 800ed6a:	ec41 0b18 	vmov	d8, r0, r1
 800ed6e:	4639      	mov	r1, r7
 800ed70:	4630      	mov	r0, r6
 800ed72:	f7f1 fef1 	bl	8000b58 <__aeabi_d2iz>
 800ed76:	900c      	str	r0, [sp, #48]	; 0x30
 800ed78:	f7f1 fbd4 	bl	8000524 <__aeabi_i2d>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 fa80 	bl	8000288 <__aeabi_dsub>
 800ed88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed8a:	3330      	adds	r3, #48	; 0x30
 800ed8c:	f805 3b01 	strb.w	r3, [r5], #1
 800ed90:	ec53 2b18 	vmov	r2, r3, d8
 800ed94:	4606      	mov	r6, r0
 800ed96:	460f      	mov	r7, r1
 800ed98:	f7f1 fea0 	bl	8000adc <__aeabi_dcmplt>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d165      	bne.n	800ee6c <_dtoa_r+0x63c>
 800eda0:	4632      	mov	r2, r6
 800eda2:	463b      	mov	r3, r7
 800eda4:	4935      	ldr	r1, [pc, #212]	; (800ee7c <_dtoa_r+0x64c>)
 800eda6:	2000      	movs	r0, #0
 800eda8:	f7f1 fa6e 	bl	8000288 <__aeabi_dsub>
 800edac:	ec53 2b18 	vmov	r2, r3, d8
 800edb0:	f7f1 fe94 	bl	8000adc <__aeabi_dcmplt>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	f040 80b9 	bne.w	800ef2c <_dtoa_r+0x6fc>
 800edba:	9b02      	ldr	r3, [sp, #8]
 800edbc:	429d      	cmp	r5, r3
 800edbe:	f43f af75 	beq.w	800ecac <_dtoa_r+0x47c>
 800edc2:	4b2f      	ldr	r3, [pc, #188]	; (800ee80 <_dtoa_r+0x650>)
 800edc4:	ec51 0b18 	vmov	r0, r1, d8
 800edc8:	2200      	movs	r2, #0
 800edca:	f7f1 fc15 	bl	80005f8 <__aeabi_dmul>
 800edce:	4b2c      	ldr	r3, [pc, #176]	; (800ee80 <_dtoa_r+0x650>)
 800edd0:	ec41 0b18 	vmov	d8, r0, r1
 800edd4:	2200      	movs	r2, #0
 800edd6:	4630      	mov	r0, r6
 800edd8:	4639      	mov	r1, r7
 800edda:	f7f1 fc0d 	bl	80005f8 <__aeabi_dmul>
 800edde:	4606      	mov	r6, r0
 800ede0:	460f      	mov	r7, r1
 800ede2:	e7c4      	b.n	800ed6e <_dtoa_r+0x53e>
 800ede4:	ec51 0b17 	vmov	r0, r1, d7
 800ede8:	f7f1 fc06 	bl	80005f8 <__aeabi_dmul>
 800edec:	9b02      	ldr	r3, [sp, #8]
 800edee:	9d00      	ldr	r5, [sp, #0]
 800edf0:	930c      	str	r3, [sp, #48]	; 0x30
 800edf2:	ec41 0b18 	vmov	d8, r0, r1
 800edf6:	4639      	mov	r1, r7
 800edf8:	4630      	mov	r0, r6
 800edfa:	f7f1 fead 	bl	8000b58 <__aeabi_d2iz>
 800edfe:	9011      	str	r0, [sp, #68]	; 0x44
 800ee00:	f7f1 fb90 	bl	8000524 <__aeabi_i2d>
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	4630      	mov	r0, r6
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	f7f1 fa3c 	bl	8000288 <__aeabi_dsub>
 800ee10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee12:	3330      	adds	r3, #48	; 0x30
 800ee14:	f805 3b01 	strb.w	r3, [r5], #1
 800ee18:	9b02      	ldr	r3, [sp, #8]
 800ee1a:	429d      	cmp	r5, r3
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	460f      	mov	r7, r1
 800ee20:	f04f 0200 	mov.w	r2, #0
 800ee24:	d134      	bne.n	800ee90 <_dtoa_r+0x660>
 800ee26:	4b19      	ldr	r3, [pc, #100]	; (800ee8c <_dtoa_r+0x65c>)
 800ee28:	ec51 0b18 	vmov	r0, r1, d8
 800ee2c:	f7f1 fa2e 	bl	800028c <__adddf3>
 800ee30:	4602      	mov	r2, r0
 800ee32:	460b      	mov	r3, r1
 800ee34:	4630      	mov	r0, r6
 800ee36:	4639      	mov	r1, r7
 800ee38:	f7f1 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d175      	bne.n	800ef2c <_dtoa_r+0x6fc>
 800ee40:	ec53 2b18 	vmov	r2, r3, d8
 800ee44:	4911      	ldr	r1, [pc, #68]	; (800ee8c <_dtoa_r+0x65c>)
 800ee46:	2000      	movs	r0, #0
 800ee48:	f7f1 fa1e 	bl	8000288 <__aeabi_dsub>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4630      	mov	r0, r6
 800ee52:	4639      	mov	r1, r7
 800ee54:	f7f1 fe42 	bl	8000adc <__aeabi_dcmplt>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	f43f af27 	beq.w	800ecac <_dtoa_r+0x47c>
 800ee5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee60:	1e6b      	subs	r3, r5, #1
 800ee62:	930c      	str	r3, [sp, #48]	; 0x30
 800ee64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee68:	2b30      	cmp	r3, #48	; 0x30
 800ee6a:	d0f8      	beq.n	800ee5e <_dtoa_r+0x62e>
 800ee6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ee70:	e04a      	b.n	800ef08 <_dtoa_r+0x6d8>
 800ee72:	bf00      	nop
 800ee74:	08011450 	.word	0x08011450
 800ee78:	08011428 	.word	0x08011428
 800ee7c:	3ff00000 	.word	0x3ff00000
 800ee80:	40240000 	.word	0x40240000
 800ee84:	401c0000 	.word	0x401c0000
 800ee88:	40140000 	.word	0x40140000
 800ee8c:	3fe00000 	.word	0x3fe00000
 800ee90:	4baf      	ldr	r3, [pc, #700]	; (800f150 <_dtoa_r+0x920>)
 800ee92:	f7f1 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ee96:	4606      	mov	r6, r0
 800ee98:	460f      	mov	r7, r1
 800ee9a:	e7ac      	b.n	800edf6 <_dtoa_r+0x5c6>
 800ee9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eea0:	9d00      	ldr	r5, [sp, #0]
 800eea2:	4642      	mov	r2, r8
 800eea4:	464b      	mov	r3, r9
 800eea6:	4630      	mov	r0, r6
 800eea8:	4639      	mov	r1, r7
 800eeaa:	f7f1 fccf 	bl	800084c <__aeabi_ddiv>
 800eeae:	f7f1 fe53 	bl	8000b58 <__aeabi_d2iz>
 800eeb2:	9002      	str	r0, [sp, #8]
 800eeb4:	f7f1 fb36 	bl	8000524 <__aeabi_i2d>
 800eeb8:	4642      	mov	r2, r8
 800eeba:	464b      	mov	r3, r9
 800eebc:	f7f1 fb9c 	bl	80005f8 <__aeabi_dmul>
 800eec0:	4602      	mov	r2, r0
 800eec2:	460b      	mov	r3, r1
 800eec4:	4630      	mov	r0, r6
 800eec6:	4639      	mov	r1, r7
 800eec8:	f7f1 f9de 	bl	8000288 <__aeabi_dsub>
 800eecc:	9e02      	ldr	r6, [sp, #8]
 800eece:	9f01      	ldr	r7, [sp, #4]
 800eed0:	3630      	adds	r6, #48	; 0x30
 800eed2:	f805 6b01 	strb.w	r6, [r5], #1
 800eed6:	9e00      	ldr	r6, [sp, #0]
 800eed8:	1bae      	subs	r6, r5, r6
 800eeda:	42b7      	cmp	r7, r6
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	d137      	bne.n	800ef52 <_dtoa_r+0x722>
 800eee2:	f7f1 f9d3 	bl	800028c <__adddf3>
 800eee6:	4642      	mov	r2, r8
 800eee8:	464b      	mov	r3, r9
 800eeea:	4606      	mov	r6, r0
 800eeec:	460f      	mov	r7, r1
 800eeee:	f7f1 fe13 	bl	8000b18 <__aeabi_dcmpgt>
 800eef2:	b9c8      	cbnz	r0, 800ef28 <_dtoa_r+0x6f8>
 800eef4:	4642      	mov	r2, r8
 800eef6:	464b      	mov	r3, r9
 800eef8:	4630      	mov	r0, r6
 800eefa:	4639      	mov	r1, r7
 800eefc:	f7f1 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef00:	b110      	cbz	r0, 800ef08 <_dtoa_r+0x6d8>
 800ef02:	9b02      	ldr	r3, [sp, #8]
 800ef04:	07d9      	lsls	r1, r3, #31
 800ef06:	d40f      	bmi.n	800ef28 <_dtoa_r+0x6f8>
 800ef08:	4620      	mov	r0, r4
 800ef0a:	4659      	mov	r1, fp
 800ef0c:	f000 fcfa 	bl	800f904 <_Bfree>
 800ef10:	2300      	movs	r3, #0
 800ef12:	702b      	strb	r3, [r5, #0]
 800ef14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef16:	f10a 0001 	add.w	r0, sl, #1
 800ef1a:	6018      	str	r0, [r3, #0]
 800ef1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f43f acd8 	beq.w	800e8d4 <_dtoa_r+0xa4>
 800ef24:	601d      	str	r5, [r3, #0]
 800ef26:	e4d5      	b.n	800e8d4 <_dtoa_r+0xa4>
 800ef28:	f8cd a01c 	str.w	sl, [sp, #28]
 800ef2c:	462b      	mov	r3, r5
 800ef2e:	461d      	mov	r5, r3
 800ef30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef34:	2a39      	cmp	r2, #57	; 0x39
 800ef36:	d108      	bne.n	800ef4a <_dtoa_r+0x71a>
 800ef38:	9a00      	ldr	r2, [sp, #0]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d1f7      	bne.n	800ef2e <_dtoa_r+0x6fe>
 800ef3e:	9a07      	ldr	r2, [sp, #28]
 800ef40:	9900      	ldr	r1, [sp, #0]
 800ef42:	3201      	adds	r2, #1
 800ef44:	9207      	str	r2, [sp, #28]
 800ef46:	2230      	movs	r2, #48	; 0x30
 800ef48:	700a      	strb	r2, [r1, #0]
 800ef4a:	781a      	ldrb	r2, [r3, #0]
 800ef4c:	3201      	adds	r2, #1
 800ef4e:	701a      	strb	r2, [r3, #0]
 800ef50:	e78c      	b.n	800ee6c <_dtoa_r+0x63c>
 800ef52:	4b7f      	ldr	r3, [pc, #508]	; (800f150 <_dtoa_r+0x920>)
 800ef54:	2200      	movs	r2, #0
 800ef56:	f7f1 fb4f 	bl	80005f8 <__aeabi_dmul>
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4606      	mov	r6, r0
 800ef60:	460f      	mov	r7, r1
 800ef62:	f7f1 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	d09b      	beq.n	800eea2 <_dtoa_r+0x672>
 800ef6a:	e7cd      	b.n	800ef08 <_dtoa_r+0x6d8>
 800ef6c:	9a08      	ldr	r2, [sp, #32]
 800ef6e:	2a00      	cmp	r2, #0
 800ef70:	f000 80c4 	beq.w	800f0fc <_dtoa_r+0x8cc>
 800ef74:	9a05      	ldr	r2, [sp, #20]
 800ef76:	2a01      	cmp	r2, #1
 800ef78:	f300 80a8 	bgt.w	800f0cc <_dtoa_r+0x89c>
 800ef7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	f000 80a0 	beq.w	800f0c4 <_dtoa_r+0x894>
 800ef84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef88:	9e06      	ldr	r6, [sp, #24]
 800ef8a:	4645      	mov	r5, r8
 800ef8c:	9a04      	ldr	r2, [sp, #16]
 800ef8e:	2101      	movs	r1, #1
 800ef90:	441a      	add	r2, r3
 800ef92:	4620      	mov	r0, r4
 800ef94:	4498      	add	r8, r3
 800ef96:	9204      	str	r2, [sp, #16]
 800ef98:	f000 fd70 	bl	800fa7c <__i2b>
 800ef9c:	4607      	mov	r7, r0
 800ef9e:	2d00      	cmp	r5, #0
 800efa0:	dd0b      	ble.n	800efba <_dtoa_r+0x78a>
 800efa2:	9b04      	ldr	r3, [sp, #16]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	dd08      	ble.n	800efba <_dtoa_r+0x78a>
 800efa8:	42ab      	cmp	r3, r5
 800efaa:	9a04      	ldr	r2, [sp, #16]
 800efac:	bfa8      	it	ge
 800efae:	462b      	movge	r3, r5
 800efb0:	eba8 0803 	sub.w	r8, r8, r3
 800efb4:	1aed      	subs	r5, r5, r3
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	9304      	str	r3, [sp, #16]
 800efba:	9b06      	ldr	r3, [sp, #24]
 800efbc:	b1fb      	cbz	r3, 800effe <_dtoa_r+0x7ce>
 800efbe:	9b08      	ldr	r3, [sp, #32]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f000 809f 	beq.w	800f104 <_dtoa_r+0x8d4>
 800efc6:	2e00      	cmp	r6, #0
 800efc8:	dd11      	ble.n	800efee <_dtoa_r+0x7be>
 800efca:	4639      	mov	r1, r7
 800efcc:	4632      	mov	r2, r6
 800efce:	4620      	mov	r0, r4
 800efd0:	f000 fe10 	bl	800fbf4 <__pow5mult>
 800efd4:	465a      	mov	r2, fp
 800efd6:	4601      	mov	r1, r0
 800efd8:	4607      	mov	r7, r0
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 fd64 	bl	800faa8 <__multiply>
 800efe0:	4659      	mov	r1, fp
 800efe2:	9007      	str	r0, [sp, #28]
 800efe4:	4620      	mov	r0, r4
 800efe6:	f000 fc8d 	bl	800f904 <_Bfree>
 800efea:	9b07      	ldr	r3, [sp, #28]
 800efec:	469b      	mov	fp, r3
 800efee:	9b06      	ldr	r3, [sp, #24]
 800eff0:	1b9a      	subs	r2, r3, r6
 800eff2:	d004      	beq.n	800effe <_dtoa_r+0x7ce>
 800eff4:	4659      	mov	r1, fp
 800eff6:	4620      	mov	r0, r4
 800eff8:	f000 fdfc 	bl	800fbf4 <__pow5mult>
 800effc:	4683      	mov	fp, r0
 800effe:	2101      	movs	r1, #1
 800f000:	4620      	mov	r0, r4
 800f002:	f000 fd3b 	bl	800fa7c <__i2b>
 800f006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f008:	2b00      	cmp	r3, #0
 800f00a:	4606      	mov	r6, r0
 800f00c:	dd7c      	ble.n	800f108 <_dtoa_r+0x8d8>
 800f00e:	461a      	mov	r2, r3
 800f010:	4601      	mov	r1, r0
 800f012:	4620      	mov	r0, r4
 800f014:	f000 fdee 	bl	800fbf4 <__pow5mult>
 800f018:	9b05      	ldr	r3, [sp, #20]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	4606      	mov	r6, r0
 800f01e:	dd76      	ble.n	800f10e <_dtoa_r+0x8de>
 800f020:	2300      	movs	r3, #0
 800f022:	9306      	str	r3, [sp, #24]
 800f024:	6933      	ldr	r3, [r6, #16]
 800f026:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f02a:	6918      	ldr	r0, [r3, #16]
 800f02c:	f000 fcd6 	bl	800f9dc <__hi0bits>
 800f030:	f1c0 0020 	rsb	r0, r0, #32
 800f034:	9b04      	ldr	r3, [sp, #16]
 800f036:	4418      	add	r0, r3
 800f038:	f010 001f 	ands.w	r0, r0, #31
 800f03c:	f000 8086 	beq.w	800f14c <_dtoa_r+0x91c>
 800f040:	f1c0 0320 	rsb	r3, r0, #32
 800f044:	2b04      	cmp	r3, #4
 800f046:	dd7f      	ble.n	800f148 <_dtoa_r+0x918>
 800f048:	f1c0 001c 	rsb	r0, r0, #28
 800f04c:	9b04      	ldr	r3, [sp, #16]
 800f04e:	4403      	add	r3, r0
 800f050:	4480      	add	r8, r0
 800f052:	4405      	add	r5, r0
 800f054:	9304      	str	r3, [sp, #16]
 800f056:	f1b8 0f00 	cmp.w	r8, #0
 800f05a:	dd05      	ble.n	800f068 <_dtoa_r+0x838>
 800f05c:	4659      	mov	r1, fp
 800f05e:	4642      	mov	r2, r8
 800f060:	4620      	mov	r0, r4
 800f062:	f000 fe21 	bl	800fca8 <__lshift>
 800f066:	4683      	mov	fp, r0
 800f068:	9b04      	ldr	r3, [sp, #16]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	dd05      	ble.n	800f07a <_dtoa_r+0x84a>
 800f06e:	4631      	mov	r1, r6
 800f070:	461a      	mov	r2, r3
 800f072:	4620      	mov	r0, r4
 800f074:	f000 fe18 	bl	800fca8 <__lshift>
 800f078:	4606      	mov	r6, r0
 800f07a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d069      	beq.n	800f154 <_dtoa_r+0x924>
 800f080:	4631      	mov	r1, r6
 800f082:	4658      	mov	r0, fp
 800f084:	f000 fe7c 	bl	800fd80 <__mcmp>
 800f088:	2800      	cmp	r0, #0
 800f08a:	da63      	bge.n	800f154 <_dtoa_r+0x924>
 800f08c:	2300      	movs	r3, #0
 800f08e:	4659      	mov	r1, fp
 800f090:	220a      	movs	r2, #10
 800f092:	4620      	mov	r0, r4
 800f094:	f000 fc58 	bl	800f948 <__multadd>
 800f098:	9b08      	ldr	r3, [sp, #32]
 800f09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f09e:	4683      	mov	fp, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 818f 	beq.w	800f3c4 <_dtoa_r+0xb94>
 800f0a6:	4639      	mov	r1, r7
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	220a      	movs	r2, #10
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f000 fc4b 	bl	800f948 <__multadd>
 800f0b2:	f1b9 0f00 	cmp.w	r9, #0
 800f0b6:	4607      	mov	r7, r0
 800f0b8:	f300 808e 	bgt.w	800f1d8 <_dtoa_r+0x9a8>
 800f0bc:	9b05      	ldr	r3, [sp, #20]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	dc50      	bgt.n	800f164 <_dtoa_r+0x934>
 800f0c2:	e089      	b.n	800f1d8 <_dtoa_r+0x9a8>
 800f0c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f0ca:	e75d      	b.n	800ef88 <_dtoa_r+0x758>
 800f0cc:	9b01      	ldr	r3, [sp, #4]
 800f0ce:	1e5e      	subs	r6, r3, #1
 800f0d0:	9b06      	ldr	r3, [sp, #24]
 800f0d2:	42b3      	cmp	r3, r6
 800f0d4:	bfbf      	itttt	lt
 800f0d6:	9b06      	ldrlt	r3, [sp, #24]
 800f0d8:	9606      	strlt	r6, [sp, #24]
 800f0da:	1af2      	sublt	r2, r6, r3
 800f0dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f0de:	bfb6      	itet	lt
 800f0e0:	189b      	addlt	r3, r3, r2
 800f0e2:	1b9e      	subge	r6, r3, r6
 800f0e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f0e6:	9b01      	ldr	r3, [sp, #4]
 800f0e8:	bfb8      	it	lt
 800f0ea:	2600      	movlt	r6, #0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bfb5      	itete	lt
 800f0f0:	eba8 0503 	sublt.w	r5, r8, r3
 800f0f4:	9b01      	ldrge	r3, [sp, #4]
 800f0f6:	2300      	movlt	r3, #0
 800f0f8:	4645      	movge	r5, r8
 800f0fa:	e747      	b.n	800ef8c <_dtoa_r+0x75c>
 800f0fc:	9e06      	ldr	r6, [sp, #24]
 800f0fe:	9f08      	ldr	r7, [sp, #32]
 800f100:	4645      	mov	r5, r8
 800f102:	e74c      	b.n	800ef9e <_dtoa_r+0x76e>
 800f104:	9a06      	ldr	r2, [sp, #24]
 800f106:	e775      	b.n	800eff4 <_dtoa_r+0x7c4>
 800f108:	9b05      	ldr	r3, [sp, #20]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	dc18      	bgt.n	800f140 <_dtoa_r+0x910>
 800f10e:	9b02      	ldr	r3, [sp, #8]
 800f110:	b9b3      	cbnz	r3, 800f140 <_dtoa_r+0x910>
 800f112:	9b03      	ldr	r3, [sp, #12]
 800f114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f118:	b9a3      	cbnz	r3, 800f144 <_dtoa_r+0x914>
 800f11a:	9b03      	ldr	r3, [sp, #12]
 800f11c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f120:	0d1b      	lsrs	r3, r3, #20
 800f122:	051b      	lsls	r3, r3, #20
 800f124:	b12b      	cbz	r3, 800f132 <_dtoa_r+0x902>
 800f126:	9b04      	ldr	r3, [sp, #16]
 800f128:	3301      	adds	r3, #1
 800f12a:	9304      	str	r3, [sp, #16]
 800f12c:	f108 0801 	add.w	r8, r8, #1
 800f130:	2301      	movs	r3, #1
 800f132:	9306      	str	r3, [sp, #24]
 800f134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f136:	2b00      	cmp	r3, #0
 800f138:	f47f af74 	bne.w	800f024 <_dtoa_r+0x7f4>
 800f13c:	2001      	movs	r0, #1
 800f13e:	e779      	b.n	800f034 <_dtoa_r+0x804>
 800f140:	2300      	movs	r3, #0
 800f142:	e7f6      	b.n	800f132 <_dtoa_r+0x902>
 800f144:	9b02      	ldr	r3, [sp, #8]
 800f146:	e7f4      	b.n	800f132 <_dtoa_r+0x902>
 800f148:	d085      	beq.n	800f056 <_dtoa_r+0x826>
 800f14a:	4618      	mov	r0, r3
 800f14c:	301c      	adds	r0, #28
 800f14e:	e77d      	b.n	800f04c <_dtoa_r+0x81c>
 800f150:	40240000 	.word	0x40240000
 800f154:	9b01      	ldr	r3, [sp, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	dc38      	bgt.n	800f1cc <_dtoa_r+0x99c>
 800f15a:	9b05      	ldr	r3, [sp, #20]
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	dd35      	ble.n	800f1cc <_dtoa_r+0x99c>
 800f160:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f164:	f1b9 0f00 	cmp.w	r9, #0
 800f168:	d10d      	bne.n	800f186 <_dtoa_r+0x956>
 800f16a:	4631      	mov	r1, r6
 800f16c:	464b      	mov	r3, r9
 800f16e:	2205      	movs	r2, #5
 800f170:	4620      	mov	r0, r4
 800f172:	f000 fbe9 	bl	800f948 <__multadd>
 800f176:	4601      	mov	r1, r0
 800f178:	4606      	mov	r6, r0
 800f17a:	4658      	mov	r0, fp
 800f17c:	f000 fe00 	bl	800fd80 <__mcmp>
 800f180:	2800      	cmp	r0, #0
 800f182:	f73f adbd 	bgt.w	800ed00 <_dtoa_r+0x4d0>
 800f186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f188:	9d00      	ldr	r5, [sp, #0]
 800f18a:	ea6f 0a03 	mvn.w	sl, r3
 800f18e:	f04f 0800 	mov.w	r8, #0
 800f192:	4631      	mov	r1, r6
 800f194:	4620      	mov	r0, r4
 800f196:	f000 fbb5 	bl	800f904 <_Bfree>
 800f19a:	2f00      	cmp	r7, #0
 800f19c:	f43f aeb4 	beq.w	800ef08 <_dtoa_r+0x6d8>
 800f1a0:	f1b8 0f00 	cmp.w	r8, #0
 800f1a4:	d005      	beq.n	800f1b2 <_dtoa_r+0x982>
 800f1a6:	45b8      	cmp	r8, r7
 800f1a8:	d003      	beq.n	800f1b2 <_dtoa_r+0x982>
 800f1aa:	4641      	mov	r1, r8
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f000 fba9 	bl	800f904 <_Bfree>
 800f1b2:	4639      	mov	r1, r7
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f000 fba5 	bl	800f904 <_Bfree>
 800f1ba:	e6a5      	b.n	800ef08 <_dtoa_r+0x6d8>
 800f1bc:	2600      	movs	r6, #0
 800f1be:	4637      	mov	r7, r6
 800f1c0:	e7e1      	b.n	800f186 <_dtoa_r+0x956>
 800f1c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f1c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f1c8:	4637      	mov	r7, r6
 800f1ca:	e599      	b.n	800ed00 <_dtoa_r+0x4d0>
 800f1cc:	9b08      	ldr	r3, [sp, #32]
 800f1ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f000 80fd 	beq.w	800f3d2 <_dtoa_r+0xba2>
 800f1d8:	2d00      	cmp	r5, #0
 800f1da:	dd05      	ble.n	800f1e8 <_dtoa_r+0x9b8>
 800f1dc:	4639      	mov	r1, r7
 800f1de:	462a      	mov	r2, r5
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f000 fd61 	bl	800fca8 <__lshift>
 800f1e6:	4607      	mov	r7, r0
 800f1e8:	9b06      	ldr	r3, [sp, #24]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d05c      	beq.n	800f2a8 <_dtoa_r+0xa78>
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fb47 	bl	800f884 <_Balloc>
 800f1f6:	4605      	mov	r5, r0
 800f1f8:	b928      	cbnz	r0, 800f206 <_dtoa_r+0x9d6>
 800f1fa:	4b80      	ldr	r3, [pc, #512]	; (800f3fc <_dtoa_r+0xbcc>)
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f202:	f7ff bb2e 	b.w	800e862 <_dtoa_r+0x32>
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	3202      	adds	r2, #2
 800f20a:	0092      	lsls	r2, r2, #2
 800f20c:	f107 010c 	add.w	r1, r7, #12
 800f210:	300c      	adds	r0, #12
 800f212:	f7fe fbed 	bl	800d9f0 <memcpy>
 800f216:	2201      	movs	r2, #1
 800f218:	4629      	mov	r1, r5
 800f21a:	4620      	mov	r0, r4
 800f21c:	f000 fd44 	bl	800fca8 <__lshift>
 800f220:	9b00      	ldr	r3, [sp, #0]
 800f222:	3301      	adds	r3, #1
 800f224:	9301      	str	r3, [sp, #4]
 800f226:	9b00      	ldr	r3, [sp, #0]
 800f228:	444b      	add	r3, r9
 800f22a:	9307      	str	r3, [sp, #28]
 800f22c:	9b02      	ldr	r3, [sp, #8]
 800f22e:	f003 0301 	and.w	r3, r3, #1
 800f232:	46b8      	mov	r8, r7
 800f234:	9306      	str	r3, [sp, #24]
 800f236:	4607      	mov	r7, r0
 800f238:	9b01      	ldr	r3, [sp, #4]
 800f23a:	4631      	mov	r1, r6
 800f23c:	3b01      	subs	r3, #1
 800f23e:	4658      	mov	r0, fp
 800f240:	9302      	str	r3, [sp, #8]
 800f242:	f7ff fa67 	bl	800e714 <quorem>
 800f246:	4603      	mov	r3, r0
 800f248:	3330      	adds	r3, #48	; 0x30
 800f24a:	9004      	str	r0, [sp, #16]
 800f24c:	4641      	mov	r1, r8
 800f24e:	4658      	mov	r0, fp
 800f250:	9308      	str	r3, [sp, #32]
 800f252:	f000 fd95 	bl	800fd80 <__mcmp>
 800f256:	463a      	mov	r2, r7
 800f258:	4681      	mov	r9, r0
 800f25a:	4631      	mov	r1, r6
 800f25c:	4620      	mov	r0, r4
 800f25e:	f000 fdab 	bl	800fdb8 <__mdiff>
 800f262:	68c2      	ldr	r2, [r0, #12]
 800f264:	9b08      	ldr	r3, [sp, #32]
 800f266:	4605      	mov	r5, r0
 800f268:	bb02      	cbnz	r2, 800f2ac <_dtoa_r+0xa7c>
 800f26a:	4601      	mov	r1, r0
 800f26c:	4658      	mov	r0, fp
 800f26e:	f000 fd87 	bl	800fd80 <__mcmp>
 800f272:	9b08      	ldr	r3, [sp, #32]
 800f274:	4602      	mov	r2, r0
 800f276:	4629      	mov	r1, r5
 800f278:	4620      	mov	r0, r4
 800f27a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f27e:	f000 fb41 	bl	800f904 <_Bfree>
 800f282:	9b05      	ldr	r3, [sp, #20]
 800f284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f286:	9d01      	ldr	r5, [sp, #4]
 800f288:	ea43 0102 	orr.w	r1, r3, r2
 800f28c:	9b06      	ldr	r3, [sp, #24]
 800f28e:	430b      	orrs	r3, r1
 800f290:	9b08      	ldr	r3, [sp, #32]
 800f292:	d10d      	bne.n	800f2b0 <_dtoa_r+0xa80>
 800f294:	2b39      	cmp	r3, #57	; 0x39
 800f296:	d029      	beq.n	800f2ec <_dtoa_r+0xabc>
 800f298:	f1b9 0f00 	cmp.w	r9, #0
 800f29c:	dd01      	ble.n	800f2a2 <_dtoa_r+0xa72>
 800f29e:	9b04      	ldr	r3, [sp, #16]
 800f2a0:	3331      	adds	r3, #49	; 0x31
 800f2a2:	9a02      	ldr	r2, [sp, #8]
 800f2a4:	7013      	strb	r3, [r2, #0]
 800f2a6:	e774      	b.n	800f192 <_dtoa_r+0x962>
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	e7b9      	b.n	800f220 <_dtoa_r+0x9f0>
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	e7e2      	b.n	800f276 <_dtoa_r+0xa46>
 800f2b0:	f1b9 0f00 	cmp.w	r9, #0
 800f2b4:	db06      	blt.n	800f2c4 <_dtoa_r+0xa94>
 800f2b6:	9905      	ldr	r1, [sp, #20]
 800f2b8:	ea41 0909 	orr.w	r9, r1, r9
 800f2bc:	9906      	ldr	r1, [sp, #24]
 800f2be:	ea59 0101 	orrs.w	r1, r9, r1
 800f2c2:	d120      	bne.n	800f306 <_dtoa_r+0xad6>
 800f2c4:	2a00      	cmp	r2, #0
 800f2c6:	ddec      	ble.n	800f2a2 <_dtoa_r+0xa72>
 800f2c8:	4659      	mov	r1, fp
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	9301      	str	r3, [sp, #4]
 800f2d0:	f000 fcea 	bl	800fca8 <__lshift>
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	4683      	mov	fp, r0
 800f2d8:	f000 fd52 	bl	800fd80 <__mcmp>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	9b01      	ldr	r3, [sp, #4]
 800f2e0:	dc02      	bgt.n	800f2e8 <_dtoa_r+0xab8>
 800f2e2:	d1de      	bne.n	800f2a2 <_dtoa_r+0xa72>
 800f2e4:	07da      	lsls	r2, r3, #31
 800f2e6:	d5dc      	bpl.n	800f2a2 <_dtoa_r+0xa72>
 800f2e8:	2b39      	cmp	r3, #57	; 0x39
 800f2ea:	d1d8      	bne.n	800f29e <_dtoa_r+0xa6e>
 800f2ec:	9a02      	ldr	r2, [sp, #8]
 800f2ee:	2339      	movs	r3, #57	; 0x39
 800f2f0:	7013      	strb	r3, [r2, #0]
 800f2f2:	462b      	mov	r3, r5
 800f2f4:	461d      	mov	r5, r3
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f2fc:	2a39      	cmp	r2, #57	; 0x39
 800f2fe:	d050      	beq.n	800f3a2 <_dtoa_r+0xb72>
 800f300:	3201      	adds	r2, #1
 800f302:	701a      	strb	r2, [r3, #0]
 800f304:	e745      	b.n	800f192 <_dtoa_r+0x962>
 800f306:	2a00      	cmp	r2, #0
 800f308:	dd03      	ble.n	800f312 <_dtoa_r+0xae2>
 800f30a:	2b39      	cmp	r3, #57	; 0x39
 800f30c:	d0ee      	beq.n	800f2ec <_dtoa_r+0xabc>
 800f30e:	3301      	adds	r3, #1
 800f310:	e7c7      	b.n	800f2a2 <_dtoa_r+0xa72>
 800f312:	9a01      	ldr	r2, [sp, #4]
 800f314:	9907      	ldr	r1, [sp, #28]
 800f316:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f31a:	428a      	cmp	r2, r1
 800f31c:	d02a      	beq.n	800f374 <_dtoa_r+0xb44>
 800f31e:	4659      	mov	r1, fp
 800f320:	2300      	movs	r3, #0
 800f322:	220a      	movs	r2, #10
 800f324:	4620      	mov	r0, r4
 800f326:	f000 fb0f 	bl	800f948 <__multadd>
 800f32a:	45b8      	cmp	r8, r7
 800f32c:	4683      	mov	fp, r0
 800f32e:	f04f 0300 	mov.w	r3, #0
 800f332:	f04f 020a 	mov.w	r2, #10
 800f336:	4641      	mov	r1, r8
 800f338:	4620      	mov	r0, r4
 800f33a:	d107      	bne.n	800f34c <_dtoa_r+0xb1c>
 800f33c:	f000 fb04 	bl	800f948 <__multadd>
 800f340:	4680      	mov	r8, r0
 800f342:	4607      	mov	r7, r0
 800f344:	9b01      	ldr	r3, [sp, #4]
 800f346:	3301      	adds	r3, #1
 800f348:	9301      	str	r3, [sp, #4]
 800f34a:	e775      	b.n	800f238 <_dtoa_r+0xa08>
 800f34c:	f000 fafc 	bl	800f948 <__multadd>
 800f350:	4639      	mov	r1, r7
 800f352:	4680      	mov	r8, r0
 800f354:	2300      	movs	r3, #0
 800f356:	220a      	movs	r2, #10
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 faf5 	bl	800f948 <__multadd>
 800f35e:	4607      	mov	r7, r0
 800f360:	e7f0      	b.n	800f344 <_dtoa_r+0xb14>
 800f362:	f1b9 0f00 	cmp.w	r9, #0
 800f366:	9a00      	ldr	r2, [sp, #0]
 800f368:	bfcc      	ite	gt
 800f36a:	464d      	movgt	r5, r9
 800f36c:	2501      	movle	r5, #1
 800f36e:	4415      	add	r5, r2
 800f370:	f04f 0800 	mov.w	r8, #0
 800f374:	4659      	mov	r1, fp
 800f376:	2201      	movs	r2, #1
 800f378:	4620      	mov	r0, r4
 800f37a:	9301      	str	r3, [sp, #4]
 800f37c:	f000 fc94 	bl	800fca8 <__lshift>
 800f380:	4631      	mov	r1, r6
 800f382:	4683      	mov	fp, r0
 800f384:	f000 fcfc 	bl	800fd80 <__mcmp>
 800f388:	2800      	cmp	r0, #0
 800f38a:	dcb2      	bgt.n	800f2f2 <_dtoa_r+0xac2>
 800f38c:	d102      	bne.n	800f394 <_dtoa_r+0xb64>
 800f38e:	9b01      	ldr	r3, [sp, #4]
 800f390:	07db      	lsls	r3, r3, #31
 800f392:	d4ae      	bmi.n	800f2f2 <_dtoa_r+0xac2>
 800f394:	462b      	mov	r3, r5
 800f396:	461d      	mov	r5, r3
 800f398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f39c:	2a30      	cmp	r2, #48	; 0x30
 800f39e:	d0fa      	beq.n	800f396 <_dtoa_r+0xb66>
 800f3a0:	e6f7      	b.n	800f192 <_dtoa_r+0x962>
 800f3a2:	9a00      	ldr	r2, [sp, #0]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d1a5      	bne.n	800f2f4 <_dtoa_r+0xac4>
 800f3a8:	f10a 0a01 	add.w	sl, sl, #1
 800f3ac:	2331      	movs	r3, #49	; 0x31
 800f3ae:	e779      	b.n	800f2a4 <_dtoa_r+0xa74>
 800f3b0:	4b13      	ldr	r3, [pc, #76]	; (800f400 <_dtoa_r+0xbd0>)
 800f3b2:	f7ff baaf 	b.w	800e914 <_dtoa_r+0xe4>
 800f3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f47f aa86 	bne.w	800e8ca <_dtoa_r+0x9a>
 800f3be:	4b11      	ldr	r3, [pc, #68]	; (800f404 <_dtoa_r+0xbd4>)
 800f3c0:	f7ff baa8 	b.w	800e914 <_dtoa_r+0xe4>
 800f3c4:	f1b9 0f00 	cmp.w	r9, #0
 800f3c8:	dc03      	bgt.n	800f3d2 <_dtoa_r+0xba2>
 800f3ca:	9b05      	ldr	r3, [sp, #20]
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	f73f aec9 	bgt.w	800f164 <_dtoa_r+0x934>
 800f3d2:	9d00      	ldr	r5, [sp, #0]
 800f3d4:	4631      	mov	r1, r6
 800f3d6:	4658      	mov	r0, fp
 800f3d8:	f7ff f99c 	bl	800e714 <quorem>
 800f3dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f3e0:	f805 3b01 	strb.w	r3, [r5], #1
 800f3e4:	9a00      	ldr	r2, [sp, #0]
 800f3e6:	1aaa      	subs	r2, r5, r2
 800f3e8:	4591      	cmp	r9, r2
 800f3ea:	ddba      	ble.n	800f362 <_dtoa_r+0xb32>
 800f3ec:	4659      	mov	r1, fp
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	220a      	movs	r2, #10
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f000 faa8 	bl	800f948 <__multadd>
 800f3f8:	4683      	mov	fp, r0
 800f3fa:	e7eb      	b.n	800f3d4 <_dtoa_r+0xba4>
 800f3fc:	08011354 	.word	0x08011354
 800f400:	08011210 	.word	0x08011210
 800f404:	080112e8 	.word	0x080112e8

0800f408 <__sflush_r>:
 800f408:	898a      	ldrh	r2, [r1, #12]
 800f40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40e:	4605      	mov	r5, r0
 800f410:	0710      	lsls	r0, r2, #28
 800f412:	460c      	mov	r4, r1
 800f414:	d458      	bmi.n	800f4c8 <__sflush_r+0xc0>
 800f416:	684b      	ldr	r3, [r1, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc05      	bgt.n	800f428 <__sflush_r+0x20>
 800f41c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f41e:	2b00      	cmp	r3, #0
 800f420:	dc02      	bgt.n	800f428 <__sflush_r+0x20>
 800f422:	2000      	movs	r0, #0
 800f424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f42a:	2e00      	cmp	r6, #0
 800f42c:	d0f9      	beq.n	800f422 <__sflush_r+0x1a>
 800f42e:	2300      	movs	r3, #0
 800f430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f434:	682f      	ldr	r7, [r5, #0]
 800f436:	602b      	str	r3, [r5, #0]
 800f438:	d032      	beq.n	800f4a0 <__sflush_r+0x98>
 800f43a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f43c:	89a3      	ldrh	r3, [r4, #12]
 800f43e:	075a      	lsls	r2, r3, #29
 800f440:	d505      	bpl.n	800f44e <__sflush_r+0x46>
 800f442:	6863      	ldr	r3, [r4, #4]
 800f444:	1ac0      	subs	r0, r0, r3
 800f446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f448:	b10b      	cbz	r3, 800f44e <__sflush_r+0x46>
 800f44a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f44c:	1ac0      	subs	r0, r0, r3
 800f44e:	2300      	movs	r3, #0
 800f450:	4602      	mov	r2, r0
 800f452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f454:	6a21      	ldr	r1, [r4, #32]
 800f456:	4628      	mov	r0, r5
 800f458:	47b0      	blx	r6
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	d106      	bne.n	800f46e <__sflush_r+0x66>
 800f460:	6829      	ldr	r1, [r5, #0]
 800f462:	291d      	cmp	r1, #29
 800f464:	d82c      	bhi.n	800f4c0 <__sflush_r+0xb8>
 800f466:	4a2a      	ldr	r2, [pc, #168]	; (800f510 <__sflush_r+0x108>)
 800f468:	40ca      	lsrs	r2, r1
 800f46a:	07d6      	lsls	r6, r2, #31
 800f46c:	d528      	bpl.n	800f4c0 <__sflush_r+0xb8>
 800f46e:	2200      	movs	r2, #0
 800f470:	6062      	str	r2, [r4, #4]
 800f472:	04d9      	lsls	r1, r3, #19
 800f474:	6922      	ldr	r2, [r4, #16]
 800f476:	6022      	str	r2, [r4, #0]
 800f478:	d504      	bpl.n	800f484 <__sflush_r+0x7c>
 800f47a:	1c42      	adds	r2, r0, #1
 800f47c:	d101      	bne.n	800f482 <__sflush_r+0x7a>
 800f47e:	682b      	ldr	r3, [r5, #0]
 800f480:	b903      	cbnz	r3, 800f484 <__sflush_r+0x7c>
 800f482:	6560      	str	r0, [r4, #84]	; 0x54
 800f484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f486:	602f      	str	r7, [r5, #0]
 800f488:	2900      	cmp	r1, #0
 800f48a:	d0ca      	beq.n	800f422 <__sflush_r+0x1a>
 800f48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f490:	4299      	cmp	r1, r3
 800f492:	d002      	beq.n	800f49a <__sflush_r+0x92>
 800f494:	4628      	mov	r0, r5
 800f496:	f000 fd83 	bl	800ffa0 <_free_r>
 800f49a:	2000      	movs	r0, #0
 800f49c:	6360      	str	r0, [r4, #52]	; 0x34
 800f49e:	e7c1      	b.n	800f424 <__sflush_r+0x1c>
 800f4a0:	6a21      	ldr	r1, [r4, #32]
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	47b0      	blx	r6
 800f4a8:	1c41      	adds	r1, r0, #1
 800f4aa:	d1c7      	bne.n	800f43c <__sflush_r+0x34>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d0c4      	beq.n	800f43c <__sflush_r+0x34>
 800f4b2:	2b1d      	cmp	r3, #29
 800f4b4:	d001      	beq.n	800f4ba <__sflush_r+0xb2>
 800f4b6:	2b16      	cmp	r3, #22
 800f4b8:	d101      	bne.n	800f4be <__sflush_r+0xb6>
 800f4ba:	602f      	str	r7, [r5, #0]
 800f4bc:	e7b1      	b.n	800f422 <__sflush_r+0x1a>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c4:	81a3      	strh	r3, [r4, #12]
 800f4c6:	e7ad      	b.n	800f424 <__sflush_r+0x1c>
 800f4c8:	690f      	ldr	r7, [r1, #16]
 800f4ca:	2f00      	cmp	r7, #0
 800f4cc:	d0a9      	beq.n	800f422 <__sflush_r+0x1a>
 800f4ce:	0793      	lsls	r3, r2, #30
 800f4d0:	680e      	ldr	r6, [r1, #0]
 800f4d2:	bf08      	it	eq
 800f4d4:	694b      	ldreq	r3, [r1, #20]
 800f4d6:	600f      	str	r7, [r1, #0]
 800f4d8:	bf18      	it	ne
 800f4da:	2300      	movne	r3, #0
 800f4dc:	eba6 0807 	sub.w	r8, r6, r7
 800f4e0:	608b      	str	r3, [r1, #8]
 800f4e2:	f1b8 0f00 	cmp.w	r8, #0
 800f4e6:	dd9c      	ble.n	800f422 <__sflush_r+0x1a>
 800f4e8:	6a21      	ldr	r1, [r4, #32]
 800f4ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4ec:	4643      	mov	r3, r8
 800f4ee:	463a      	mov	r2, r7
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b0      	blx	r6
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	dc06      	bgt.n	800f506 <__sflush_r+0xfe>
 800f4f8:	89a3      	ldrh	r3, [r4, #12]
 800f4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4fe:	81a3      	strh	r3, [r4, #12]
 800f500:	f04f 30ff 	mov.w	r0, #4294967295
 800f504:	e78e      	b.n	800f424 <__sflush_r+0x1c>
 800f506:	4407      	add	r7, r0
 800f508:	eba8 0800 	sub.w	r8, r8, r0
 800f50c:	e7e9      	b.n	800f4e2 <__sflush_r+0xda>
 800f50e:	bf00      	nop
 800f510:	20400001 	.word	0x20400001

0800f514 <_fflush_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	690b      	ldr	r3, [r1, #16]
 800f518:	4605      	mov	r5, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	b913      	cbnz	r3, 800f524 <_fflush_r+0x10>
 800f51e:	2500      	movs	r5, #0
 800f520:	4628      	mov	r0, r5
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	b118      	cbz	r0, 800f52e <_fflush_r+0x1a>
 800f526:	6983      	ldr	r3, [r0, #24]
 800f528:	b90b      	cbnz	r3, 800f52e <_fflush_r+0x1a>
 800f52a:	f000 f887 	bl	800f63c <__sinit>
 800f52e:	4b14      	ldr	r3, [pc, #80]	; (800f580 <_fflush_r+0x6c>)
 800f530:	429c      	cmp	r4, r3
 800f532:	d11b      	bne.n	800f56c <_fflush_r+0x58>
 800f534:	686c      	ldr	r4, [r5, #4]
 800f536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d0ef      	beq.n	800f51e <_fflush_r+0xa>
 800f53e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f540:	07d0      	lsls	r0, r2, #31
 800f542:	d404      	bmi.n	800f54e <_fflush_r+0x3a>
 800f544:	0599      	lsls	r1, r3, #22
 800f546:	d402      	bmi.n	800f54e <_fflush_r+0x3a>
 800f548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f54a:	f000 f92c 	bl	800f7a6 <__retarget_lock_acquire_recursive>
 800f54e:	4628      	mov	r0, r5
 800f550:	4621      	mov	r1, r4
 800f552:	f7ff ff59 	bl	800f408 <__sflush_r>
 800f556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f558:	07da      	lsls	r2, r3, #31
 800f55a:	4605      	mov	r5, r0
 800f55c:	d4e0      	bmi.n	800f520 <_fflush_r+0xc>
 800f55e:	89a3      	ldrh	r3, [r4, #12]
 800f560:	059b      	lsls	r3, r3, #22
 800f562:	d4dd      	bmi.n	800f520 <_fflush_r+0xc>
 800f564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f566:	f000 f91f 	bl	800f7a8 <__retarget_lock_release_recursive>
 800f56a:	e7d9      	b.n	800f520 <_fflush_r+0xc>
 800f56c:	4b05      	ldr	r3, [pc, #20]	; (800f584 <_fflush_r+0x70>)
 800f56e:	429c      	cmp	r4, r3
 800f570:	d101      	bne.n	800f576 <_fflush_r+0x62>
 800f572:	68ac      	ldr	r4, [r5, #8]
 800f574:	e7df      	b.n	800f536 <_fflush_r+0x22>
 800f576:	4b04      	ldr	r3, [pc, #16]	; (800f588 <_fflush_r+0x74>)
 800f578:	429c      	cmp	r4, r3
 800f57a:	bf08      	it	eq
 800f57c:	68ec      	ldreq	r4, [r5, #12]
 800f57e:	e7da      	b.n	800f536 <_fflush_r+0x22>
 800f580:	08011388 	.word	0x08011388
 800f584:	080113a8 	.word	0x080113a8
 800f588:	08011368 	.word	0x08011368

0800f58c <std>:
 800f58c:	2300      	movs	r3, #0
 800f58e:	b510      	push	{r4, lr}
 800f590:	4604      	mov	r4, r0
 800f592:	e9c0 3300 	strd	r3, r3, [r0]
 800f596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f59a:	6083      	str	r3, [r0, #8]
 800f59c:	8181      	strh	r1, [r0, #12]
 800f59e:	6643      	str	r3, [r0, #100]	; 0x64
 800f5a0:	81c2      	strh	r2, [r0, #14]
 800f5a2:	6183      	str	r3, [r0, #24]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	2208      	movs	r2, #8
 800f5a8:	305c      	adds	r0, #92	; 0x5c
 800f5aa:	f7fe fa2f 	bl	800da0c <memset>
 800f5ae:	4b05      	ldr	r3, [pc, #20]	; (800f5c4 <std+0x38>)
 800f5b0:	6263      	str	r3, [r4, #36]	; 0x24
 800f5b2:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <std+0x3c>)
 800f5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5b6:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <std+0x40>)
 800f5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <std+0x44>)
 800f5bc:	6224      	str	r4, [r4, #32]
 800f5be:	6323      	str	r3, [r4, #48]	; 0x30
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	bf00      	nop
 800f5c4:	08010681 	.word	0x08010681
 800f5c8:	080106a3 	.word	0x080106a3
 800f5cc:	080106db 	.word	0x080106db
 800f5d0:	080106ff 	.word	0x080106ff

0800f5d4 <_cleanup_r>:
 800f5d4:	4901      	ldr	r1, [pc, #4]	; (800f5dc <_cleanup_r+0x8>)
 800f5d6:	f000 b8c1 	b.w	800f75c <_fwalk_reent>
 800f5da:	bf00      	nop
 800f5dc:	0800f515 	.word	0x0800f515

0800f5e0 <__sfmoreglue>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	1e4a      	subs	r2, r1, #1
 800f5e4:	2568      	movs	r5, #104	; 0x68
 800f5e6:	4355      	muls	r5, r2
 800f5e8:	460e      	mov	r6, r1
 800f5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5ee:	f000 fd27 	bl	8010040 <_malloc_r>
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	b140      	cbz	r0, 800f608 <__sfmoreglue+0x28>
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	e9c0 1600 	strd	r1, r6, [r0]
 800f5fc:	300c      	adds	r0, #12
 800f5fe:	60a0      	str	r0, [r4, #8]
 800f600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f604:	f7fe fa02 	bl	800da0c <memset>
 800f608:	4620      	mov	r0, r4
 800f60a:	bd70      	pop	{r4, r5, r6, pc}

0800f60c <__sfp_lock_acquire>:
 800f60c:	4801      	ldr	r0, [pc, #4]	; (800f614 <__sfp_lock_acquire+0x8>)
 800f60e:	f000 b8ca 	b.w	800f7a6 <__retarget_lock_acquire_recursive>
 800f612:	bf00      	nop
 800f614:	20002e28 	.word	0x20002e28

0800f618 <__sfp_lock_release>:
 800f618:	4801      	ldr	r0, [pc, #4]	; (800f620 <__sfp_lock_release+0x8>)
 800f61a:	f000 b8c5 	b.w	800f7a8 <__retarget_lock_release_recursive>
 800f61e:	bf00      	nop
 800f620:	20002e28 	.word	0x20002e28

0800f624 <__sinit_lock_acquire>:
 800f624:	4801      	ldr	r0, [pc, #4]	; (800f62c <__sinit_lock_acquire+0x8>)
 800f626:	f000 b8be 	b.w	800f7a6 <__retarget_lock_acquire_recursive>
 800f62a:	bf00      	nop
 800f62c:	20002e23 	.word	0x20002e23

0800f630 <__sinit_lock_release>:
 800f630:	4801      	ldr	r0, [pc, #4]	; (800f638 <__sinit_lock_release+0x8>)
 800f632:	f000 b8b9 	b.w	800f7a8 <__retarget_lock_release_recursive>
 800f636:	bf00      	nop
 800f638:	20002e23 	.word	0x20002e23

0800f63c <__sinit>:
 800f63c:	b510      	push	{r4, lr}
 800f63e:	4604      	mov	r4, r0
 800f640:	f7ff fff0 	bl	800f624 <__sinit_lock_acquire>
 800f644:	69a3      	ldr	r3, [r4, #24]
 800f646:	b11b      	cbz	r3, 800f650 <__sinit+0x14>
 800f648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f64c:	f7ff bff0 	b.w	800f630 <__sinit_lock_release>
 800f650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f654:	6523      	str	r3, [r4, #80]	; 0x50
 800f656:	4b13      	ldr	r3, [pc, #76]	; (800f6a4 <__sinit+0x68>)
 800f658:	4a13      	ldr	r2, [pc, #76]	; (800f6a8 <__sinit+0x6c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f65e:	42a3      	cmp	r3, r4
 800f660:	bf04      	itt	eq
 800f662:	2301      	moveq	r3, #1
 800f664:	61a3      	streq	r3, [r4, #24]
 800f666:	4620      	mov	r0, r4
 800f668:	f000 f820 	bl	800f6ac <__sfp>
 800f66c:	6060      	str	r0, [r4, #4]
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 f81c 	bl	800f6ac <__sfp>
 800f674:	60a0      	str	r0, [r4, #8]
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f818 	bl	800f6ac <__sfp>
 800f67c:	2200      	movs	r2, #0
 800f67e:	60e0      	str	r0, [r4, #12]
 800f680:	2104      	movs	r1, #4
 800f682:	6860      	ldr	r0, [r4, #4]
 800f684:	f7ff ff82 	bl	800f58c <std>
 800f688:	68a0      	ldr	r0, [r4, #8]
 800f68a:	2201      	movs	r2, #1
 800f68c:	2109      	movs	r1, #9
 800f68e:	f7ff ff7d 	bl	800f58c <std>
 800f692:	68e0      	ldr	r0, [r4, #12]
 800f694:	2202      	movs	r2, #2
 800f696:	2112      	movs	r1, #18
 800f698:	f7ff ff78 	bl	800f58c <std>
 800f69c:	2301      	movs	r3, #1
 800f69e:	61a3      	str	r3, [r4, #24]
 800f6a0:	e7d2      	b.n	800f648 <__sinit+0xc>
 800f6a2:	bf00      	nop
 800f6a4:	080111fc 	.word	0x080111fc
 800f6a8:	0800f5d5 	.word	0x0800f5d5

0800f6ac <__sfp>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	4607      	mov	r7, r0
 800f6b0:	f7ff ffac 	bl	800f60c <__sfp_lock_acquire>
 800f6b4:	4b1e      	ldr	r3, [pc, #120]	; (800f730 <__sfp+0x84>)
 800f6b6:	681e      	ldr	r6, [r3, #0]
 800f6b8:	69b3      	ldr	r3, [r6, #24]
 800f6ba:	b913      	cbnz	r3, 800f6c2 <__sfp+0x16>
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f7ff ffbd 	bl	800f63c <__sinit>
 800f6c2:	3648      	adds	r6, #72	; 0x48
 800f6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	d503      	bpl.n	800f6d4 <__sfp+0x28>
 800f6cc:	6833      	ldr	r3, [r6, #0]
 800f6ce:	b30b      	cbz	r3, 800f714 <__sfp+0x68>
 800f6d0:	6836      	ldr	r6, [r6, #0]
 800f6d2:	e7f7      	b.n	800f6c4 <__sfp+0x18>
 800f6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f6d8:	b9d5      	cbnz	r5, 800f710 <__sfp+0x64>
 800f6da:	4b16      	ldr	r3, [pc, #88]	; (800f734 <__sfp+0x88>)
 800f6dc:	60e3      	str	r3, [r4, #12]
 800f6de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f6e2:	6665      	str	r5, [r4, #100]	; 0x64
 800f6e4:	f000 f85e 	bl	800f7a4 <__retarget_lock_init_recursive>
 800f6e8:	f7ff ff96 	bl	800f618 <__sfp_lock_release>
 800f6ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f6f4:	6025      	str	r5, [r4, #0]
 800f6f6:	61a5      	str	r5, [r4, #24]
 800f6f8:	2208      	movs	r2, #8
 800f6fa:	4629      	mov	r1, r5
 800f6fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f700:	f7fe f984 	bl	800da0c <memset>
 800f704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f70c:	4620      	mov	r0, r4
 800f70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f710:	3468      	adds	r4, #104	; 0x68
 800f712:	e7d9      	b.n	800f6c8 <__sfp+0x1c>
 800f714:	2104      	movs	r1, #4
 800f716:	4638      	mov	r0, r7
 800f718:	f7ff ff62 	bl	800f5e0 <__sfmoreglue>
 800f71c:	4604      	mov	r4, r0
 800f71e:	6030      	str	r0, [r6, #0]
 800f720:	2800      	cmp	r0, #0
 800f722:	d1d5      	bne.n	800f6d0 <__sfp+0x24>
 800f724:	f7ff ff78 	bl	800f618 <__sfp_lock_release>
 800f728:	230c      	movs	r3, #12
 800f72a:	603b      	str	r3, [r7, #0]
 800f72c:	e7ee      	b.n	800f70c <__sfp+0x60>
 800f72e:	bf00      	nop
 800f730:	080111fc 	.word	0x080111fc
 800f734:	ffff0001 	.word	0xffff0001

0800f738 <fiprintf>:
 800f738:	b40e      	push	{r1, r2, r3}
 800f73a:	b503      	push	{r0, r1, lr}
 800f73c:	4601      	mov	r1, r0
 800f73e:	ab03      	add	r3, sp, #12
 800f740:	4805      	ldr	r0, [pc, #20]	; (800f758 <fiprintf+0x20>)
 800f742:	f853 2b04 	ldr.w	r2, [r3], #4
 800f746:	6800      	ldr	r0, [r0, #0]
 800f748:	9301      	str	r3, [sp, #4]
 800f74a:	f000 fe59 	bl	8010400 <_vfiprintf_r>
 800f74e:	b002      	add	sp, #8
 800f750:	f85d eb04 	ldr.w	lr, [sp], #4
 800f754:	b003      	add	sp, #12
 800f756:	4770      	bx	lr
 800f758:	2000007c 	.word	0x2000007c

0800f75c <_fwalk_reent>:
 800f75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f760:	4606      	mov	r6, r0
 800f762:	4688      	mov	r8, r1
 800f764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f768:	2700      	movs	r7, #0
 800f76a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f76e:	f1b9 0901 	subs.w	r9, r9, #1
 800f772:	d505      	bpl.n	800f780 <_fwalk_reent+0x24>
 800f774:	6824      	ldr	r4, [r4, #0]
 800f776:	2c00      	cmp	r4, #0
 800f778:	d1f7      	bne.n	800f76a <_fwalk_reent+0xe>
 800f77a:	4638      	mov	r0, r7
 800f77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f780:	89ab      	ldrh	r3, [r5, #12]
 800f782:	2b01      	cmp	r3, #1
 800f784:	d907      	bls.n	800f796 <_fwalk_reent+0x3a>
 800f786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f78a:	3301      	adds	r3, #1
 800f78c:	d003      	beq.n	800f796 <_fwalk_reent+0x3a>
 800f78e:	4629      	mov	r1, r5
 800f790:	4630      	mov	r0, r6
 800f792:	47c0      	blx	r8
 800f794:	4307      	orrs	r7, r0
 800f796:	3568      	adds	r5, #104	; 0x68
 800f798:	e7e9      	b.n	800f76e <_fwalk_reent+0x12>
	...

0800f79c <_localeconv_r>:
 800f79c:	4800      	ldr	r0, [pc, #0]	; (800f7a0 <_localeconv_r+0x4>)
 800f79e:	4770      	bx	lr
 800f7a0:	200001d0 	.word	0x200001d0

0800f7a4 <__retarget_lock_init_recursive>:
 800f7a4:	4770      	bx	lr

0800f7a6 <__retarget_lock_acquire_recursive>:
 800f7a6:	4770      	bx	lr

0800f7a8 <__retarget_lock_release_recursive>:
 800f7a8:	4770      	bx	lr

0800f7aa <__swhatbuf_r>:
 800f7aa:	b570      	push	{r4, r5, r6, lr}
 800f7ac:	460e      	mov	r6, r1
 800f7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b2:	2900      	cmp	r1, #0
 800f7b4:	b096      	sub	sp, #88	; 0x58
 800f7b6:	4614      	mov	r4, r2
 800f7b8:	461d      	mov	r5, r3
 800f7ba:	da07      	bge.n	800f7cc <__swhatbuf_r+0x22>
 800f7bc:	2300      	movs	r3, #0
 800f7be:	602b      	str	r3, [r5, #0]
 800f7c0:	89b3      	ldrh	r3, [r6, #12]
 800f7c2:	061a      	lsls	r2, r3, #24
 800f7c4:	d410      	bmi.n	800f7e8 <__swhatbuf_r+0x3e>
 800f7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7ca:	e00e      	b.n	800f7ea <__swhatbuf_r+0x40>
 800f7cc:	466a      	mov	r2, sp
 800f7ce:	f000 ffc5 	bl	801075c <_fstat_r>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	dbf2      	blt.n	800f7bc <__swhatbuf_r+0x12>
 800f7d6:	9a01      	ldr	r2, [sp, #4]
 800f7d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f7dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f7e0:	425a      	negs	r2, r3
 800f7e2:	415a      	adcs	r2, r3
 800f7e4:	602a      	str	r2, [r5, #0]
 800f7e6:	e7ee      	b.n	800f7c6 <__swhatbuf_r+0x1c>
 800f7e8:	2340      	movs	r3, #64	; 0x40
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	b016      	add	sp, #88	; 0x58
 800f7f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f7f4 <__smakebuf_r>:
 800f7f4:	898b      	ldrh	r3, [r1, #12]
 800f7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7f8:	079d      	lsls	r5, r3, #30
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460c      	mov	r4, r1
 800f7fe:	d507      	bpl.n	800f810 <__smakebuf_r+0x1c>
 800f800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	6123      	str	r3, [r4, #16]
 800f808:	2301      	movs	r3, #1
 800f80a:	6163      	str	r3, [r4, #20]
 800f80c:	b002      	add	sp, #8
 800f80e:	bd70      	pop	{r4, r5, r6, pc}
 800f810:	ab01      	add	r3, sp, #4
 800f812:	466a      	mov	r2, sp
 800f814:	f7ff ffc9 	bl	800f7aa <__swhatbuf_r>
 800f818:	9900      	ldr	r1, [sp, #0]
 800f81a:	4605      	mov	r5, r0
 800f81c:	4630      	mov	r0, r6
 800f81e:	f000 fc0f 	bl	8010040 <_malloc_r>
 800f822:	b948      	cbnz	r0, 800f838 <__smakebuf_r+0x44>
 800f824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f828:	059a      	lsls	r2, r3, #22
 800f82a:	d4ef      	bmi.n	800f80c <__smakebuf_r+0x18>
 800f82c:	f023 0303 	bic.w	r3, r3, #3
 800f830:	f043 0302 	orr.w	r3, r3, #2
 800f834:	81a3      	strh	r3, [r4, #12]
 800f836:	e7e3      	b.n	800f800 <__smakebuf_r+0xc>
 800f838:	4b0d      	ldr	r3, [pc, #52]	; (800f870 <__smakebuf_r+0x7c>)
 800f83a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f83c:	89a3      	ldrh	r3, [r4, #12]
 800f83e:	6020      	str	r0, [r4, #0]
 800f840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f844:	81a3      	strh	r3, [r4, #12]
 800f846:	9b00      	ldr	r3, [sp, #0]
 800f848:	6163      	str	r3, [r4, #20]
 800f84a:	9b01      	ldr	r3, [sp, #4]
 800f84c:	6120      	str	r0, [r4, #16]
 800f84e:	b15b      	cbz	r3, 800f868 <__smakebuf_r+0x74>
 800f850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f854:	4630      	mov	r0, r6
 800f856:	f000 ff93 	bl	8010780 <_isatty_r>
 800f85a:	b128      	cbz	r0, 800f868 <__smakebuf_r+0x74>
 800f85c:	89a3      	ldrh	r3, [r4, #12]
 800f85e:	f023 0303 	bic.w	r3, r3, #3
 800f862:	f043 0301 	orr.w	r3, r3, #1
 800f866:	81a3      	strh	r3, [r4, #12]
 800f868:	89a0      	ldrh	r0, [r4, #12]
 800f86a:	4305      	orrs	r5, r0
 800f86c:	81a5      	strh	r5, [r4, #12]
 800f86e:	e7cd      	b.n	800f80c <__smakebuf_r+0x18>
 800f870:	0800f5d5 	.word	0x0800f5d5

0800f874 <malloc>:
 800f874:	4b02      	ldr	r3, [pc, #8]	; (800f880 <malloc+0xc>)
 800f876:	4601      	mov	r1, r0
 800f878:	6818      	ldr	r0, [r3, #0]
 800f87a:	f000 bbe1 	b.w	8010040 <_malloc_r>
 800f87e:	bf00      	nop
 800f880:	2000007c 	.word	0x2000007c

0800f884 <_Balloc>:
 800f884:	b570      	push	{r4, r5, r6, lr}
 800f886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f888:	4604      	mov	r4, r0
 800f88a:	460d      	mov	r5, r1
 800f88c:	b976      	cbnz	r6, 800f8ac <_Balloc+0x28>
 800f88e:	2010      	movs	r0, #16
 800f890:	f7ff fff0 	bl	800f874 <malloc>
 800f894:	4602      	mov	r2, r0
 800f896:	6260      	str	r0, [r4, #36]	; 0x24
 800f898:	b920      	cbnz	r0, 800f8a4 <_Balloc+0x20>
 800f89a:	4b18      	ldr	r3, [pc, #96]	; (800f8fc <_Balloc+0x78>)
 800f89c:	4818      	ldr	r0, [pc, #96]	; (800f900 <_Balloc+0x7c>)
 800f89e:	2166      	movs	r1, #102	; 0x66
 800f8a0:	f7fe ff1a 	bl	800e6d8 <__assert_func>
 800f8a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8a8:	6006      	str	r6, [r0, #0]
 800f8aa:	60c6      	str	r6, [r0, #12]
 800f8ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8ae:	68f3      	ldr	r3, [r6, #12]
 800f8b0:	b183      	cbz	r3, 800f8d4 <_Balloc+0x50>
 800f8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8ba:	b9b8      	cbnz	r0, 800f8ec <_Balloc+0x68>
 800f8bc:	2101      	movs	r1, #1
 800f8be:	fa01 f605 	lsl.w	r6, r1, r5
 800f8c2:	1d72      	adds	r2, r6, #5
 800f8c4:	0092      	lsls	r2, r2, #2
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 fb5a 	bl	800ff80 <_calloc_r>
 800f8cc:	b160      	cbz	r0, 800f8e8 <_Balloc+0x64>
 800f8ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8d2:	e00e      	b.n	800f8f2 <_Balloc+0x6e>
 800f8d4:	2221      	movs	r2, #33	; 0x21
 800f8d6:	2104      	movs	r1, #4
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 fb51 	bl	800ff80 <_calloc_r>
 800f8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8e0:	60f0      	str	r0, [r6, #12]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1e4      	bne.n	800f8b2 <_Balloc+0x2e>
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	bd70      	pop	{r4, r5, r6, pc}
 800f8ec:	6802      	ldr	r2, [r0, #0]
 800f8ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8f8:	e7f7      	b.n	800f8ea <_Balloc+0x66>
 800f8fa:	bf00      	nop
 800f8fc:	08011234 	.word	0x08011234
 800f900:	080113c8 	.word	0x080113c8

0800f904 <_Bfree>:
 800f904:	b570      	push	{r4, r5, r6, lr}
 800f906:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f908:	4605      	mov	r5, r0
 800f90a:	460c      	mov	r4, r1
 800f90c:	b976      	cbnz	r6, 800f92c <_Bfree+0x28>
 800f90e:	2010      	movs	r0, #16
 800f910:	f7ff ffb0 	bl	800f874 <malloc>
 800f914:	4602      	mov	r2, r0
 800f916:	6268      	str	r0, [r5, #36]	; 0x24
 800f918:	b920      	cbnz	r0, 800f924 <_Bfree+0x20>
 800f91a:	4b09      	ldr	r3, [pc, #36]	; (800f940 <_Bfree+0x3c>)
 800f91c:	4809      	ldr	r0, [pc, #36]	; (800f944 <_Bfree+0x40>)
 800f91e:	218a      	movs	r1, #138	; 0x8a
 800f920:	f7fe feda 	bl	800e6d8 <__assert_func>
 800f924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f928:	6006      	str	r6, [r0, #0]
 800f92a:	60c6      	str	r6, [r0, #12]
 800f92c:	b13c      	cbz	r4, 800f93e <_Bfree+0x3a>
 800f92e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f930:	6862      	ldr	r2, [r4, #4]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f938:	6021      	str	r1, [r4, #0]
 800f93a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f93e:	bd70      	pop	{r4, r5, r6, pc}
 800f940:	08011234 	.word	0x08011234
 800f944:	080113c8 	.word	0x080113c8

0800f948 <__multadd>:
 800f948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f94c:	690e      	ldr	r6, [r1, #16]
 800f94e:	4607      	mov	r7, r0
 800f950:	4698      	mov	r8, r3
 800f952:	460c      	mov	r4, r1
 800f954:	f101 0014 	add.w	r0, r1, #20
 800f958:	2300      	movs	r3, #0
 800f95a:	6805      	ldr	r5, [r0, #0]
 800f95c:	b2a9      	uxth	r1, r5
 800f95e:	fb02 8101 	mla	r1, r2, r1, r8
 800f962:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f966:	0c2d      	lsrs	r5, r5, #16
 800f968:	fb02 c505 	mla	r5, r2, r5, ip
 800f96c:	b289      	uxth	r1, r1
 800f96e:	3301      	adds	r3, #1
 800f970:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f974:	429e      	cmp	r6, r3
 800f976:	f840 1b04 	str.w	r1, [r0], #4
 800f97a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f97e:	dcec      	bgt.n	800f95a <__multadd+0x12>
 800f980:	f1b8 0f00 	cmp.w	r8, #0
 800f984:	d022      	beq.n	800f9cc <__multadd+0x84>
 800f986:	68a3      	ldr	r3, [r4, #8]
 800f988:	42b3      	cmp	r3, r6
 800f98a:	dc19      	bgt.n	800f9c0 <__multadd+0x78>
 800f98c:	6861      	ldr	r1, [r4, #4]
 800f98e:	4638      	mov	r0, r7
 800f990:	3101      	adds	r1, #1
 800f992:	f7ff ff77 	bl	800f884 <_Balloc>
 800f996:	4605      	mov	r5, r0
 800f998:	b928      	cbnz	r0, 800f9a6 <__multadd+0x5e>
 800f99a:	4602      	mov	r2, r0
 800f99c:	4b0d      	ldr	r3, [pc, #52]	; (800f9d4 <__multadd+0x8c>)
 800f99e:	480e      	ldr	r0, [pc, #56]	; (800f9d8 <__multadd+0x90>)
 800f9a0:	21b5      	movs	r1, #181	; 0xb5
 800f9a2:	f7fe fe99 	bl	800e6d8 <__assert_func>
 800f9a6:	6922      	ldr	r2, [r4, #16]
 800f9a8:	3202      	adds	r2, #2
 800f9aa:	f104 010c 	add.w	r1, r4, #12
 800f9ae:	0092      	lsls	r2, r2, #2
 800f9b0:	300c      	adds	r0, #12
 800f9b2:	f7fe f81d 	bl	800d9f0 <memcpy>
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f7ff ffa3 	bl	800f904 <_Bfree>
 800f9be:	462c      	mov	r4, r5
 800f9c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f9c4:	3601      	adds	r6, #1
 800f9c6:	f8c3 8014 	str.w	r8, [r3, #20]
 800f9ca:	6126      	str	r6, [r4, #16]
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d2:	bf00      	nop
 800f9d4:	08011354 	.word	0x08011354
 800f9d8:	080113c8 	.word	0x080113c8

0800f9dc <__hi0bits>:
 800f9dc:	0c03      	lsrs	r3, r0, #16
 800f9de:	041b      	lsls	r3, r3, #16
 800f9e0:	b9d3      	cbnz	r3, 800fa18 <__hi0bits+0x3c>
 800f9e2:	0400      	lsls	r0, r0, #16
 800f9e4:	2310      	movs	r3, #16
 800f9e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f9ea:	bf04      	itt	eq
 800f9ec:	0200      	lsleq	r0, r0, #8
 800f9ee:	3308      	addeq	r3, #8
 800f9f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f9f4:	bf04      	itt	eq
 800f9f6:	0100      	lsleq	r0, r0, #4
 800f9f8:	3304      	addeq	r3, #4
 800f9fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f9fe:	bf04      	itt	eq
 800fa00:	0080      	lsleq	r0, r0, #2
 800fa02:	3302      	addeq	r3, #2
 800fa04:	2800      	cmp	r0, #0
 800fa06:	db05      	blt.n	800fa14 <__hi0bits+0x38>
 800fa08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fa0c:	f103 0301 	add.w	r3, r3, #1
 800fa10:	bf08      	it	eq
 800fa12:	2320      	moveq	r3, #32
 800fa14:	4618      	mov	r0, r3
 800fa16:	4770      	bx	lr
 800fa18:	2300      	movs	r3, #0
 800fa1a:	e7e4      	b.n	800f9e6 <__hi0bits+0xa>

0800fa1c <__lo0bits>:
 800fa1c:	6803      	ldr	r3, [r0, #0]
 800fa1e:	f013 0207 	ands.w	r2, r3, #7
 800fa22:	4601      	mov	r1, r0
 800fa24:	d00b      	beq.n	800fa3e <__lo0bits+0x22>
 800fa26:	07da      	lsls	r2, r3, #31
 800fa28:	d424      	bmi.n	800fa74 <__lo0bits+0x58>
 800fa2a:	0798      	lsls	r0, r3, #30
 800fa2c:	bf49      	itett	mi
 800fa2e:	085b      	lsrmi	r3, r3, #1
 800fa30:	089b      	lsrpl	r3, r3, #2
 800fa32:	2001      	movmi	r0, #1
 800fa34:	600b      	strmi	r3, [r1, #0]
 800fa36:	bf5c      	itt	pl
 800fa38:	600b      	strpl	r3, [r1, #0]
 800fa3a:	2002      	movpl	r0, #2
 800fa3c:	4770      	bx	lr
 800fa3e:	b298      	uxth	r0, r3
 800fa40:	b9b0      	cbnz	r0, 800fa70 <__lo0bits+0x54>
 800fa42:	0c1b      	lsrs	r3, r3, #16
 800fa44:	2010      	movs	r0, #16
 800fa46:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fa4a:	bf04      	itt	eq
 800fa4c:	0a1b      	lsreq	r3, r3, #8
 800fa4e:	3008      	addeq	r0, #8
 800fa50:	071a      	lsls	r2, r3, #28
 800fa52:	bf04      	itt	eq
 800fa54:	091b      	lsreq	r3, r3, #4
 800fa56:	3004      	addeq	r0, #4
 800fa58:	079a      	lsls	r2, r3, #30
 800fa5a:	bf04      	itt	eq
 800fa5c:	089b      	lsreq	r3, r3, #2
 800fa5e:	3002      	addeq	r0, #2
 800fa60:	07da      	lsls	r2, r3, #31
 800fa62:	d403      	bmi.n	800fa6c <__lo0bits+0x50>
 800fa64:	085b      	lsrs	r3, r3, #1
 800fa66:	f100 0001 	add.w	r0, r0, #1
 800fa6a:	d005      	beq.n	800fa78 <__lo0bits+0x5c>
 800fa6c:	600b      	str	r3, [r1, #0]
 800fa6e:	4770      	bx	lr
 800fa70:	4610      	mov	r0, r2
 800fa72:	e7e8      	b.n	800fa46 <__lo0bits+0x2a>
 800fa74:	2000      	movs	r0, #0
 800fa76:	4770      	bx	lr
 800fa78:	2020      	movs	r0, #32
 800fa7a:	4770      	bx	lr

0800fa7c <__i2b>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	460c      	mov	r4, r1
 800fa80:	2101      	movs	r1, #1
 800fa82:	f7ff feff 	bl	800f884 <_Balloc>
 800fa86:	4602      	mov	r2, r0
 800fa88:	b928      	cbnz	r0, 800fa96 <__i2b+0x1a>
 800fa8a:	4b05      	ldr	r3, [pc, #20]	; (800faa0 <__i2b+0x24>)
 800fa8c:	4805      	ldr	r0, [pc, #20]	; (800faa4 <__i2b+0x28>)
 800fa8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fa92:	f7fe fe21 	bl	800e6d8 <__assert_func>
 800fa96:	2301      	movs	r3, #1
 800fa98:	6144      	str	r4, [r0, #20]
 800fa9a:	6103      	str	r3, [r0, #16]
 800fa9c:	bd10      	pop	{r4, pc}
 800fa9e:	bf00      	nop
 800faa0:	08011354 	.word	0x08011354
 800faa4:	080113c8 	.word	0x080113c8

0800faa8 <__multiply>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	4614      	mov	r4, r2
 800faae:	690a      	ldr	r2, [r1, #16]
 800fab0:	6923      	ldr	r3, [r4, #16]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	bfb8      	it	lt
 800fab6:	460b      	movlt	r3, r1
 800fab8:	460d      	mov	r5, r1
 800faba:	bfbc      	itt	lt
 800fabc:	4625      	movlt	r5, r4
 800fabe:	461c      	movlt	r4, r3
 800fac0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fac4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fac8:	68ab      	ldr	r3, [r5, #8]
 800faca:	6869      	ldr	r1, [r5, #4]
 800facc:	eb0a 0709 	add.w	r7, sl, r9
 800fad0:	42bb      	cmp	r3, r7
 800fad2:	b085      	sub	sp, #20
 800fad4:	bfb8      	it	lt
 800fad6:	3101      	addlt	r1, #1
 800fad8:	f7ff fed4 	bl	800f884 <_Balloc>
 800fadc:	b930      	cbnz	r0, 800faec <__multiply+0x44>
 800fade:	4602      	mov	r2, r0
 800fae0:	4b42      	ldr	r3, [pc, #264]	; (800fbec <__multiply+0x144>)
 800fae2:	4843      	ldr	r0, [pc, #268]	; (800fbf0 <__multiply+0x148>)
 800fae4:	f240 115d 	movw	r1, #349	; 0x15d
 800fae8:	f7fe fdf6 	bl	800e6d8 <__assert_func>
 800faec:	f100 0614 	add.w	r6, r0, #20
 800faf0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800faf4:	4633      	mov	r3, r6
 800faf6:	2200      	movs	r2, #0
 800faf8:	4543      	cmp	r3, r8
 800fafa:	d31e      	bcc.n	800fb3a <__multiply+0x92>
 800fafc:	f105 0c14 	add.w	ip, r5, #20
 800fb00:	f104 0314 	add.w	r3, r4, #20
 800fb04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fb08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fb0c:	9202      	str	r2, [sp, #8]
 800fb0e:	ebac 0205 	sub.w	r2, ip, r5
 800fb12:	3a15      	subs	r2, #21
 800fb14:	f022 0203 	bic.w	r2, r2, #3
 800fb18:	3204      	adds	r2, #4
 800fb1a:	f105 0115 	add.w	r1, r5, #21
 800fb1e:	458c      	cmp	ip, r1
 800fb20:	bf38      	it	cc
 800fb22:	2204      	movcc	r2, #4
 800fb24:	9201      	str	r2, [sp, #4]
 800fb26:	9a02      	ldr	r2, [sp, #8]
 800fb28:	9303      	str	r3, [sp, #12]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d808      	bhi.n	800fb40 <__multiply+0x98>
 800fb2e:	2f00      	cmp	r7, #0
 800fb30:	dc55      	bgt.n	800fbde <__multiply+0x136>
 800fb32:	6107      	str	r7, [r0, #16]
 800fb34:	b005      	add	sp, #20
 800fb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3a:	f843 2b04 	str.w	r2, [r3], #4
 800fb3e:	e7db      	b.n	800faf8 <__multiply+0x50>
 800fb40:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb44:	f1ba 0f00 	cmp.w	sl, #0
 800fb48:	d020      	beq.n	800fb8c <__multiply+0xe4>
 800fb4a:	f105 0e14 	add.w	lr, r5, #20
 800fb4e:	46b1      	mov	r9, r6
 800fb50:	2200      	movs	r2, #0
 800fb52:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fb56:	f8d9 b000 	ldr.w	fp, [r9]
 800fb5a:	b2a1      	uxth	r1, r4
 800fb5c:	fa1f fb8b 	uxth.w	fp, fp
 800fb60:	fb0a b101 	mla	r1, sl, r1, fp
 800fb64:	4411      	add	r1, r2
 800fb66:	f8d9 2000 	ldr.w	r2, [r9]
 800fb6a:	0c24      	lsrs	r4, r4, #16
 800fb6c:	0c12      	lsrs	r2, r2, #16
 800fb6e:	fb0a 2404 	mla	r4, sl, r4, r2
 800fb72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fb76:	b289      	uxth	r1, r1
 800fb78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fb7c:	45f4      	cmp	ip, lr
 800fb7e:	f849 1b04 	str.w	r1, [r9], #4
 800fb82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fb86:	d8e4      	bhi.n	800fb52 <__multiply+0xaa>
 800fb88:	9901      	ldr	r1, [sp, #4]
 800fb8a:	5072      	str	r2, [r6, r1]
 800fb8c:	9a03      	ldr	r2, [sp, #12]
 800fb8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb92:	3304      	adds	r3, #4
 800fb94:	f1b9 0f00 	cmp.w	r9, #0
 800fb98:	d01f      	beq.n	800fbda <__multiply+0x132>
 800fb9a:	6834      	ldr	r4, [r6, #0]
 800fb9c:	f105 0114 	add.w	r1, r5, #20
 800fba0:	46b6      	mov	lr, r6
 800fba2:	f04f 0a00 	mov.w	sl, #0
 800fba6:	880a      	ldrh	r2, [r1, #0]
 800fba8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fbac:	fb09 b202 	mla	r2, r9, r2, fp
 800fbb0:	4492      	add	sl, r2
 800fbb2:	b2a4      	uxth	r4, r4
 800fbb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fbb8:	f84e 4b04 	str.w	r4, [lr], #4
 800fbbc:	f851 4b04 	ldr.w	r4, [r1], #4
 800fbc0:	f8be 2000 	ldrh.w	r2, [lr]
 800fbc4:	0c24      	lsrs	r4, r4, #16
 800fbc6:	fb09 2404 	mla	r4, r9, r4, r2
 800fbca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fbce:	458c      	cmp	ip, r1
 800fbd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fbd4:	d8e7      	bhi.n	800fba6 <__multiply+0xfe>
 800fbd6:	9a01      	ldr	r2, [sp, #4]
 800fbd8:	50b4      	str	r4, [r6, r2]
 800fbda:	3604      	adds	r6, #4
 800fbdc:	e7a3      	b.n	800fb26 <__multiply+0x7e>
 800fbde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d1a5      	bne.n	800fb32 <__multiply+0x8a>
 800fbe6:	3f01      	subs	r7, #1
 800fbe8:	e7a1      	b.n	800fb2e <__multiply+0x86>
 800fbea:	bf00      	nop
 800fbec:	08011354 	.word	0x08011354
 800fbf0:	080113c8 	.word	0x080113c8

0800fbf4 <__pow5mult>:
 800fbf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbf8:	4615      	mov	r5, r2
 800fbfa:	f012 0203 	ands.w	r2, r2, #3
 800fbfe:	4606      	mov	r6, r0
 800fc00:	460f      	mov	r7, r1
 800fc02:	d007      	beq.n	800fc14 <__pow5mult+0x20>
 800fc04:	4c25      	ldr	r4, [pc, #148]	; (800fc9c <__pow5mult+0xa8>)
 800fc06:	3a01      	subs	r2, #1
 800fc08:	2300      	movs	r3, #0
 800fc0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc0e:	f7ff fe9b 	bl	800f948 <__multadd>
 800fc12:	4607      	mov	r7, r0
 800fc14:	10ad      	asrs	r5, r5, #2
 800fc16:	d03d      	beq.n	800fc94 <__pow5mult+0xa0>
 800fc18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fc1a:	b97c      	cbnz	r4, 800fc3c <__pow5mult+0x48>
 800fc1c:	2010      	movs	r0, #16
 800fc1e:	f7ff fe29 	bl	800f874 <malloc>
 800fc22:	4602      	mov	r2, r0
 800fc24:	6270      	str	r0, [r6, #36]	; 0x24
 800fc26:	b928      	cbnz	r0, 800fc34 <__pow5mult+0x40>
 800fc28:	4b1d      	ldr	r3, [pc, #116]	; (800fca0 <__pow5mult+0xac>)
 800fc2a:	481e      	ldr	r0, [pc, #120]	; (800fca4 <__pow5mult+0xb0>)
 800fc2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fc30:	f7fe fd52 	bl	800e6d8 <__assert_func>
 800fc34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc38:	6004      	str	r4, [r0, #0]
 800fc3a:	60c4      	str	r4, [r0, #12]
 800fc3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fc40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc44:	b94c      	cbnz	r4, 800fc5a <__pow5mult+0x66>
 800fc46:	f240 2171 	movw	r1, #625	; 0x271
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f7ff ff16 	bl	800fa7c <__i2b>
 800fc50:	2300      	movs	r3, #0
 800fc52:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc56:	4604      	mov	r4, r0
 800fc58:	6003      	str	r3, [r0, #0]
 800fc5a:	f04f 0900 	mov.w	r9, #0
 800fc5e:	07eb      	lsls	r3, r5, #31
 800fc60:	d50a      	bpl.n	800fc78 <__pow5mult+0x84>
 800fc62:	4639      	mov	r1, r7
 800fc64:	4622      	mov	r2, r4
 800fc66:	4630      	mov	r0, r6
 800fc68:	f7ff ff1e 	bl	800faa8 <__multiply>
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	4680      	mov	r8, r0
 800fc70:	4630      	mov	r0, r6
 800fc72:	f7ff fe47 	bl	800f904 <_Bfree>
 800fc76:	4647      	mov	r7, r8
 800fc78:	106d      	asrs	r5, r5, #1
 800fc7a:	d00b      	beq.n	800fc94 <__pow5mult+0xa0>
 800fc7c:	6820      	ldr	r0, [r4, #0]
 800fc7e:	b938      	cbnz	r0, 800fc90 <__pow5mult+0x9c>
 800fc80:	4622      	mov	r2, r4
 800fc82:	4621      	mov	r1, r4
 800fc84:	4630      	mov	r0, r6
 800fc86:	f7ff ff0f 	bl	800faa8 <__multiply>
 800fc8a:	6020      	str	r0, [r4, #0]
 800fc8c:	f8c0 9000 	str.w	r9, [r0]
 800fc90:	4604      	mov	r4, r0
 800fc92:	e7e4      	b.n	800fc5e <__pow5mult+0x6a>
 800fc94:	4638      	mov	r0, r7
 800fc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc9a:	bf00      	nop
 800fc9c:	08011518 	.word	0x08011518
 800fca0:	08011234 	.word	0x08011234
 800fca4:	080113c8 	.word	0x080113c8

0800fca8 <__lshift>:
 800fca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcac:	460c      	mov	r4, r1
 800fcae:	6849      	ldr	r1, [r1, #4]
 800fcb0:	6923      	ldr	r3, [r4, #16]
 800fcb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fcb6:	68a3      	ldr	r3, [r4, #8]
 800fcb8:	4607      	mov	r7, r0
 800fcba:	4691      	mov	r9, r2
 800fcbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fcc0:	f108 0601 	add.w	r6, r8, #1
 800fcc4:	42b3      	cmp	r3, r6
 800fcc6:	db0b      	blt.n	800fce0 <__lshift+0x38>
 800fcc8:	4638      	mov	r0, r7
 800fcca:	f7ff fddb 	bl	800f884 <_Balloc>
 800fcce:	4605      	mov	r5, r0
 800fcd0:	b948      	cbnz	r0, 800fce6 <__lshift+0x3e>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	4b28      	ldr	r3, [pc, #160]	; (800fd78 <__lshift+0xd0>)
 800fcd6:	4829      	ldr	r0, [pc, #164]	; (800fd7c <__lshift+0xd4>)
 800fcd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fcdc:	f7fe fcfc 	bl	800e6d8 <__assert_func>
 800fce0:	3101      	adds	r1, #1
 800fce2:	005b      	lsls	r3, r3, #1
 800fce4:	e7ee      	b.n	800fcc4 <__lshift+0x1c>
 800fce6:	2300      	movs	r3, #0
 800fce8:	f100 0114 	add.w	r1, r0, #20
 800fcec:	f100 0210 	add.w	r2, r0, #16
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	4553      	cmp	r3, sl
 800fcf4:	db33      	blt.n	800fd5e <__lshift+0xb6>
 800fcf6:	6920      	ldr	r0, [r4, #16]
 800fcf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fcfc:	f104 0314 	add.w	r3, r4, #20
 800fd00:	f019 091f 	ands.w	r9, r9, #31
 800fd04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd0c:	d02b      	beq.n	800fd66 <__lshift+0xbe>
 800fd0e:	f1c9 0e20 	rsb	lr, r9, #32
 800fd12:	468a      	mov	sl, r1
 800fd14:	2200      	movs	r2, #0
 800fd16:	6818      	ldr	r0, [r3, #0]
 800fd18:	fa00 f009 	lsl.w	r0, r0, r9
 800fd1c:	4302      	orrs	r2, r0
 800fd1e:	f84a 2b04 	str.w	r2, [sl], #4
 800fd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd26:	459c      	cmp	ip, r3
 800fd28:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd2c:	d8f3      	bhi.n	800fd16 <__lshift+0x6e>
 800fd2e:	ebac 0304 	sub.w	r3, ip, r4
 800fd32:	3b15      	subs	r3, #21
 800fd34:	f023 0303 	bic.w	r3, r3, #3
 800fd38:	3304      	adds	r3, #4
 800fd3a:	f104 0015 	add.w	r0, r4, #21
 800fd3e:	4584      	cmp	ip, r0
 800fd40:	bf38      	it	cc
 800fd42:	2304      	movcc	r3, #4
 800fd44:	50ca      	str	r2, [r1, r3]
 800fd46:	b10a      	cbz	r2, 800fd4c <__lshift+0xa4>
 800fd48:	f108 0602 	add.w	r6, r8, #2
 800fd4c:	3e01      	subs	r6, #1
 800fd4e:	4638      	mov	r0, r7
 800fd50:	612e      	str	r6, [r5, #16]
 800fd52:	4621      	mov	r1, r4
 800fd54:	f7ff fdd6 	bl	800f904 <_Bfree>
 800fd58:	4628      	mov	r0, r5
 800fd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd62:	3301      	adds	r3, #1
 800fd64:	e7c5      	b.n	800fcf2 <__lshift+0x4a>
 800fd66:	3904      	subs	r1, #4
 800fd68:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd70:	459c      	cmp	ip, r3
 800fd72:	d8f9      	bhi.n	800fd68 <__lshift+0xc0>
 800fd74:	e7ea      	b.n	800fd4c <__lshift+0xa4>
 800fd76:	bf00      	nop
 800fd78:	08011354 	.word	0x08011354
 800fd7c:	080113c8 	.word	0x080113c8

0800fd80 <__mcmp>:
 800fd80:	b530      	push	{r4, r5, lr}
 800fd82:	6902      	ldr	r2, [r0, #16]
 800fd84:	690c      	ldr	r4, [r1, #16]
 800fd86:	1b12      	subs	r2, r2, r4
 800fd88:	d10e      	bne.n	800fda8 <__mcmp+0x28>
 800fd8a:	f100 0314 	add.w	r3, r0, #20
 800fd8e:	3114      	adds	r1, #20
 800fd90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fda0:	42a5      	cmp	r5, r4
 800fda2:	d003      	beq.n	800fdac <__mcmp+0x2c>
 800fda4:	d305      	bcc.n	800fdb2 <__mcmp+0x32>
 800fda6:	2201      	movs	r2, #1
 800fda8:	4610      	mov	r0, r2
 800fdaa:	bd30      	pop	{r4, r5, pc}
 800fdac:	4283      	cmp	r3, r0
 800fdae:	d3f3      	bcc.n	800fd98 <__mcmp+0x18>
 800fdb0:	e7fa      	b.n	800fda8 <__mcmp+0x28>
 800fdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb6:	e7f7      	b.n	800fda8 <__mcmp+0x28>

0800fdb8 <__mdiff>:
 800fdb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	4617      	mov	r7, r2
 800fdc6:	f7ff ffdb 	bl	800fd80 <__mcmp>
 800fdca:	1e05      	subs	r5, r0, #0
 800fdcc:	d110      	bne.n	800fdf0 <__mdiff+0x38>
 800fdce:	4629      	mov	r1, r5
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f7ff fd57 	bl	800f884 <_Balloc>
 800fdd6:	b930      	cbnz	r0, 800fde6 <__mdiff+0x2e>
 800fdd8:	4b39      	ldr	r3, [pc, #228]	; (800fec0 <__mdiff+0x108>)
 800fdda:	4602      	mov	r2, r0
 800fddc:	f240 2132 	movw	r1, #562	; 0x232
 800fde0:	4838      	ldr	r0, [pc, #224]	; (800fec4 <__mdiff+0x10c>)
 800fde2:	f7fe fc79 	bl	800e6d8 <__assert_func>
 800fde6:	2301      	movs	r3, #1
 800fde8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fdec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf0:	bfa4      	itt	ge
 800fdf2:	463b      	movge	r3, r7
 800fdf4:	4627      	movge	r7, r4
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	6879      	ldr	r1, [r7, #4]
 800fdfa:	bfa6      	itte	ge
 800fdfc:	461c      	movge	r4, r3
 800fdfe:	2500      	movge	r5, #0
 800fe00:	2501      	movlt	r5, #1
 800fe02:	f7ff fd3f 	bl	800f884 <_Balloc>
 800fe06:	b920      	cbnz	r0, 800fe12 <__mdiff+0x5a>
 800fe08:	4b2d      	ldr	r3, [pc, #180]	; (800fec0 <__mdiff+0x108>)
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fe10:	e7e6      	b.n	800fde0 <__mdiff+0x28>
 800fe12:	693e      	ldr	r6, [r7, #16]
 800fe14:	60c5      	str	r5, [r0, #12]
 800fe16:	6925      	ldr	r5, [r4, #16]
 800fe18:	f107 0114 	add.w	r1, r7, #20
 800fe1c:	f104 0914 	add.w	r9, r4, #20
 800fe20:	f100 0e14 	add.w	lr, r0, #20
 800fe24:	f107 0210 	add.w	r2, r7, #16
 800fe28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fe2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fe30:	46f2      	mov	sl, lr
 800fe32:	2700      	movs	r7, #0
 800fe34:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe3c:	fa1f f883 	uxth.w	r8, r3
 800fe40:	fa17 f78b 	uxtah	r7, r7, fp
 800fe44:	0c1b      	lsrs	r3, r3, #16
 800fe46:	eba7 0808 	sub.w	r8, r7, r8
 800fe4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fe52:	fa1f f888 	uxth.w	r8, r8
 800fe56:	141f      	asrs	r7, r3, #16
 800fe58:	454d      	cmp	r5, r9
 800fe5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe5e:	f84a 3b04 	str.w	r3, [sl], #4
 800fe62:	d8e7      	bhi.n	800fe34 <__mdiff+0x7c>
 800fe64:	1b2b      	subs	r3, r5, r4
 800fe66:	3b15      	subs	r3, #21
 800fe68:	f023 0303 	bic.w	r3, r3, #3
 800fe6c:	3304      	adds	r3, #4
 800fe6e:	3415      	adds	r4, #21
 800fe70:	42a5      	cmp	r5, r4
 800fe72:	bf38      	it	cc
 800fe74:	2304      	movcc	r3, #4
 800fe76:	4419      	add	r1, r3
 800fe78:	4473      	add	r3, lr
 800fe7a:	469e      	mov	lr, r3
 800fe7c:	460d      	mov	r5, r1
 800fe7e:	4565      	cmp	r5, ip
 800fe80:	d30e      	bcc.n	800fea0 <__mdiff+0xe8>
 800fe82:	f10c 0203 	add.w	r2, ip, #3
 800fe86:	1a52      	subs	r2, r2, r1
 800fe88:	f022 0203 	bic.w	r2, r2, #3
 800fe8c:	3903      	subs	r1, #3
 800fe8e:	458c      	cmp	ip, r1
 800fe90:	bf38      	it	cc
 800fe92:	2200      	movcc	r2, #0
 800fe94:	441a      	add	r2, r3
 800fe96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fe9a:	b17b      	cbz	r3, 800febc <__mdiff+0x104>
 800fe9c:	6106      	str	r6, [r0, #16]
 800fe9e:	e7a5      	b.n	800fdec <__mdiff+0x34>
 800fea0:	f855 8b04 	ldr.w	r8, [r5], #4
 800fea4:	fa17 f488 	uxtah	r4, r7, r8
 800fea8:	1422      	asrs	r2, r4, #16
 800feaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800feae:	b2a4      	uxth	r4, r4
 800feb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800feb4:	f84e 4b04 	str.w	r4, [lr], #4
 800feb8:	1417      	asrs	r7, r2, #16
 800feba:	e7e0      	b.n	800fe7e <__mdiff+0xc6>
 800febc:	3e01      	subs	r6, #1
 800febe:	e7ea      	b.n	800fe96 <__mdiff+0xde>
 800fec0:	08011354 	.word	0x08011354
 800fec4:	080113c8 	.word	0x080113c8

0800fec8 <__d2b>:
 800fec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fecc:	4689      	mov	r9, r1
 800fece:	2101      	movs	r1, #1
 800fed0:	ec57 6b10 	vmov	r6, r7, d0
 800fed4:	4690      	mov	r8, r2
 800fed6:	f7ff fcd5 	bl	800f884 <_Balloc>
 800feda:	4604      	mov	r4, r0
 800fedc:	b930      	cbnz	r0, 800feec <__d2b+0x24>
 800fede:	4602      	mov	r2, r0
 800fee0:	4b25      	ldr	r3, [pc, #148]	; (800ff78 <__d2b+0xb0>)
 800fee2:	4826      	ldr	r0, [pc, #152]	; (800ff7c <__d2b+0xb4>)
 800fee4:	f240 310a 	movw	r1, #778	; 0x30a
 800fee8:	f7fe fbf6 	bl	800e6d8 <__assert_func>
 800feec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fef4:	bb35      	cbnz	r5, 800ff44 <__d2b+0x7c>
 800fef6:	2e00      	cmp	r6, #0
 800fef8:	9301      	str	r3, [sp, #4]
 800fefa:	d028      	beq.n	800ff4e <__d2b+0x86>
 800fefc:	4668      	mov	r0, sp
 800fefe:	9600      	str	r6, [sp, #0]
 800ff00:	f7ff fd8c 	bl	800fa1c <__lo0bits>
 800ff04:	9900      	ldr	r1, [sp, #0]
 800ff06:	b300      	cbz	r0, 800ff4a <__d2b+0x82>
 800ff08:	9a01      	ldr	r2, [sp, #4]
 800ff0a:	f1c0 0320 	rsb	r3, r0, #32
 800ff0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ff12:	430b      	orrs	r3, r1
 800ff14:	40c2      	lsrs	r2, r0
 800ff16:	6163      	str	r3, [r4, #20]
 800ff18:	9201      	str	r2, [sp, #4]
 800ff1a:	9b01      	ldr	r3, [sp, #4]
 800ff1c:	61a3      	str	r3, [r4, #24]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	bf14      	ite	ne
 800ff22:	2202      	movne	r2, #2
 800ff24:	2201      	moveq	r2, #1
 800ff26:	6122      	str	r2, [r4, #16]
 800ff28:	b1d5      	cbz	r5, 800ff60 <__d2b+0x98>
 800ff2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff2e:	4405      	add	r5, r0
 800ff30:	f8c9 5000 	str.w	r5, [r9]
 800ff34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff38:	f8c8 0000 	str.w	r0, [r8]
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	b003      	add	sp, #12
 800ff40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff48:	e7d5      	b.n	800fef6 <__d2b+0x2e>
 800ff4a:	6161      	str	r1, [r4, #20]
 800ff4c:	e7e5      	b.n	800ff1a <__d2b+0x52>
 800ff4e:	a801      	add	r0, sp, #4
 800ff50:	f7ff fd64 	bl	800fa1c <__lo0bits>
 800ff54:	9b01      	ldr	r3, [sp, #4]
 800ff56:	6163      	str	r3, [r4, #20]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	6122      	str	r2, [r4, #16]
 800ff5c:	3020      	adds	r0, #32
 800ff5e:	e7e3      	b.n	800ff28 <__d2b+0x60>
 800ff60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff68:	f8c9 0000 	str.w	r0, [r9]
 800ff6c:	6918      	ldr	r0, [r3, #16]
 800ff6e:	f7ff fd35 	bl	800f9dc <__hi0bits>
 800ff72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff76:	e7df      	b.n	800ff38 <__d2b+0x70>
 800ff78:	08011354 	.word	0x08011354
 800ff7c:	080113c8 	.word	0x080113c8

0800ff80 <_calloc_r>:
 800ff80:	b513      	push	{r0, r1, r4, lr}
 800ff82:	434a      	muls	r2, r1
 800ff84:	4611      	mov	r1, r2
 800ff86:	9201      	str	r2, [sp, #4]
 800ff88:	f000 f85a 	bl	8010040 <_malloc_r>
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	b118      	cbz	r0, 800ff98 <_calloc_r+0x18>
 800ff90:	9a01      	ldr	r2, [sp, #4]
 800ff92:	2100      	movs	r1, #0
 800ff94:	f7fd fd3a 	bl	800da0c <memset>
 800ff98:	4620      	mov	r0, r4
 800ff9a:	b002      	add	sp, #8
 800ff9c:	bd10      	pop	{r4, pc}
	...

0800ffa0 <_free_r>:
 800ffa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffa2:	2900      	cmp	r1, #0
 800ffa4:	d048      	beq.n	8010038 <_free_r+0x98>
 800ffa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffaa:	9001      	str	r0, [sp, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f1a1 0404 	sub.w	r4, r1, #4
 800ffb2:	bfb8      	it	lt
 800ffb4:	18e4      	addlt	r4, r4, r3
 800ffb6:	f000 fc31 	bl	801081c <__malloc_lock>
 800ffba:	4a20      	ldr	r2, [pc, #128]	; (801003c <_free_r+0x9c>)
 800ffbc:	9801      	ldr	r0, [sp, #4]
 800ffbe:	6813      	ldr	r3, [r2, #0]
 800ffc0:	4615      	mov	r5, r2
 800ffc2:	b933      	cbnz	r3, 800ffd2 <_free_r+0x32>
 800ffc4:	6063      	str	r3, [r4, #4]
 800ffc6:	6014      	str	r4, [r2, #0]
 800ffc8:	b003      	add	sp, #12
 800ffca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffce:	f000 bc2b 	b.w	8010828 <__malloc_unlock>
 800ffd2:	42a3      	cmp	r3, r4
 800ffd4:	d90b      	bls.n	800ffee <_free_r+0x4e>
 800ffd6:	6821      	ldr	r1, [r4, #0]
 800ffd8:	1862      	adds	r2, r4, r1
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	bf04      	itt	eq
 800ffde:	681a      	ldreq	r2, [r3, #0]
 800ffe0:	685b      	ldreq	r3, [r3, #4]
 800ffe2:	6063      	str	r3, [r4, #4]
 800ffe4:	bf04      	itt	eq
 800ffe6:	1852      	addeq	r2, r2, r1
 800ffe8:	6022      	streq	r2, [r4, #0]
 800ffea:	602c      	str	r4, [r5, #0]
 800ffec:	e7ec      	b.n	800ffc8 <_free_r+0x28>
 800ffee:	461a      	mov	r2, r3
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	b10b      	cbz	r3, 800fff8 <_free_r+0x58>
 800fff4:	42a3      	cmp	r3, r4
 800fff6:	d9fa      	bls.n	800ffee <_free_r+0x4e>
 800fff8:	6811      	ldr	r1, [r2, #0]
 800fffa:	1855      	adds	r5, r2, r1
 800fffc:	42a5      	cmp	r5, r4
 800fffe:	d10b      	bne.n	8010018 <_free_r+0x78>
 8010000:	6824      	ldr	r4, [r4, #0]
 8010002:	4421      	add	r1, r4
 8010004:	1854      	adds	r4, r2, r1
 8010006:	42a3      	cmp	r3, r4
 8010008:	6011      	str	r1, [r2, #0]
 801000a:	d1dd      	bne.n	800ffc8 <_free_r+0x28>
 801000c:	681c      	ldr	r4, [r3, #0]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	6053      	str	r3, [r2, #4]
 8010012:	4421      	add	r1, r4
 8010014:	6011      	str	r1, [r2, #0]
 8010016:	e7d7      	b.n	800ffc8 <_free_r+0x28>
 8010018:	d902      	bls.n	8010020 <_free_r+0x80>
 801001a:	230c      	movs	r3, #12
 801001c:	6003      	str	r3, [r0, #0]
 801001e:	e7d3      	b.n	800ffc8 <_free_r+0x28>
 8010020:	6825      	ldr	r5, [r4, #0]
 8010022:	1961      	adds	r1, r4, r5
 8010024:	428b      	cmp	r3, r1
 8010026:	bf04      	itt	eq
 8010028:	6819      	ldreq	r1, [r3, #0]
 801002a:	685b      	ldreq	r3, [r3, #4]
 801002c:	6063      	str	r3, [r4, #4]
 801002e:	bf04      	itt	eq
 8010030:	1949      	addeq	r1, r1, r5
 8010032:	6021      	streq	r1, [r4, #0]
 8010034:	6054      	str	r4, [r2, #4]
 8010036:	e7c7      	b.n	800ffc8 <_free_r+0x28>
 8010038:	b003      	add	sp, #12
 801003a:	bd30      	pop	{r4, r5, pc}
 801003c:	20002188 	.word	0x20002188

08010040 <_malloc_r>:
 8010040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010042:	1ccd      	adds	r5, r1, #3
 8010044:	f025 0503 	bic.w	r5, r5, #3
 8010048:	3508      	adds	r5, #8
 801004a:	2d0c      	cmp	r5, #12
 801004c:	bf38      	it	cc
 801004e:	250c      	movcc	r5, #12
 8010050:	2d00      	cmp	r5, #0
 8010052:	4606      	mov	r6, r0
 8010054:	db01      	blt.n	801005a <_malloc_r+0x1a>
 8010056:	42a9      	cmp	r1, r5
 8010058:	d903      	bls.n	8010062 <_malloc_r+0x22>
 801005a:	230c      	movs	r3, #12
 801005c:	6033      	str	r3, [r6, #0]
 801005e:	2000      	movs	r0, #0
 8010060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010062:	f000 fbdb 	bl	801081c <__malloc_lock>
 8010066:	4921      	ldr	r1, [pc, #132]	; (80100ec <_malloc_r+0xac>)
 8010068:	680a      	ldr	r2, [r1, #0]
 801006a:	4614      	mov	r4, r2
 801006c:	b99c      	cbnz	r4, 8010096 <_malloc_r+0x56>
 801006e:	4f20      	ldr	r7, [pc, #128]	; (80100f0 <_malloc_r+0xb0>)
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	b923      	cbnz	r3, 801007e <_malloc_r+0x3e>
 8010074:	4621      	mov	r1, r4
 8010076:	4630      	mov	r0, r6
 8010078:	f000 faf2 	bl	8010660 <_sbrk_r>
 801007c:	6038      	str	r0, [r7, #0]
 801007e:	4629      	mov	r1, r5
 8010080:	4630      	mov	r0, r6
 8010082:	f000 faed 	bl	8010660 <_sbrk_r>
 8010086:	1c43      	adds	r3, r0, #1
 8010088:	d123      	bne.n	80100d2 <_malloc_r+0x92>
 801008a:	230c      	movs	r3, #12
 801008c:	6033      	str	r3, [r6, #0]
 801008e:	4630      	mov	r0, r6
 8010090:	f000 fbca 	bl	8010828 <__malloc_unlock>
 8010094:	e7e3      	b.n	801005e <_malloc_r+0x1e>
 8010096:	6823      	ldr	r3, [r4, #0]
 8010098:	1b5b      	subs	r3, r3, r5
 801009a:	d417      	bmi.n	80100cc <_malloc_r+0x8c>
 801009c:	2b0b      	cmp	r3, #11
 801009e:	d903      	bls.n	80100a8 <_malloc_r+0x68>
 80100a0:	6023      	str	r3, [r4, #0]
 80100a2:	441c      	add	r4, r3
 80100a4:	6025      	str	r5, [r4, #0]
 80100a6:	e004      	b.n	80100b2 <_malloc_r+0x72>
 80100a8:	6863      	ldr	r3, [r4, #4]
 80100aa:	42a2      	cmp	r2, r4
 80100ac:	bf0c      	ite	eq
 80100ae:	600b      	streq	r3, [r1, #0]
 80100b0:	6053      	strne	r3, [r2, #4]
 80100b2:	4630      	mov	r0, r6
 80100b4:	f000 fbb8 	bl	8010828 <__malloc_unlock>
 80100b8:	f104 000b 	add.w	r0, r4, #11
 80100bc:	1d23      	adds	r3, r4, #4
 80100be:	f020 0007 	bic.w	r0, r0, #7
 80100c2:	1ac2      	subs	r2, r0, r3
 80100c4:	d0cc      	beq.n	8010060 <_malloc_r+0x20>
 80100c6:	1a1b      	subs	r3, r3, r0
 80100c8:	50a3      	str	r3, [r4, r2]
 80100ca:	e7c9      	b.n	8010060 <_malloc_r+0x20>
 80100cc:	4622      	mov	r2, r4
 80100ce:	6864      	ldr	r4, [r4, #4]
 80100d0:	e7cc      	b.n	801006c <_malloc_r+0x2c>
 80100d2:	1cc4      	adds	r4, r0, #3
 80100d4:	f024 0403 	bic.w	r4, r4, #3
 80100d8:	42a0      	cmp	r0, r4
 80100da:	d0e3      	beq.n	80100a4 <_malloc_r+0x64>
 80100dc:	1a21      	subs	r1, r4, r0
 80100de:	4630      	mov	r0, r6
 80100e0:	f000 fabe 	bl	8010660 <_sbrk_r>
 80100e4:	3001      	adds	r0, #1
 80100e6:	d1dd      	bne.n	80100a4 <_malloc_r+0x64>
 80100e8:	e7cf      	b.n	801008a <_malloc_r+0x4a>
 80100ea:	bf00      	nop
 80100ec:	20002188 	.word	0x20002188
 80100f0:	2000218c 	.word	0x2000218c

080100f4 <__ssputs_r>:
 80100f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100f8:	688e      	ldr	r6, [r1, #8]
 80100fa:	429e      	cmp	r6, r3
 80100fc:	4682      	mov	sl, r0
 80100fe:	460c      	mov	r4, r1
 8010100:	4690      	mov	r8, r2
 8010102:	461f      	mov	r7, r3
 8010104:	d838      	bhi.n	8010178 <__ssputs_r+0x84>
 8010106:	898a      	ldrh	r2, [r1, #12]
 8010108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801010c:	d032      	beq.n	8010174 <__ssputs_r+0x80>
 801010e:	6825      	ldr	r5, [r4, #0]
 8010110:	6909      	ldr	r1, [r1, #16]
 8010112:	eba5 0901 	sub.w	r9, r5, r1
 8010116:	6965      	ldr	r5, [r4, #20]
 8010118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801011c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010120:	3301      	adds	r3, #1
 8010122:	444b      	add	r3, r9
 8010124:	106d      	asrs	r5, r5, #1
 8010126:	429d      	cmp	r5, r3
 8010128:	bf38      	it	cc
 801012a:	461d      	movcc	r5, r3
 801012c:	0553      	lsls	r3, r2, #21
 801012e:	d531      	bpl.n	8010194 <__ssputs_r+0xa0>
 8010130:	4629      	mov	r1, r5
 8010132:	f7ff ff85 	bl	8010040 <_malloc_r>
 8010136:	4606      	mov	r6, r0
 8010138:	b950      	cbnz	r0, 8010150 <__ssputs_r+0x5c>
 801013a:	230c      	movs	r3, #12
 801013c:	f8ca 3000 	str.w	r3, [sl]
 8010140:	89a3      	ldrh	r3, [r4, #12]
 8010142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010146:	81a3      	strh	r3, [r4, #12]
 8010148:	f04f 30ff 	mov.w	r0, #4294967295
 801014c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010150:	6921      	ldr	r1, [r4, #16]
 8010152:	464a      	mov	r2, r9
 8010154:	f7fd fc4c 	bl	800d9f0 <memcpy>
 8010158:	89a3      	ldrh	r3, [r4, #12]
 801015a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801015e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010162:	81a3      	strh	r3, [r4, #12]
 8010164:	6126      	str	r6, [r4, #16]
 8010166:	6165      	str	r5, [r4, #20]
 8010168:	444e      	add	r6, r9
 801016a:	eba5 0509 	sub.w	r5, r5, r9
 801016e:	6026      	str	r6, [r4, #0]
 8010170:	60a5      	str	r5, [r4, #8]
 8010172:	463e      	mov	r6, r7
 8010174:	42be      	cmp	r6, r7
 8010176:	d900      	bls.n	801017a <__ssputs_r+0x86>
 8010178:	463e      	mov	r6, r7
 801017a:	4632      	mov	r2, r6
 801017c:	6820      	ldr	r0, [r4, #0]
 801017e:	4641      	mov	r1, r8
 8010180:	f000 fb32 	bl	80107e8 <memmove>
 8010184:	68a3      	ldr	r3, [r4, #8]
 8010186:	6822      	ldr	r2, [r4, #0]
 8010188:	1b9b      	subs	r3, r3, r6
 801018a:	4432      	add	r2, r6
 801018c:	60a3      	str	r3, [r4, #8]
 801018e:	6022      	str	r2, [r4, #0]
 8010190:	2000      	movs	r0, #0
 8010192:	e7db      	b.n	801014c <__ssputs_r+0x58>
 8010194:	462a      	mov	r2, r5
 8010196:	f000 fb4d 	bl	8010834 <_realloc_r>
 801019a:	4606      	mov	r6, r0
 801019c:	2800      	cmp	r0, #0
 801019e:	d1e1      	bne.n	8010164 <__ssputs_r+0x70>
 80101a0:	6921      	ldr	r1, [r4, #16]
 80101a2:	4650      	mov	r0, sl
 80101a4:	f7ff fefc 	bl	800ffa0 <_free_r>
 80101a8:	e7c7      	b.n	801013a <__ssputs_r+0x46>
	...

080101ac <_svfiprintf_r>:
 80101ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b0:	4698      	mov	r8, r3
 80101b2:	898b      	ldrh	r3, [r1, #12]
 80101b4:	061b      	lsls	r3, r3, #24
 80101b6:	b09d      	sub	sp, #116	; 0x74
 80101b8:	4607      	mov	r7, r0
 80101ba:	460d      	mov	r5, r1
 80101bc:	4614      	mov	r4, r2
 80101be:	d50e      	bpl.n	80101de <_svfiprintf_r+0x32>
 80101c0:	690b      	ldr	r3, [r1, #16]
 80101c2:	b963      	cbnz	r3, 80101de <_svfiprintf_r+0x32>
 80101c4:	2140      	movs	r1, #64	; 0x40
 80101c6:	f7ff ff3b 	bl	8010040 <_malloc_r>
 80101ca:	6028      	str	r0, [r5, #0]
 80101cc:	6128      	str	r0, [r5, #16]
 80101ce:	b920      	cbnz	r0, 80101da <_svfiprintf_r+0x2e>
 80101d0:	230c      	movs	r3, #12
 80101d2:	603b      	str	r3, [r7, #0]
 80101d4:	f04f 30ff 	mov.w	r0, #4294967295
 80101d8:	e0d1      	b.n	801037e <_svfiprintf_r+0x1d2>
 80101da:	2340      	movs	r3, #64	; 0x40
 80101dc:	616b      	str	r3, [r5, #20]
 80101de:	2300      	movs	r3, #0
 80101e0:	9309      	str	r3, [sp, #36]	; 0x24
 80101e2:	2320      	movs	r3, #32
 80101e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80101ec:	2330      	movs	r3, #48	; 0x30
 80101ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010398 <_svfiprintf_r+0x1ec>
 80101f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101f6:	f04f 0901 	mov.w	r9, #1
 80101fa:	4623      	mov	r3, r4
 80101fc:	469a      	mov	sl, r3
 80101fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010202:	b10a      	cbz	r2, 8010208 <_svfiprintf_r+0x5c>
 8010204:	2a25      	cmp	r2, #37	; 0x25
 8010206:	d1f9      	bne.n	80101fc <_svfiprintf_r+0x50>
 8010208:	ebba 0b04 	subs.w	fp, sl, r4
 801020c:	d00b      	beq.n	8010226 <_svfiprintf_r+0x7a>
 801020e:	465b      	mov	r3, fp
 8010210:	4622      	mov	r2, r4
 8010212:	4629      	mov	r1, r5
 8010214:	4638      	mov	r0, r7
 8010216:	f7ff ff6d 	bl	80100f4 <__ssputs_r>
 801021a:	3001      	adds	r0, #1
 801021c:	f000 80aa 	beq.w	8010374 <_svfiprintf_r+0x1c8>
 8010220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010222:	445a      	add	r2, fp
 8010224:	9209      	str	r2, [sp, #36]	; 0x24
 8010226:	f89a 3000 	ldrb.w	r3, [sl]
 801022a:	2b00      	cmp	r3, #0
 801022c:	f000 80a2 	beq.w	8010374 <_svfiprintf_r+0x1c8>
 8010230:	2300      	movs	r3, #0
 8010232:	f04f 32ff 	mov.w	r2, #4294967295
 8010236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801023a:	f10a 0a01 	add.w	sl, sl, #1
 801023e:	9304      	str	r3, [sp, #16]
 8010240:	9307      	str	r3, [sp, #28]
 8010242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010246:	931a      	str	r3, [sp, #104]	; 0x68
 8010248:	4654      	mov	r4, sl
 801024a:	2205      	movs	r2, #5
 801024c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010250:	4851      	ldr	r0, [pc, #324]	; (8010398 <_svfiprintf_r+0x1ec>)
 8010252:	f7ef ffc5 	bl	80001e0 <memchr>
 8010256:	9a04      	ldr	r2, [sp, #16]
 8010258:	b9d8      	cbnz	r0, 8010292 <_svfiprintf_r+0xe6>
 801025a:	06d0      	lsls	r0, r2, #27
 801025c:	bf44      	itt	mi
 801025e:	2320      	movmi	r3, #32
 8010260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010264:	0711      	lsls	r1, r2, #28
 8010266:	bf44      	itt	mi
 8010268:	232b      	movmi	r3, #43	; 0x2b
 801026a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801026e:	f89a 3000 	ldrb.w	r3, [sl]
 8010272:	2b2a      	cmp	r3, #42	; 0x2a
 8010274:	d015      	beq.n	80102a2 <_svfiprintf_r+0xf6>
 8010276:	9a07      	ldr	r2, [sp, #28]
 8010278:	4654      	mov	r4, sl
 801027a:	2000      	movs	r0, #0
 801027c:	f04f 0c0a 	mov.w	ip, #10
 8010280:	4621      	mov	r1, r4
 8010282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010286:	3b30      	subs	r3, #48	; 0x30
 8010288:	2b09      	cmp	r3, #9
 801028a:	d94e      	bls.n	801032a <_svfiprintf_r+0x17e>
 801028c:	b1b0      	cbz	r0, 80102bc <_svfiprintf_r+0x110>
 801028e:	9207      	str	r2, [sp, #28]
 8010290:	e014      	b.n	80102bc <_svfiprintf_r+0x110>
 8010292:	eba0 0308 	sub.w	r3, r0, r8
 8010296:	fa09 f303 	lsl.w	r3, r9, r3
 801029a:	4313      	orrs	r3, r2
 801029c:	9304      	str	r3, [sp, #16]
 801029e:	46a2      	mov	sl, r4
 80102a0:	e7d2      	b.n	8010248 <_svfiprintf_r+0x9c>
 80102a2:	9b03      	ldr	r3, [sp, #12]
 80102a4:	1d19      	adds	r1, r3, #4
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	9103      	str	r1, [sp, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	bfbb      	ittet	lt
 80102ae:	425b      	neglt	r3, r3
 80102b0:	f042 0202 	orrlt.w	r2, r2, #2
 80102b4:	9307      	strge	r3, [sp, #28]
 80102b6:	9307      	strlt	r3, [sp, #28]
 80102b8:	bfb8      	it	lt
 80102ba:	9204      	strlt	r2, [sp, #16]
 80102bc:	7823      	ldrb	r3, [r4, #0]
 80102be:	2b2e      	cmp	r3, #46	; 0x2e
 80102c0:	d10c      	bne.n	80102dc <_svfiprintf_r+0x130>
 80102c2:	7863      	ldrb	r3, [r4, #1]
 80102c4:	2b2a      	cmp	r3, #42	; 0x2a
 80102c6:	d135      	bne.n	8010334 <_svfiprintf_r+0x188>
 80102c8:	9b03      	ldr	r3, [sp, #12]
 80102ca:	1d1a      	adds	r2, r3, #4
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	9203      	str	r2, [sp, #12]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	bfb8      	it	lt
 80102d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80102d8:	3402      	adds	r4, #2
 80102da:	9305      	str	r3, [sp, #20]
 80102dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103a8 <_svfiprintf_r+0x1fc>
 80102e0:	7821      	ldrb	r1, [r4, #0]
 80102e2:	2203      	movs	r2, #3
 80102e4:	4650      	mov	r0, sl
 80102e6:	f7ef ff7b 	bl	80001e0 <memchr>
 80102ea:	b140      	cbz	r0, 80102fe <_svfiprintf_r+0x152>
 80102ec:	2340      	movs	r3, #64	; 0x40
 80102ee:	eba0 000a 	sub.w	r0, r0, sl
 80102f2:	fa03 f000 	lsl.w	r0, r3, r0
 80102f6:	9b04      	ldr	r3, [sp, #16]
 80102f8:	4303      	orrs	r3, r0
 80102fa:	3401      	adds	r4, #1
 80102fc:	9304      	str	r3, [sp, #16]
 80102fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010302:	4826      	ldr	r0, [pc, #152]	; (801039c <_svfiprintf_r+0x1f0>)
 8010304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010308:	2206      	movs	r2, #6
 801030a:	f7ef ff69 	bl	80001e0 <memchr>
 801030e:	2800      	cmp	r0, #0
 8010310:	d038      	beq.n	8010384 <_svfiprintf_r+0x1d8>
 8010312:	4b23      	ldr	r3, [pc, #140]	; (80103a0 <_svfiprintf_r+0x1f4>)
 8010314:	bb1b      	cbnz	r3, 801035e <_svfiprintf_r+0x1b2>
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	3307      	adds	r3, #7
 801031a:	f023 0307 	bic.w	r3, r3, #7
 801031e:	3308      	adds	r3, #8
 8010320:	9303      	str	r3, [sp, #12]
 8010322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010324:	4433      	add	r3, r6
 8010326:	9309      	str	r3, [sp, #36]	; 0x24
 8010328:	e767      	b.n	80101fa <_svfiprintf_r+0x4e>
 801032a:	fb0c 3202 	mla	r2, ip, r2, r3
 801032e:	460c      	mov	r4, r1
 8010330:	2001      	movs	r0, #1
 8010332:	e7a5      	b.n	8010280 <_svfiprintf_r+0xd4>
 8010334:	2300      	movs	r3, #0
 8010336:	3401      	adds	r4, #1
 8010338:	9305      	str	r3, [sp, #20]
 801033a:	4619      	mov	r1, r3
 801033c:	f04f 0c0a 	mov.w	ip, #10
 8010340:	4620      	mov	r0, r4
 8010342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010346:	3a30      	subs	r2, #48	; 0x30
 8010348:	2a09      	cmp	r2, #9
 801034a:	d903      	bls.n	8010354 <_svfiprintf_r+0x1a8>
 801034c:	2b00      	cmp	r3, #0
 801034e:	d0c5      	beq.n	80102dc <_svfiprintf_r+0x130>
 8010350:	9105      	str	r1, [sp, #20]
 8010352:	e7c3      	b.n	80102dc <_svfiprintf_r+0x130>
 8010354:	fb0c 2101 	mla	r1, ip, r1, r2
 8010358:	4604      	mov	r4, r0
 801035a:	2301      	movs	r3, #1
 801035c:	e7f0      	b.n	8010340 <_svfiprintf_r+0x194>
 801035e:	ab03      	add	r3, sp, #12
 8010360:	9300      	str	r3, [sp, #0]
 8010362:	462a      	mov	r2, r5
 8010364:	4b0f      	ldr	r3, [pc, #60]	; (80103a4 <_svfiprintf_r+0x1f8>)
 8010366:	a904      	add	r1, sp, #16
 8010368:	4638      	mov	r0, r7
 801036a:	f7fd fbf7 	bl	800db5c <_printf_float>
 801036e:	1c42      	adds	r2, r0, #1
 8010370:	4606      	mov	r6, r0
 8010372:	d1d6      	bne.n	8010322 <_svfiprintf_r+0x176>
 8010374:	89ab      	ldrh	r3, [r5, #12]
 8010376:	065b      	lsls	r3, r3, #25
 8010378:	f53f af2c 	bmi.w	80101d4 <_svfiprintf_r+0x28>
 801037c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801037e:	b01d      	add	sp, #116	; 0x74
 8010380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010384:	ab03      	add	r3, sp, #12
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	462a      	mov	r2, r5
 801038a:	4b06      	ldr	r3, [pc, #24]	; (80103a4 <_svfiprintf_r+0x1f8>)
 801038c:	a904      	add	r1, sp, #16
 801038e:	4638      	mov	r0, r7
 8010390:	f7fd fe88 	bl	800e0a4 <_printf_i>
 8010394:	e7eb      	b.n	801036e <_svfiprintf_r+0x1c2>
 8010396:	bf00      	nop
 8010398:	08011524 	.word	0x08011524
 801039c:	0801152e 	.word	0x0801152e
 80103a0:	0800db5d 	.word	0x0800db5d
 80103a4:	080100f5 	.word	0x080100f5
 80103a8:	0801152a 	.word	0x0801152a

080103ac <__sfputc_r>:
 80103ac:	6893      	ldr	r3, [r2, #8]
 80103ae:	3b01      	subs	r3, #1
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	b410      	push	{r4}
 80103b4:	6093      	str	r3, [r2, #8]
 80103b6:	da08      	bge.n	80103ca <__sfputc_r+0x1e>
 80103b8:	6994      	ldr	r4, [r2, #24]
 80103ba:	42a3      	cmp	r3, r4
 80103bc:	db01      	blt.n	80103c2 <__sfputc_r+0x16>
 80103be:	290a      	cmp	r1, #10
 80103c0:	d103      	bne.n	80103ca <__sfputc_r+0x1e>
 80103c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103c6:	f7fe b8c7 	b.w	800e558 <__swbuf_r>
 80103ca:	6813      	ldr	r3, [r2, #0]
 80103cc:	1c58      	adds	r0, r3, #1
 80103ce:	6010      	str	r0, [r2, #0]
 80103d0:	7019      	strb	r1, [r3, #0]
 80103d2:	4608      	mov	r0, r1
 80103d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103d8:	4770      	bx	lr

080103da <__sfputs_r>:
 80103da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103dc:	4606      	mov	r6, r0
 80103de:	460f      	mov	r7, r1
 80103e0:	4614      	mov	r4, r2
 80103e2:	18d5      	adds	r5, r2, r3
 80103e4:	42ac      	cmp	r4, r5
 80103e6:	d101      	bne.n	80103ec <__sfputs_r+0x12>
 80103e8:	2000      	movs	r0, #0
 80103ea:	e007      	b.n	80103fc <__sfputs_r+0x22>
 80103ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103f0:	463a      	mov	r2, r7
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7ff ffda 	bl	80103ac <__sfputc_r>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d1f3      	bne.n	80103e4 <__sfputs_r+0xa>
 80103fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010400 <_vfiprintf_r>:
 8010400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010404:	460d      	mov	r5, r1
 8010406:	b09d      	sub	sp, #116	; 0x74
 8010408:	4614      	mov	r4, r2
 801040a:	4698      	mov	r8, r3
 801040c:	4606      	mov	r6, r0
 801040e:	b118      	cbz	r0, 8010418 <_vfiprintf_r+0x18>
 8010410:	6983      	ldr	r3, [r0, #24]
 8010412:	b90b      	cbnz	r3, 8010418 <_vfiprintf_r+0x18>
 8010414:	f7ff f912 	bl	800f63c <__sinit>
 8010418:	4b89      	ldr	r3, [pc, #548]	; (8010640 <_vfiprintf_r+0x240>)
 801041a:	429d      	cmp	r5, r3
 801041c:	d11b      	bne.n	8010456 <_vfiprintf_r+0x56>
 801041e:	6875      	ldr	r5, [r6, #4]
 8010420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010422:	07d9      	lsls	r1, r3, #31
 8010424:	d405      	bmi.n	8010432 <_vfiprintf_r+0x32>
 8010426:	89ab      	ldrh	r3, [r5, #12]
 8010428:	059a      	lsls	r2, r3, #22
 801042a:	d402      	bmi.n	8010432 <_vfiprintf_r+0x32>
 801042c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801042e:	f7ff f9ba 	bl	800f7a6 <__retarget_lock_acquire_recursive>
 8010432:	89ab      	ldrh	r3, [r5, #12]
 8010434:	071b      	lsls	r3, r3, #28
 8010436:	d501      	bpl.n	801043c <_vfiprintf_r+0x3c>
 8010438:	692b      	ldr	r3, [r5, #16]
 801043a:	b9eb      	cbnz	r3, 8010478 <_vfiprintf_r+0x78>
 801043c:	4629      	mov	r1, r5
 801043e:	4630      	mov	r0, r6
 8010440:	f7fe f8dc 	bl	800e5fc <__swsetup_r>
 8010444:	b1c0      	cbz	r0, 8010478 <_vfiprintf_r+0x78>
 8010446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010448:	07dc      	lsls	r4, r3, #31
 801044a:	d50e      	bpl.n	801046a <_vfiprintf_r+0x6a>
 801044c:	f04f 30ff 	mov.w	r0, #4294967295
 8010450:	b01d      	add	sp, #116	; 0x74
 8010452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010456:	4b7b      	ldr	r3, [pc, #492]	; (8010644 <_vfiprintf_r+0x244>)
 8010458:	429d      	cmp	r5, r3
 801045a:	d101      	bne.n	8010460 <_vfiprintf_r+0x60>
 801045c:	68b5      	ldr	r5, [r6, #8]
 801045e:	e7df      	b.n	8010420 <_vfiprintf_r+0x20>
 8010460:	4b79      	ldr	r3, [pc, #484]	; (8010648 <_vfiprintf_r+0x248>)
 8010462:	429d      	cmp	r5, r3
 8010464:	bf08      	it	eq
 8010466:	68f5      	ldreq	r5, [r6, #12]
 8010468:	e7da      	b.n	8010420 <_vfiprintf_r+0x20>
 801046a:	89ab      	ldrh	r3, [r5, #12]
 801046c:	0598      	lsls	r0, r3, #22
 801046e:	d4ed      	bmi.n	801044c <_vfiprintf_r+0x4c>
 8010470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010472:	f7ff f999 	bl	800f7a8 <__retarget_lock_release_recursive>
 8010476:	e7e9      	b.n	801044c <_vfiprintf_r+0x4c>
 8010478:	2300      	movs	r3, #0
 801047a:	9309      	str	r3, [sp, #36]	; 0x24
 801047c:	2320      	movs	r3, #32
 801047e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010482:	f8cd 800c 	str.w	r8, [sp, #12]
 8010486:	2330      	movs	r3, #48	; 0x30
 8010488:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801064c <_vfiprintf_r+0x24c>
 801048c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010490:	f04f 0901 	mov.w	r9, #1
 8010494:	4623      	mov	r3, r4
 8010496:	469a      	mov	sl, r3
 8010498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801049c:	b10a      	cbz	r2, 80104a2 <_vfiprintf_r+0xa2>
 801049e:	2a25      	cmp	r2, #37	; 0x25
 80104a0:	d1f9      	bne.n	8010496 <_vfiprintf_r+0x96>
 80104a2:	ebba 0b04 	subs.w	fp, sl, r4
 80104a6:	d00b      	beq.n	80104c0 <_vfiprintf_r+0xc0>
 80104a8:	465b      	mov	r3, fp
 80104aa:	4622      	mov	r2, r4
 80104ac:	4629      	mov	r1, r5
 80104ae:	4630      	mov	r0, r6
 80104b0:	f7ff ff93 	bl	80103da <__sfputs_r>
 80104b4:	3001      	adds	r0, #1
 80104b6:	f000 80aa 	beq.w	801060e <_vfiprintf_r+0x20e>
 80104ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104bc:	445a      	add	r2, fp
 80104be:	9209      	str	r2, [sp, #36]	; 0x24
 80104c0:	f89a 3000 	ldrb.w	r3, [sl]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 80a2 	beq.w	801060e <_vfiprintf_r+0x20e>
 80104ca:	2300      	movs	r3, #0
 80104cc:	f04f 32ff 	mov.w	r2, #4294967295
 80104d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104d4:	f10a 0a01 	add.w	sl, sl, #1
 80104d8:	9304      	str	r3, [sp, #16]
 80104da:	9307      	str	r3, [sp, #28]
 80104dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104e0:	931a      	str	r3, [sp, #104]	; 0x68
 80104e2:	4654      	mov	r4, sl
 80104e4:	2205      	movs	r2, #5
 80104e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104ea:	4858      	ldr	r0, [pc, #352]	; (801064c <_vfiprintf_r+0x24c>)
 80104ec:	f7ef fe78 	bl	80001e0 <memchr>
 80104f0:	9a04      	ldr	r2, [sp, #16]
 80104f2:	b9d8      	cbnz	r0, 801052c <_vfiprintf_r+0x12c>
 80104f4:	06d1      	lsls	r1, r2, #27
 80104f6:	bf44      	itt	mi
 80104f8:	2320      	movmi	r3, #32
 80104fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104fe:	0713      	lsls	r3, r2, #28
 8010500:	bf44      	itt	mi
 8010502:	232b      	movmi	r3, #43	; 0x2b
 8010504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010508:	f89a 3000 	ldrb.w	r3, [sl]
 801050c:	2b2a      	cmp	r3, #42	; 0x2a
 801050e:	d015      	beq.n	801053c <_vfiprintf_r+0x13c>
 8010510:	9a07      	ldr	r2, [sp, #28]
 8010512:	4654      	mov	r4, sl
 8010514:	2000      	movs	r0, #0
 8010516:	f04f 0c0a 	mov.w	ip, #10
 801051a:	4621      	mov	r1, r4
 801051c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010520:	3b30      	subs	r3, #48	; 0x30
 8010522:	2b09      	cmp	r3, #9
 8010524:	d94e      	bls.n	80105c4 <_vfiprintf_r+0x1c4>
 8010526:	b1b0      	cbz	r0, 8010556 <_vfiprintf_r+0x156>
 8010528:	9207      	str	r2, [sp, #28]
 801052a:	e014      	b.n	8010556 <_vfiprintf_r+0x156>
 801052c:	eba0 0308 	sub.w	r3, r0, r8
 8010530:	fa09 f303 	lsl.w	r3, r9, r3
 8010534:	4313      	orrs	r3, r2
 8010536:	9304      	str	r3, [sp, #16]
 8010538:	46a2      	mov	sl, r4
 801053a:	e7d2      	b.n	80104e2 <_vfiprintf_r+0xe2>
 801053c:	9b03      	ldr	r3, [sp, #12]
 801053e:	1d19      	adds	r1, r3, #4
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	9103      	str	r1, [sp, #12]
 8010544:	2b00      	cmp	r3, #0
 8010546:	bfbb      	ittet	lt
 8010548:	425b      	neglt	r3, r3
 801054a:	f042 0202 	orrlt.w	r2, r2, #2
 801054e:	9307      	strge	r3, [sp, #28]
 8010550:	9307      	strlt	r3, [sp, #28]
 8010552:	bfb8      	it	lt
 8010554:	9204      	strlt	r2, [sp, #16]
 8010556:	7823      	ldrb	r3, [r4, #0]
 8010558:	2b2e      	cmp	r3, #46	; 0x2e
 801055a:	d10c      	bne.n	8010576 <_vfiprintf_r+0x176>
 801055c:	7863      	ldrb	r3, [r4, #1]
 801055e:	2b2a      	cmp	r3, #42	; 0x2a
 8010560:	d135      	bne.n	80105ce <_vfiprintf_r+0x1ce>
 8010562:	9b03      	ldr	r3, [sp, #12]
 8010564:	1d1a      	adds	r2, r3, #4
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	9203      	str	r2, [sp, #12]
 801056a:	2b00      	cmp	r3, #0
 801056c:	bfb8      	it	lt
 801056e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010572:	3402      	adds	r4, #2
 8010574:	9305      	str	r3, [sp, #20]
 8010576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801065c <_vfiprintf_r+0x25c>
 801057a:	7821      	ldrb	r1, [r4, #0]
 801057c:	2203      	movs	r2, #3
 801057e:	4650      	mov	r0, sl
 8010580:	f7ef fe2e 	bl	80001e0 <memchr>
 8010584:	b140      	cbz	r0, 8010598 <_vfiprintf_r+0x198>
 8010586:	2340      	movs	r3, #64	; 0x40
 8010588:	eba0 000a 	sub.w	r0, r0, sl
 801058c:	fa03 f000 	lsl.w	r0, r3, r0
 8010590:	9b04      	ldr	r3, [sp, #16]
 8010592:	4303      	orrs	r3, r0
 8010594:	3401      	adds	r4, #1
 8010596:	9304      	str	r3, [sp, #16]
 8010598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801059c:	482c      	ldr	r0, [pc, #176]	; (8010650 <_vfiprintf_r+0x250>)
 801059e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105a2:	2206      	movs	r2, #6
 80105a4:	f7ef fe1c 	bl	80001e0 <memchr>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d03f      	beq.n	801062c <_vfiprintf_r+0x22c>
 80105ac:	4b29      	ldr	r3, [pc, #164]	; (8010654 <_vfiprintf_r+0x254>)
 80105ae:	bb1b      	cbnz	r3, 80105f8 <_vfiprintf_r+0x1f8>
 80105b0:	9b03      	ldr	r3, [sp, #12]
 80105b2:	3307      	adds	r3, #7
 80105b4:	f023 0307 	bic.w	r3, r3, #7
 80105b8:	3308      	adds	r3, #8
 80105ba:	9303      	str	r3, [sp, #12]
 80105bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105be:	443b      	add	r3, r7
 80105c0:	9309      	str	r3, [sp, #36]	; 0x24
 80105c2:	e767      	b.n	8010494 <_vfiprintf_r+0x94>
 80105c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80105c8:	460c      	mov	r4, r1
 80105ca:	2001      	movs	r0, #1
 80105cc:	e7a5      	b.n	801051a <_vfiprintf_r+0x11a>
 80105ce:	2300      	movs	r3, #0
 80105d0:	3401      	adds	r4, #1
 80105d2:	9305      	str	r3, [sp, #20]
 80105d4:	4619      	mov	r1, r3
 80105d6:	f04f 0c0a 	mov.w	ip, #10
 80105da:	4620      	mov	r0, r4
 80105dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105e0:	3a30      	subs	r2, #48	; 0x30
 80105e2:	2a09      	cmp	r2, #9
 80105e4:	d903      	bls.n	80105ee <_vfiprintf_r+0x1ee>
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d0c5      	beq.n	8010576 <_vfiprintf_r+0x176>
 80105ea:	9105      	str	r1, [sp, #20]
 80105ec:	e7c3      	b.n	8010576 <_vfiprintf_r+0x176>
 80105ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80105f2:	4604      	mov	r4, r0
 80105f4:	2301      	movs	r3, #1
 80105f6:	e7f0      	b.n	80105da <_vfiprintf_r+0x1da>
 80105f8:	ab03      	add	r3, sp, #12
 80105fa:	9300      	str	r3, [sp, #0]
 80105fc:	462a      	mov	r2, r5
 80105fe:	4b16      	ldr	r3, [pc, #88]	; (8010658 <_vfiprintf_r+0x258>)
 8010600:	a904      	add	r1, sp, #16
 8010602:	4630      	mov	r0, r6
 8010604:	f7fd faaa 	bl	800db5c <_printf_float>
 8010608:	4607      	mov	r7, r0
 801060a:	1c78      	adds	r0, r7, #1
 801060c:	d1d6      	bne.n	80105bc <_vfiprintf_r+0x1bc>
 801060e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010610:	07d9      	lsls	r1, r3, #31
 8010612:	d405      	bmi.n	8010620 <_vfiprintf_r+0x220>
 8010614:	89ab      	ldrh	r3, [r5, #12]
 8010616:	059a      	lsls	r2, r3, #22
 8010618:	d402      	bmi.n	8010620 <_vfiprintf_r+0x220>
 801061a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801061c:	f7ff f8c4 	bl	800f7a8 <__retarget_lock_release_recursive>
 8010620:	89ab      	ldrh	r3, [r5, #12]
 8010622:	065b      	lsls	r3, r3, #25
 8010624:	f53f af12 	bmi.w	801044c <_vfiprintf_r+0x4c>
 8010628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801062a:	e711      	b.n	8010450 <_vfiprintf_r+0x50>
 801062c:	ab03      	add	r3, sp, #12
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	462a      	mov	r2, r5
 8010632:	4b09      	ldr	r3, [pc, #36]	; (8010658 <_vfiprintf_r+0x258>)
 8010634:	a904      	add	r1, sp, #16
 8010636:	4630      	mov	r0, r6
 8010638:	f7fd fd34 	bl	800e0a4 <_printf_i>
 801063c:	e7e4      	b.n	8010608 <_vfiprintf_r+0x208>
 801063e:	bf00      	nop
 8010640:	08011388 	.word	0x08011388
 8010644:	080113a8 	.word	0x080113a8
 8010648:	08011368 	.word	0x08011368
 801064c:	08011524 	.word	0x08011524
 8010650:	0801152e 	.word	0x0801152e
 8010654:	0800db5d 	.word	0x0800db5d
 8010658:	080103db 	.word	0x080103db
 801065c:	0801152a 	.word	0x0801152a

08010660 <_sbrk_r>:
 8010660:	b538      	push	{r3, r4, r5, lr}
 8010662:	4d06      	ldr	r5, [pc, #24]	; (801067c <_sbrk_r+0x1c>)
 8010664:	2300      	movs	r3, #0
 8010666:	4604      	mov	r4, r0
 8010668:	4608      	mov	r0, r1
 801066a:	602b      	str	r3, [r5, #0]
 801066c:	f7f3 f8f2 	bl	8003854 <_sbrk>
 8010670:	1c43      	adds	r3, r0, #1
 8010672:	d102      	bne.n	801067a <_sbrk_r+0x1a>
 8010674:	682b      	ldr	r3, [r5, #0]
 8010676:	b103      	cbz	r3, 801067a <_sbrk_r+0x1a>
 8010678:	6023      	str	r3, [r4, #0]
 801067a:	bd38      	pop	{r3, r4, r5, pc}
 801067c:	20002e2c 	.word	0x20002e2c

08010680 <__sread>:
 8010680:	b510      	push	{r4, lr}
 8010682:	460c      	mov	r4, r1
 8010684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010688:	f000 f8fa 	bl	8010880 <_read_r>
 801068c:	2800      	cmp	r0, #0
 801068e:	bfab      	itete	ge
 8010690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010692:	89a3      	ldrhlt	r3, [r4, #12]
 8010694:	181b      	addge	r3, r3, r0
 8010696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801069a:	bfac      	ite	ge
 801069c:	6563      	strge	r3, [r4, #84]	; 0x54
 801069e:	81a3      	strhlt	r3, [r4, #12]
 80106a0:	bd10      	pop	{r4, pc}

080106a2 <__swrite>:
 80106a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a6:	461f      	mov	r7, r3
 80106a8:	898b      	ldrh	r3, [r1, #12]
 80106aa:	05db      	lsls	r3, r3, #23
 80106ac:	4605      	mov	r5, r0
 80106ae:	460c      	mov	r4, r1
 80106b0:	4616      	mov	r6, r2
 80106b2:	d505      	bpl.n	80106c0 <__swrite+0x1e>
 80106b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106b8:	2302      	movs	r3, #2
 80106ba:	2200      	movs	r2, #0
 80106bc:	f000 f870 	bl	80107a0 <_lseek_r>
 80106c0:	89a3      	ldrh	r3, [r4, #12]
 80106c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106ca:	81a3      	strh	r3, [r4, #12]
 80106cc:	4632      	mov	r2, r6
 80106ce:	463b      	mov	r3, r7
 80106d0:	4628      	mov	r0, r5
 80106d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106d6:	f000 b817 	b.w	8010708 <_write_r>

080106da <__sseek>:
 80106da:	b510      	push	{r4, lr}
 80106dc:	460c      	mov	r4, r1
 80106de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e2:	f000 f85d 	bl	80107a0 <_lseek_r>
 80106e6:	1c43      	adds	r3, r0, #1
 80106e8:	89a3      	ldrh	r3, [r4, #12]
 80106ea:	bf15      	itete	ne
 80106ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80106ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106f6:	81a3      	strheq	r3, [r4, #12]
 80106f8:	bf18      	it	ne
 80106fa:	81a3      	strhne	r3, [r4, #12]
 80106fc:	bd10      	pop	{r4, pc}

080106fe <__sclose>:
 80106fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010702:	f000 b81b 	b.w	801073c <_close_r>
	...

08010708 <_write_r>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	4d07      	ldr	r5, [pc, #28]	; (8010728 <_write_r+0x20>)
 801070c:	4604      	mov	r4, r0
 801070e:	4608      	mov	r0, r1
 8010710:	4611      	mov	r1, r2
 8010712:	2200      	movs	r2, #0
 8010714:	602a      	str	r2, [r5, #0]
 8010716:	461a      	mov	r2, r3
 8010718:	f7f1 feb4 	bl	8002484 <_write>
 801071c:	1c43      	adds	r3, r0, #1
 801071e:	d102      	bne.n	8010726 <_write_r+0x1e>
 8010720:	682b      	ldr	r3, [r5, #0]
 8010722:	b103      	cbz	r3, 8010726 <_write_r+0x1e>
 8010724:	6023      	str	r3, [r4, #0]
 8010726:	bd38      	pop	{r3, r4, r5, pc}
 8010728:	20002e2c 	.word	0x20002e2c

0801072c <abort>:
 801072c:	b508      	push	{r3, lr}
 801072e:	2006      	movs	r0, #6
 8010730:	f000 f8e0 	bl	80108f4 <raise>
 8010734:	2001      	movs	r0, #1
 8010736:	f7f3 f831 	bl	800379c <_exit>
	...

0801073c <_close_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4d06      	ldr	r5, [pc, #24]	; (8010758 <_close_r+0x1c>)
 8010740:	2300      	movs	r3, #0
 8010742:	4604      	mov	r4, r0
 8010744:	4608      	mov	r0, r1
 8010746:	602b      	str	r3, [r5, #0]
 8010748:	f7f3 f84f 	bl	80037ea <_close>
 801074c:	1c43      	adds	r3, r0, #1
 801074e:	d102      	bne.n	8010756 <_close_r+0x1a>
 8010750:	682b      	ldr	r3, [r5, #0]
 8010752:	b103      	cbz	r3, 8010756 <_close_r+0x1a>
 8010754:	6023      	str	r3, [r4, #0]
 8010756:	bd38      	pop	{r3, r4, r5, pc}
 8010758:	20002e2c 	.word	0x20002e2c

0801075c <_fstat_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4d07      	ldr	r5, [pc, #28]	; (801077c <_fstat_r+0x20>)
 8010760:	2300      	movs	r3, #0
 8010762:	4604      	mov	r4, r0
 8010764:	4608      	mov	r0, r1
 8010766:	4611      	mov	r1, r2
 8010768:	602b      	str	r3, [r5, #0]
 801076a:	f7f3 f84a 	bl	8003802 <_fstat>
 801076e:	1c43      	adds	r3, r0, #1
 8010770:	d102      	bne.n	8010778 <_fstat_r+0x1c>
 8010772:	682b      	ldr	r3, [r5, #0]
 8010774:	b103      	cbz	r3, 8010778 <_fstat_r+0x1c>
 8010776:	6023      	str	r3, [r4, #0]
 8010778:	bd38      	pop	{r3, r4, r5, pc}
 801077a:	bf00      	nop
 801077c:	20002e2c 	.word	0x20002e2c

08010780 <_isatty_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	4d06      	ldr	r5, [pc, #24]	; (801079c <_isatty_r+0x1c>)
 8010784:	2300      	movs	r3, #0
 8010786:	4604      	mov	r4, r0
 8010788:	4608      	mov	r0, r1
 801078a:	602b      	str	r3, [r5, #0]
 801078c:	f7f3 f849 	bl	8003822 <_isatty>
 8010790:	1c43      	adds	r3, r0, #1
 8010792:	d102      	bne.n	801079a <_isatty_r+0x1a>
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	b103      	cbz	r3, 801079a <_isatty_r+0x1a>
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	bd38      	pop	{r3, r4, r5, pc}
 801079c:	20002e2c 	.word	0x20002e2c

080107a0 <_lseek_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4d07      	ldr	r5, [pc, #28]	; (80107c0 <_lseek_r+0x20>)
 80107a4:	4604      	mov	r4, r0
 80107a6:	4608      	mov	r0, r1
 80107a8:	4611      	mov	r1, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	602a      	str	r2, [r5, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	f7f3 f842 	bl	8003838 <_lseek>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d102      	bne.n	80107be <_lseek_r+0x1e>
 80107b8:	682b      	ldr	r3, [r5, #0]
 80107ba:	b103      	cbz	r3, 80107be <_lseek_r+0x1e>
 80107bc:	6023      	str	r3, [r4, #0]
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	20002e2c 	.word	0x20002e2c

080107c4 <__ascii_mbtowc>:
 80107c4:	b082      	sub	sp, #8
 80107c6:	b901      	cbnz	r1, 80107ca <__ascii_mbtowc+0x6>
 80107c8:	a901      	add	r1, sp, #4
 80107ca:	b142      	cbz	r2, 80107de <__ascii_mbtowc+0x1a>
 80107cc:	b14b      	cbz	r3, 80107e2 <__ascii_mbtowc+0x1e>
 80107ce:	7813      	ldrb	r3, [r2, #0]
 80107d0:	600b      	str	r3, [r1, #0]
 80107d2:	7812      	ldrb	r2, [r2, #0]
 80107d4:	1e10      	subs	r0, r2, #0
 80107d6:	bf18      	it	ne
 80107d8:	2001      	movne	r0, #1
 80107da:	b002      	add	sp, #8
 80107dc:	4770      	bx	lr
 80107de:	4610      	mov	r0, r2
 80107e0:	e7fb      	b.n	80107da <__ascii_mbtowc+0x16>
 80107e2:	f06f 0001 	mvn.w	r0, #1
 80107e6:	e7f8      	b.n	80107da <__ascii_mbtowc+0x16>

080107e8 <memmove>:
 80107e8:	4288      	cmp	r0, r1
 80107ea:	b510      	push	{r4, lr}
 80107ec:	eb01 0402 	add.w	r4, r1, r2
 80107f0:	d902      	bls.n	80107f8 <memmove+0x10>
 80107f2:	4284      	cmp	r4, r0
 80107f4:	4623      	mov	r3, r4
 80107f6:	d807      	bhi.n	8010808 <memmove+0x20>
 80107f8:	1e43      	subs	r3, r0, #1
 80107fa:	42a1      	cmp	r1, r4
 80107fc:	d008      	beq.n	8010810 <memmove+0x28>
 80107fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010806:	e7f8      	b.n	80107fa <memmove+0x12>
 8010808:	4402      	add	r2, r0
 801080a:	4601      	mov	r1, r0
 801080c:	428a      	cmp	r2, r1
 801080e:	d100      	bne.n	8010812 <memmove+0x2a>
 8010810:	bd10      	pop	{r4, pc}
 8010812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801081a:	e7f7      	b.n	801080c <memmove+0x24>

0801081c <__malloc_lock>:
 801081c:	4801      	ldr	r0, [pc, #4]	; (8010824 <__malloc_lock+0x8>)
 801081e:	f7fe bfc2 	b.w	800f7a6 <__retarget_lock_acquire_recursive>
 8010822:	bf00      	nop
 8010824:	20002e24 	.word	0x20002e24

08010828 <__malloc_unlock>:
 8010828:	4801      	ldr	r0, [pc, #4]	; (8010830 <__malloc_unlock+0x8>)
 801082a:	f7fe bfbd 	b.w	800f7a8 <__retarget_lock_release_recursive>
 801082e:	bf00      	nop
 8010830:	20002e24 	.word	0x20002e24

08010834 <_realloc_r>:
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	4607      	mov	r7, r0
 8010838:	4614      	mov	r4, r2
 801083a:	460e      	mov	r6, r1
 801083c:	b921      	cbnz	r1, 8010848 <_realloc_r+0x14>
 801083e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010842:	4611      	mov	r1, r2
 8010844:	f7ff bbfc 	b.w	8010040 <_malloc_r>
 8010848:	b922      	cbnz	r2, 8010854 <_realloc_r+0x20>
 801084a:	f7ff fba9 	bl	800ffa0 <_free_r>
 801084e:	4625      	mov	r5, r4
 8010850:	4628      	mov	r0, r5
 8010852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010854:	f000 f877 	bl	8010946 <_malloc_usable_size_r>
 8010858:	42a0      	cmp	r0, r4
 801085a:	d20f      	bcs.n	801087c <_realloc_r+0x48>
 801085c:	4621      	mov	r1, r4
 801085e:	4638      	mov	r0, r7
 8010860:	f7ff fbee 	bl	8010040 <_malloc_r>
 8010864:	4605      	mov	r5, r0
 8010866:	2800      	cmp	r0, #0
 8010868:	d0f2      	beq.n	8010850 <_realloc_r+0x1c>
 801086a:	4631      	mov	r1, r6
 801086c:	4622      	mov	r2, r4
 801086e:	f7fd f8bf 	bl	800d9f0 <memcpy>
 8010872:	4631      	mov	r1, r6
 8010874:	4638      	mov	r0, r7
 8010876:	f7ff fb93 	bl	800ffa0 <_free_r>
 801087a:	e7e9      	b.n	8010850 <_realloc_r+0x1c>
 801087c:	4635      	mov	r5, r6
 801087e:	e7e7      	b.n	8010850 <_realloc_r+0x1c>

08010880 <_read_r>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4d07      	ldr	r5, [pc, #28]	; (80108a0 <_read_r+0x20>)
 8010884:	4604      	mov	r4, r0
 8010886:	4608      	mov	r0, r1
 8010888:	4611      	mov	r1, r2
 801088a:	2200      	movs	r2, #0
 801088c:	602a      	str	r2, [r5, #0]
 801088e:	461a      	mov	r2, r3
 8010890:	f7f2 ff8e 	bl	80037b0 <_read>
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	d102      	bne.n	801089e <_read_r+0x1e>
 8010898:	682b      	ldr	r3, [r5, #0]
 801089a:	b103      	cbz	r3, 801089e <_read_r+0x1e>
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	20002e2c 	.word	0x20002e2c

080108a4 <_raise_r>:
 80108a4:	291f      	cmp	r1, #31
 80108a6:	b538      	push	{r3, r4, r5, lr}
 80108a8:	4604      	mov	r4, r0
 80108aa:	460d      	mov	r5, r1
 80108ac:	d904      	bls.n	80108b8 <_raise_r+0x14>
 80108ae:	2316      	movs	r3, #22
 80108b0:	6003      	str	r3, [r0, #0]
 80108b2:	f04f 30ff 	mov.w	r0, #4294967295
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
 80108b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108ba:	b112      	cbz	r2, 80108c2 <_raise_r+0x1e>
 80108bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108c0:	b94b      	cbnz	r3, 80108d6 <_raise_r+0x32>
 80108c2:	4620      	mov	r0, r4
 80108c4:	f000 f830 	bl	8010928 <_getpid_r>
 80108c8:	462a      	mov	r2, r5
 80108ca:	4601      	mov	r1, r0
 80108cc:	4620      	mov	r0, r4
 80108ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108d2:	f000 b817 	b.w	8010904 <_kill_r>
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d00a      	beq.n	80108f0 <_raise_r+0x4c>
 80108da:	1c59      	adds	r1, r3, #1
 80108dc:	d103      	bne.n	80108e6 <_raise_r+0x42>
 80108de:	2316      	movs	r3, #22
 80108e0:	6003      	str	r3, [r0, #0]
 80108e2:	2001      	movs	r0, #1
 80108e4:	e7e7      	b.n	80108b6 <_raise_r+0x12>
 80108e6:	2400      	movs	r4, #0
 80108e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108ec:	4628      	mov	r0, r5
 80108ee:	4798      	blx	r3
 80108f0:	2000      	movs	r0, #0
 80108f2:	e7e0      	b.n	80108b6 <_raise_r+0x12>

080108f4 <raise>:
 80108f4:	4b02      	ldr	r3, [pc, #8]	; (8010900 <raise+0xc>)
 80108f6:	4601      	mov	r1, r0
 80108f8:	6818      	ldr	r0, [r3, #0]
 80108fa:	f7ff bfd3 	b.w	80108a4 <_raise_r>
 80108fe:	bf00      	nop
 8010900:	2000007c 	.word	0x2000007c

08010904 <_kill_r>:
 8010904:	b538      	push	{r3, r4, r5, lr}
 8010906:	4d07      	ldr	r5, [pc, #28]	; (8010924 <_kill_r+0x20>)
 8010908:	2300      	movs	r3, #0
 801090a:	4604      	mov	r4, r0
 801090c:	4608      	mov	r0, r1
 801090e:	4611      	mov	r1, r2
 8010910:	602b      	str	r3, [r5, #0]
 8010912:	f7f2 ff33 	bl	800377c <_kill>
 8010916:	1c43      	adds	r3, r0, #1
 8010918:	d102      	bne.n	8010920 <_kill_r+0x1c>
 801091a:	682b      	ldr	r3, [r5, #0]
 801091c:	b103      	cbz	r3, 8010920 <_kill_r+0x1c>
 801091e:	6023      	str	r3, [r4, #0]
 8010920:	bd38      	pop	{r3, r4, r5, pc}
 8010922:	bf00      	nop
 8010924:	20002e2c 	.word	0x20002e2c

08010928 <_getpid_r>:
 8010928:	f7f2 bf20 	b.w	800376c <_getpid>

0801092c <__ascii_wctomb>:
 801092c:	b149      	cbz	r1, 8010942 <__ascii_wctomb+0x16>
 801092e:	2aff      	cmp	r2, #255	; 0xff
 8010930:	bf85      	ittet	hi
 8010932:	238a      	movhi	r3, #138	; 0x8a
 8010934:	6003      	strhi	r3, [r0, #0]
 8010936:	700a      	strbls	r2, [r1, #0]
 8010938:	f04f 30ff 	movhi.w	r0, #4294967295
 801093c:	bf98      	it	ls
 801093e:	2001      	movls	r0, #1
 8010940:	4770      	bx	lr
 8010942:	4608      	mov	r0, r1
 8010944:	4770      	bx	lr

08010946 <_malloc_usable_size_r>:
 8010946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801094a:	1f18      	subs	r0, r3, #4
 801094c:	2b00      	cmp	r3, #0
 801094e:	bfbc      	itt	lt
 8010950:	580b      	ldrlt	r3, [r1, r0]
 8010952:	18c0      	addlt	r0, r0, r3
 8010954:	4770      	bx	lr
	...

08010958 <_init>:
 8010958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801095a:	bf00      	nop
 801095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801095e:	bc08      	pop	{r3}
 8010960:	469e      	mov	lr, r3
 8010962:	4770      	bx	lr

08010964 <_fini>:
 8010964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010966:	bf00      	nop
 8010968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801096a:	bc08      	pop	{r3}
 801096c:	469e      	mov	lr, r3
 801096e:	4770      	bx	lr
